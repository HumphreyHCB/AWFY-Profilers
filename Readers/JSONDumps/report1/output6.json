{
    "JavaFlightRecorder": {
        "JavaFlightRecorder_NBody.jfr": {
            " ": "0",
            "nbody.NBodySystem.advance(D)V": "99.68404423380727",
            "NBody.innerBenchmarkLoop(I)Z": "0.315955766192733"
        },
        "JavaFlightRecorder_Mandelbrot.jfr": {
            " ": "0",
            "Mandelbrot.mandelbrot(I)I": "100.0"
        },
        "JavaFlightRecorder_Queens.jfr": {
            "java.util.Arrays.fill([II)V": "0.8250825082508251",
            "Queens.placeQueen(I)Z": "83.16831683168317",
            "Queens.getRowColumn(II)Z": "13.696369636963697",
            "java.util.Arrays.fill([ZZ)V": "1.4851485148514851",
            "Queens.queens()Z": "0.6600660066006601"
        },
        "JavaFlightRecorder_Richards.jfr": {
            "richards.Scheduler.schedule()V": "60.28687948249191",
            "richards.HandlerTaskDataRecord.workInAdd(Lrichards/Packet;)V": "15.36352130502039",
            "Richards.benchmark()Ljava/lang/Object;": "4.746167908873576",
            "richards.RBObject.append(Lrichards/Packet;Lrichards/Packet;)Lrichards/Packet;": "9.752496132752073",
            "richards.TaskControlBlock.runTask()Lrichards/TaskControlBlock;": "4.640697510898607"
        },
        "JavaFlightRecorder_Havlak.jfr": {
            "havlak.HavlakLoopFinder.doDFS(Lhavlak/BasicBlock;I)I": "4.881999074502546",
            "som.Vector.forEach(Lsom/ForEachInterface;)V": "29.89356779268857",
            "som.IdentityDictionary.newEntry(Lsom/Dictionary$CustomHash;Ljava/lang/Object;I)Lsom/Dictionary$Entry;": "3.6094400740397967",
            "som.Vector.hasSome(Lsom/TestInterface;)Z": "49.9537251272559",
            "som.Vector.append(Ljava/lang/Object;)V": "3.9333641832484965"
        },
        "JavaFlightRecorder_CD.jfr": {
            "cd.CollisionDetector.recurse(Lcd/RedBlackTree;Lcd/RedBlackTree;Lcd/Vector2D;Lcd/Motion;)V": "6.973180076628352",
            "cd.RedBlackTree.findNode(Ljava/lang/Comparable;)Lcd/RedBlackTree$Node;": "22.413793103448274",
            "cd.CollisionDetector.isInVoxel(Lcd/Vector2D;Lcd/Motion;)Z": "15.593869731800766",
            "cd.RedBlackTree.put(Ljava/lang/Comparable;Ljava/lang/Object;)Ljava/lang/Object;": "12.413793103448276",
            "cd.RedBlackTree.treeInsert(Ljava/lang/Comparable;Ljava/lang/Object;)Lcd/RedBlackTree$InsertResult;": "28.237547892720304"
        },
        "JavaFlightRecorder_List.jfr": {
            "List.isShorterThan(LList$Element;LList$Element;)Z": "90.47619047619048",
            " ": "0",
            "List.tail(LList$Element;LList$Element;LList$Element;)LList$Element;": "9.070294784580499",
            "List.makeList(I)LList$Element;": "0.45351473922902497"
        },
        "JavaFlightRecorder_Json.jfr": {
            "json.JsonPureStringParser.readExponent()Z": "7.406172604305582",
            "java.lang.StringLatin1.newString([BII)Ljava/lang/String;": "16.35549628500667",
            "json.JsonPureStringParser.readStringInternal()Ljava/lang/String;": "30.86302152791008",
            "json.JsonPureStringParser.readArray()Ljson/JsonArray;": "22.65193370165746",
            "json.JsonPureStringParser.readObject()Ljson/JsonObject;": "10.749666603162508"
        },
        "JavaFlightRecorder_DeltaBlue.jfr": {
            "deltablue.Planner.lambda$addConstraintsConsumingTo$2(Ldeltablue/AbstractConstraint;Lsom/Vector;Ldeltablue/AbstractConstraint;)V": "8.0",
            "deltablue.Planner.addPropagate(Ldeltablue/AbstractConstraint;I)Z": "8.0",
            "java.util.Arrays.copyOf([Ljava/lang/Object;I)[Ljava/lang/Object;": "8.0",
            "som.Vector.forEach(Lsom/ForEachInterface;)V": "40.0",
            "deltablue.Planner.lambda$removePropagateFrom$4(Lsom/Vector;Ldeltablue/AbstractConstraint;)V": "4.0"
        },
        "JavaFlightRecorder_Permute.jfr": {
            " ": "0",
            "Permute.swap(II)V": "29.634146341463413",
            "Permute.permute(I)V": "70.2439024390244",
            "Permute.benchmark()Ljava/lang/Object;": "0.12195121951219512"
        },
        "JavaFlightRecorder_Storage.jfr": {
            "Storage.lambda$buildTreeDepth$0(ILsom/Random;I)Ljava/lang/Object;": "12.905198776758409",
            "Storage.benchmark()Ljava/lang/Object;": "0.06116207951070336",
            "Storage.buildTreeDepth(ILsom/Random;)Ljava/lang/Object;": "86.91131498470948",
            "java.lang.String.substring(II)Ljava/lang/String;": "0.06116207951070336",
            "java.lang.invoke.LambdaForm$NamedFunction.methodType()Ljava/lang/invoke/MethodType;": "0.06116207951070336"
        },
        "JavaFlightRecorder_Sieve.jfr": {
            "java.lang.invoke.LambdaForm$Name.<init>(Ljava/lang/invoke/LambdaForm$NamedFunction;[Ljava/lang/Object;)V": "0.31545741324921134",
            "java.lang.Integer.valueOf(I)Ljava/lang/Integer;": "0.31545741324921134",
            "Sieve.benchmark()Ljava/lang/Object;": "0.31545741324921134",
            "java.util.Arrays.fill([ZZ)V": "0.31545741324921134",
            "Sieve.sieve([ZI)I": "98.42271293375394"
        }
    },
    "HonestProfiler": {
        "Permute.hpl": {
            "Permute::swap": "40.3",
            "Permute::permute": "50.6",
            "AGCT::Not walkable Java[ERR=-6]": "0.0",
            "AGCT::Unknown not Java[ERR=-3]": "2.9",
            "AGCT::Unknown Java[ERR=-5]": "5.7"
        },
        "Queens.hpl": {
            "Queens::getRowColumn": "55.6",
            "AGCT::Unknown not Java[ERR=-3]": "4.6",
            "AGCT::Unknown Java[ERR=-5]": "0.9",
            "Queens::placeQueen": "12.9",
            "Queens::setRowColumn": "23.7"
        },
        "Richards.hpl": {
            "richards.Packet::<init>": "2.0",
            "Richards::benchmark": "26.0",
            "richards.RBObject::append": "2.6",
            "AGCT::Unknown Java[ERR=-5]": "45.3",
            "richards.HandlerTaskDataRecord::workInAdd": "2.2"
        },
        "Storage.hpl": {
            "Storage::buildTreeDepth": "39.5",
            "java.util.Arrays::setAll": "34.7",
            "som.Random::next": "12.1",
            "AGCT::Unknown not Java[ERR=-3]": "4.8",
            "Storage::lambda$buildTreeDepth$0": "3.4"
        },
        "Sieve.hpl": {
            "Sieve::benchmark": "13.2",
            "Sieve::sieve": "76.4",
            "AGCT::Unknown not Java[ERR=-3]": "4.7",
            "AGCT::Unknown Java[ERR=-5]": "0.1",
            "java.util.Arrays::fill": "4.4"
        },
        "Mandelbrot.hpl": {
            "java.io.FileOutputStream::writeBytes": "0.0",
            "AGCT::Not walkable Java[ERR=-6]": "0.0",
            "java.lang.ClassLoader::defineClass0": "0.0",
            "AGCT::Unknown not Java[ERR=-3]": "1.2",
            "Mandelbrot::mandelbrot": "98.4"
        },
        "DeltaBlue.hpl": {
            "deltablue.Planner$$Lambda$5.0x0000000800c0cbb0::apply": "2.0",
            "deltablue.Plan$$Lambda$8.0x0000000800c0d938::apply": "1.7",
            "AGCT::Unknown not Java[ERR=-3]": "54.1",
            "AGCT::Unknown Java[ERR=-5]": "11.7",
            "som.Vector::forEach": "5.4"
        },
        "NBody.hpl": {
            "nbody.Body::setVZ": "7.2",
            "nbody.Body::getZ": "8.5",
            "nbody.Body::setVX": "29.1",
            "nbody.Body::setVY": "6.0",
            "nbody.NBodySystem::advance": "39.9"
        },
        "List.hpl": {
            "List$Element::getNext": "8.7",
            "List::tail": "1.9",
            "List::isShorterThan": "79.7",
            "AGCT::Unknown not Java[ERR=-3]": "5.4",
            "AGCT::Unknown Java[ERR=-5]": "2.7"
        },
        "Json.hpl": {
            "json.JsonPureStringParser::read": "14.0",
            "java.util.Arrays::copyOfRange": "8.3",
            "java.lang.String::equals": "22.2",
            "AGCT::Unknown Java[ERR=-5]": "10.6",
            "json.JsonPureStringParser::readStringInternal": "9.4"
        },
        "CD.hpl": {
            "cd.CollisionDetector::recurse": "10.9",
            "cd.RedBlackTree::put": "7.1",
            "cd.RedBlackTree::findNode": "7.4",
            "cd.RedBlackTree::treeInsert": "20.7",
            "cd.CollisionDetector::isInVoxel": "14.5"
        },
        "Havlak.hpl": {
            "som.IdentitySet::lambda$contains$0": "35.1",
            "havlak.HavlakLoopFinder::lambda$initAllNodes$0": "12.4",
            "havlak.HavlakLoopFinder::findLoops": "6.2",
            "AGCT::Unknown not Java[ERR=-3]": "7.9",
            "havlak.HavlakLoopFinder::lambda$processEdges$1": "5.9"
        }
    },
    "Async": {
        "rebench_test_Async_DeltaBlue.txt": {
            "deltablue.AbstractConstraint.destroyConstraint": "1.37%",
            "itable": "6.08%",
            "som.Vector.forEach": "4.54%",
            "IndexSetIterator::advance_and_next()": "1.37%",
            "deltablue.Plan$$Lambda$8.0x0000000800c0d938.apply": "3.16%"
        },
        "rebench_test_Async_Bounce.txt": {
            "Bounce$Ball.bounce": "69.69%",
            "som.Random.next": "0.64%",
            "java.util.Arrays.setAll": "0.50%",
            "Bounce.benchmark": "23.25%",
            "Bounce$Ball.<init>": "1.37%"
        },
        "rebench_test_Async_Mandelbrot.txt": {
            "Interpreter": "0.03%",
            "Mandelbrot.mandelbrot": "98.54%",
            "InstanceKlass::find_method_index(Array<Method*>": "0.01%",
            "__tls_get_addr": "0.02%",
            "[vdso]": "0.01%"
        },
        "rebench_test_Async_Storage.txt": {
            "som.Random.next": "10.70%",
            "java.lang.invoke.LambdaForm$DMH.0x0000000800c06800.newInvokeSpecial": "1.22%",
            "java.util.Arrays.setAll": "35.60%",
            "Storage.lambda$buildTreeDepth$0": "4.17%",
            "Storage.buildTreeDepth": "43.09%"
        },
        "rebench_test_Async_CD.txt": {
            "cd.CollisionDetector.recurse": "10.36%",
            "cd.CollisionDetector.isInVoxel": "14.13%",
            "cd.RedBlackTree.put": "6.92%",
            "cd.RedBlackTree.treeInsert": "20.12%",
            "cd.RedBlackTree.findNode": "7.93%"
        },
        "rebench_test_Async_Havlak.txt": {
            "havlak.HavlakLoopFinder.findLoops": "5.68%",
            "havlak.HavlakLoopFinder.lambda$initAllNodes$0": "12.25%",
            "som.IdentitySet.lambda$contains$0": "32.32%",
            "G1ParScanThreadState::trim_queue_to_threshold(unsigned": "8.23%",
            "havlak.HavlakLoopFinder.lambda$processEdges$1": "6.06%"
        },
        "rebench_test_Async_Sieve.txt": {
            "java.util.Arrays.fill": "11.23%",
            "Sieve.benchmark": "14.17%",
            "Interpreter": "0.09%",
            "Sieve.sieve": "68.68%",
            "Benchmark.innerBenchmarkLoop": "0.13%"
        },
        "rebench_test_Async_Permute.txt": {
            "Permute.permute": "57.29%",
            "Permute.swap": "40.70%",
            "Permute.benchmark": "0.07%",
            "Interpreter": "0.04%",
            "Benchmark.innerBenchmarkLoop": "0.07%"
        },
        "rebench_test_Async_NBody.txt": {
            "nbody.Body.setVZ": "8.83%",
            "nbody.Body.getZ": "7.71%",
            "nbody.Body.setVX": "27.75%",
            "nbody.Body.setVY": "5.71%",
            "nbody.NBodySystem.advance": "41.84%"
        },
        "rebench_test_Async_List.txt": {
            "List$Element.getNext": "8.98%",
            "List.makeList": "1.23%",
            "List.tail": "4.44%",
            "List.isShorterThan": "80.29%",
            "List$Element.<init>": "0.31%"
        },
        "rebench_test_Async_Json.txt": {
            "jbyte_disjoint_arraycopy": "7.88%",
            "java.lang.String.<init>": "6.92%",
            "java.util.Arrays.copyOfRange": "7.74%",
            "java.lang.String.equals": "22.90%",
            "json.JsonPureStringParser.read": "15.44%"
        },
        "rebench_test_Async_Queens.txt": {
            "java.util.Arrays.fill": "0.93%",
            "Queens.getRowColumn": "69.06%",
            "Queens.setRowColumn": "17.43%",
            "Queens.queens": "0.58%",
            "Queens.placeQueen": "8.90%"
        },
        "rebench_test_Async_Richards.txt": {
            "Richards.benchmark": "23.79%",
            "richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply": "3.53%",
            "itable": "38.76%",
            "richards.RBObject.append": "2.74%",
            "richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply": "3.95%"
        }
    }
}