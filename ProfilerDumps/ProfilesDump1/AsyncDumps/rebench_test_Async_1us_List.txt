--- Execution profile ---
Total samples       : 7220829
unknown_Java        : 101366 (1.40%)
not_walkable_Java   : 1276 (0.02%)
deoptimization      : 9 (0.00%)

--- 1029306871 ns (1.39%), 100392 samples
  [ 0] List.tail
  [ 1] [unknown_Java]

--- 415483841 ns (0.56%), 40295 samples
  [ 0] List.makeList
  [ 1] List.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 143517502 ns (0.19%), 14034 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 136989095 ns (0.18%), 13366 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 136630991 ns (0.18%), 13322 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 125061152 ns (0.17%), 12230 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 123892917 ns (0.17%), 12125 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 120494917 ns (0.16%), 11799 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 120326037 ns (0.16%), 11763 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 119303850 ns (0.16%), 11634 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 117160648 ns (0.16%), 11452 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 114273808 ns (0.15%), 11188 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 113725257 ns (0.15%), 11104 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 112836306 ns (0.15%), 11024 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 108008674 ns (0.15%), 10555 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 107374205 ns (0.14%), 10489 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 107172784 ns (0.14%), 10488 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 106033009 ns (0.14%), 10388 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 106007302 ns (0.14%), 10336 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 102474530 ns (0.14%), 10013 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 99934266 ns (0.13%), 9778 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 99604832 ns (0.13%), 9733 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 99212519 ns (0.13%), 9722 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 97727618 ns (0.13%), 9526 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 97680017 ns (0.13%), 9540 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 97524438 ns (0.13%), 9558 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 97228400 ns (0.13%), 9460 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 95836023 ns (0.13%), 9367 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 95685946 ns (0.13%), 9347 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 95647109 ns (0.13%), 9362 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 94870019 ns (0.13%), 9261 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 94854123 ns (0.13%), 9253 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 94678562 ns (0.13%), 9274 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 94294785 ns (0.13%), 9240 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 94180843 ns (0.13%), 9199 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 93948266 ns (0.13%), 9171 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 93104807 ns (0.13%), 9090 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 93009602 ns (0.13%), 9105 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 92956118 ns (0.13%), 9087 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 92928473 ns (0.13%), 9100 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 92848100 ns (0.13%), 9097 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 92593230 ns (0.12%), 9025 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 92562325 ns (0.12%), 9033 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 91635290 ns (0.12%), 8940 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 91449160 ns (0.12%), 8930 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 91330471 ns (0.12%), 8896 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 91135052 ns (0.12%), 8920 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 90951694 ns (0.12%), 8869 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 90156650 ns (0.12%), 8825 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 89577689 ns (0.12%), 8758 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 88429483 ns (0.12%), 8633 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 88237269 ns (0.12%), 8592 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 87290212 ns (0.12%), 8517 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 87271184 ns (0.12%), 8513 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 87151410 ns (0.12%), 8509 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 85898475 ns (0.12%), 8390 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 85542973 ns (0.12%), 8332 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 85220991 ns (0.12%), 8308 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 85161245 ns (0.11%), 8319 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 85132924 ns (0.11%), 8320 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 84900662 ns (0.11%), 8298 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 84385431 ns (0.11%), 8247 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 84297789 ns (0.11%), 8273 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 84285429 ns (0.11%), 8229 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 83832960 ns (0.11%), 8196 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 83704817 ns (0.11%), 8138 samples
  [ 0] List.makeList
  [ 1] List.makeList
  [ 2] List.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 83410942 ns (0.11%), 8156 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 83323121 ns (0.11%), 8144 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 82642079 ns (0.11%), 8081 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 82549284 ns (0.11%), 8081 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 82526769 ns (0.11%), 8048 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 82429161 ns (0.11%), 8064 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 81397007 ns (0.11%), 7968 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 81287405 ns (0.11%), 7912 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 81073913 ns (0.11%), 7930 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 80339951 ns (0.11%), 7858 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 80165260 ns (0.11%), 7838 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 80079596 ns (0.11%), 7851 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 79930045 ns (0.11%), 7815 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 79658894 ns (0.11%), 7774 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 79423671 ns (0.11%), 7781 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 79230280 ns (0.11%), 7730 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78832724 ns (0.11%), 7713 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78680187 ns (0.11%), 7693 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78652217 ns (0.11%), 7669 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78574982 ns (0.11%), 7707 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78466949 ns (0.11%), 7684 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 78318158 ns (0.11%), 7658 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 77948174 ns (0.11%), 7620 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 77766296 ns (0.10%), 7623 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 77688680 ns (0.10%), 7604 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 77398418 ns (0.10%), 7546 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 77210036 ns (0.10%), 7551 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 77200659 ns (0.10%), 7529 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 77063344 ns (0.10%), 7521 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 77017097 ns (0.10%), 7549 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 76928329 ns (0.10%), 7528 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 76887387 ns (0.10%), 7506 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 76878104 ns (0.10%), 7498 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 76679461 ns (0.10%), 7468 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 61790426532   83.41%  6034593  List.isShorterThan
  6938639152    9.37%   677193  List$Element.getNext
  3306004267    4.46%   322472  List.tail
   926273587    1.25%    90022  List.makeList
   138800445    0.19%    13546  List$Element.<init>
    86802570    0.12%     8434  List$Element.length
    55590577    0.08%     5412  List.verifyResult
    29605737    0.04%     2861  List$Element.setNext
    22135894    0.03%     2164  java.lang.Integer.valueOf
    18304713    0.02%     1700  Benchmark.innerBenchmarkLoop
    15609026    0.02%     1082  generic_exec_single_[k]
    13594437    0.02%     1262  Interpreter
    13439502    0.02%     1005  exit_to_user_mode_loop_[k]
    13058064    0.02%      677  _raw_spin_unlock_irqrestore_[k]
     9574535    0.01%      418  [vdso]
     8768050    0.01%      320  clock_gettime@GLIBC_2.2.5
     8098262    0.01%      586  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     7933313    0.01%      575  __tls_get_addr
     6003823    0.01%      591  List.benchmark
     5597511    0.01%      541  java.lang.Object.<init>
     5270322    0.01%      406  restore_fpregs_from_user_[k]
     4980452    0.01%      436  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     4898341    0.01%      331  copy_user_generic_string_[k]
     4895161    0.01%      294  syscall_enter_from_user_mode_[k]
     4237650    0.01%      352  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     3565682    0.00%      324  I2C/C2I adapters(0xb)
     2886660    0.00%      250  LinearScan::build_intervals()
     2883951    0.00%      240  __memset_avx2_unaligned_erms
     2862090    0.00%      280  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
     2830100    0.00%      107  __futex_abstimed_wait_common
     2775910    0.00%      249  DebugInformationRecorder::find_sharable_decode_offset(int)
     2598051    0.00%      234  [no_Java_frame]
     2532170    0.00%      252  _invokeBasic
     2509671    0.00%      241  Run.measure
     2500522    0.00%      236  PhaseChaitin::Split(unsigned int, ResourceArea*)
     2421271    0.00%      236  IndexSetIterator::advance_and_next()
     2381911    0.00%      162  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
     2377230    0.00%      190  vmSymbols::find_sid(Symbol const*)
     2375672    0.00%      211  LinearScan::allocate_registers()
     2332540    0.00%      194  LIR_OpVisitState::visit(LIR_Op*)
     2290430    0.00%      227  java.lang.invoke.LambdaForm$MH.0x0000000801008400.invoke
     2262951    0.00%      204  PhaseChaitin::gather_lrg_masks(bool)
     2200741    0.00%      148  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
     2092291    0.00%      183  SymbolTable::lookup_shared(char const*, int, unsigned int)
     2091740    0.00%      177  LinearScanWalker::alloc_free_reg(Interval*)
     2082510    0.00%      203  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
     2017950    0.00%      112  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
     1991490    0.00%      183  PhaseLive::compute(unsigned int)
     1990802    0.00%      104  futex_wake_[k]
     1943980    0.00%      103  .annobin__ZN28G1YoungRemSetSamplingClosure14do_heap_regionEP10HeapRegion.start
     1943241    0.00%      168  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1932352    0.00%      180  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
     1926101    0.00%      188  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List*, Node_List*, bool)
     1831690    0.00%      117  rmqueue_[k]
     1801860    0.00%      175  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1769420    0.00%      143  ciObjectFactory::get_metadata(Metadata*)
     1754840    0.00%      128  _raw_spin_unlock_irq_[k]
     1741451    0.00%      128  do_user_addr_fault_[k]
     1716060    0.00%      161  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     1708922    0.00%      162  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     1705271    0.00%      158  I2C/C2I adapters(0xbb)
     1683680    0.00%      144  jdk.internal.org.objectweb.asm.Frame.execute
     1679130    0.00%      163  PhaseChaitin::post_allocate_copy_removal()
     1668850    0.00%       60  WatcherThread::sleep() const
     1646630    0.00%       68  pthread_cond_timedwait@@GLIBC_2.3.2
     1646130    0.00%      105  void G1ScanCardClosure::do_oop_work<narrowOop>(narrowOop*)
     1634532    0.00%      144  LinearScan::compute_local_live_sets()
     1604670    0.00%      123  pthread_mutex_lock@@GLIBC_2.2.5
     1508510    0.00%      126  malloc
     1502392    0.00%       57  PeriodicTask::real_time_tick(int)
     1431150    0.00%       70  G1CollectionSet::iterate(HeapRegionClosure*) const
     1413090    0.00%       54  os::PlatformMonitor::wait(long)
     1387380    0.00%      123  LinearScanWalker::free_collect_inactive_fixed(Interval*)
     1382381    0.00%      130  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
     1380331    0.00%       61  .annobin__ZN15StatSamplerTask4taskEv.start
     1367480    0.00%      122  ValueStack::values_do(ValueVisitor*)
     1361820    0.00%       47  Monitor::wait_without_safepoint_check(long)
     1359842    0.00%      121  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
     1358150    0.00%       99  __get_user_nocheck_8_[k]
     1344850    0.00%       50  __pthread_mutex_cond_lock
     1338510    0.00%      116  GraphBuilder::iterate_bytecodes_for_block(int)
     1336010    0.00%      117  Dictionary::find(unsigned int, Symbol*, Handle)
     1321090    0.00%      108  Dict::Insert(void*, void*, bool)
     1319180    0.00%      116  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
     1305310    0.00%       80  __get_user_nocheck_4_[k]
     1299530    0.00%      127  sun.nio.cs.StreamEncoder.implWrite
     1297520    0.00%      113  jdk.internal.org.objectweb.asm.ByteVector.putUTF8
     1271431    0.00%      111  methodHandle::~methodHandle()
     1262830    0.00%       66  Mutex::lock_without_safepoint_check()
     1262521    0.00%       54  __schedule_[k]
     1254400    0.00%      102  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
     1253420    0.00%      122  Run.printResult
     1230741    0.00%       92  __GI___pthread_mutex_unlock_usercnt
     1224171    0.00%      101  __memmove_avx_unaligned_erms
     1221750    0.00%      109  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
     1218640    0.00%      119  java.lang.String.getChars
     1200321    0.00%       52  VMError::is_error_reported()
     1166440    0.00%      112  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
     1164332    0.00%      106  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
     1148352    0.00%       99  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
     1130340    0.00%       59  __x64_sys_futex_[k]
     1127671    0.00%      100  NullCheckEliminator::iterate_one(BlockBegin*)
     1127060    0.00%       78  __memcpy_avx_unaligned
     1108990    0.00%       84  clear_page_rep_[k]
     1100970    0.00%       86  __vfprintf_internal
     1091150    0.00%       98  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
     1077560    0.00%      102  PhaseIdealLoop::Dominators()
     1074480    0.00%       99  PhaseCCP::analyze()
     1071740    0.00%       95  ObjArrayAllocator::initialize(HeapWordImpl**) const
     1063281    0.00%       85  _int_malloc
     1060620    0.00%       57  ___pthread_mutex_unlock
     1059930    0.00%       80  os::free(void*)
     1048250    0.00%       95  __GI___pthread_mutex_trylock
     1046650    0.00%      103  java.io.PrintStream.writeln
     1044900    0.00%       90  G1FromCardCache::clear(unsigned int)
     1035471    0.00%       93  NodeHash::hash_find_insert(Node*)
     1029381    0.00%       90  jdk.internal.org.objectweb.asm.Frame.push
     1023311    0.00%       59  os::elapsed_counter()
     1008070    0.00%       93  MemAllocator::allocate() const
     1000320    0.00%       90  __GI___ioctl
      997420    0.00%       89  Matcher::xform(Node*, int)
      992460    0.00%       89  java.lang.AbstractStringBuilder.append
      987840    0.00%       83  __memset_avx2_unaligned
      985640    0.00%       92  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
      977181    0.00%       86  java.lang.invoke.MethodType.equals
      968670    0.00%       83  Type::cmp(Type const*, Type const*)
      953950    0.00%       82  java.lang.invoke.LambdaForm$Name.<init>
      949571    0.00%       73  java.lang.invoke.LambdaForm.useCount
      939891    0.00%       78  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
      923491    0.00%       79  .annobin__ZN14AccessInternal19PostRuntimeDispatchIN12G1BarrierSet13AccessBarrierILm286822ES1_EELNS_11BarrierTypeE3ELm286822EE18oop_access_barrierEP7oopDescl.start
      915570    0.00%       82  java.util.Arrays.copyOf
      909350    0.00%       78  java.lang.invoke.InvokerBytecodeGenerator.addMethod
      896400    0.00%       78  Interval::add_range(int, int)
      894900    0.00%       86  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
      886890    0.00%       61  OtherRegionsTable::occupied() const
      883670    0.00%       86  java.lang.Long.getChars
      880150    0.00%       34  __audit_syscall_entry_[k]
      875450    0.00%       77  jdk.internal.org.objectweb.asm.SymbolTable.hash
      873880    0.00%       86  java.lang.StringConcatHelper.mix
      865700    0.00%       55  .annobin__ZN21OopOopIterateDispatchI17G1ScanCardClosureE5Table15oop_oop_iterateI19InstanceMirrorKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      854610    0.00%       40  .annobin__ZN15PerfLongVariant6sampleEv.start
      847610    0.00%       69  GraphBuilder::append_with_bci(Instruction*, int)
      836120    0.00%       79  G1Allocator::unsafe_max_tlab_alloc()
      834610    0.00%       74  CodeHeap::find_blob_unsafe(void*) const
      834211    0.00%       72  jdk.internal.org.objectweb.asm.Type.getArgumentsAndReturnSizes
      825690    0.00%       81  SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
      819330    0.00%       80  java.lang.Long.stringSize
      811290    0.00%       70  java.lang.String.length
      806131    0.00%       70  java.lang.invoke.MethodType.checkPtypes
      802390    0.00%       72  InterpreterRuntime::ldc(JavaThread*, bool)
      792010    0.00%       38  futex_wait_[k]
      791270    0.00%       65  __tls_get_addr@plt
      782160    0.00%       68  CodeCache::find_blob(void*)
      777090    0.00%       68  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      770800    0.00%       76  PhaseIterGVN::transform_old(Node*)
      766480    0.00%       50  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
      765650    0.00%       27  __hrtimer_init_[k]
      759740    0.00%       46  __strchr_avx2
      752590    0.00%       65  ValueMap::find_insert(Instruction*)
      742300    0.00%       60  Dependencies::assert_evol_method(ciMethod*)
      737880    0.00%       66  Matcher::find_shared(Node*)
      735501    0.00%       61  jdk.internal.org.objectweb.asm.SymbolTable.addConstantNameAndType
      729270    0.00%       26  finish_task_switch.isra.0_[k]
      726671    0.00%       66  Matcher::match_tree(Node const*)
      718650    0.00%       68  java.lang.StringConcatHelper.newArray
      716660    0.00%       65  Relocation::pd_call_destination(unsigned char*)
      714660    0.00%       58  MethodLiveness::init_basic_blocks()
      711950    0.00%       79  _dl_update_slotinfo
      707631    0.00%       60  constantPoolHandle::~constantPoolHandle()
      704440    0.00%       57  MethodData::compute_allocation_size_in_bytes(methodHandle const&)
      703240    0.00%       64  PhaseAggressiveCoalesce::insert_copies(Matcher&)
      697610    0.00%       61  java.lang.invoke.MethodType$ConcurrentWeakInternSet.get
      692300    0.00%       56  BitMap::set_from(BitMap const&)
      689530    0.00%       64  GraphBuilder::invoke(Bytecodes::Code)
      688780    0.00%       63  java.lang.invoke.MethodType.insertParameterTypes
      688340    0.00%       62  TypeArrayKlass::allocate_common(int, bool, JavaThread*)
      686170    0.00%       66  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      684700    0.00%       68  java.io.PrintStream.println
      680431    0.00%       66  PhaseOutput::BuildOopMaps()
      679880    0.00%       59  java.lang.invoke.LambdaForm.normalize
      679260    0.00%       63  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      677670    0.00%       61  LinearScan::eliminate_spill_moves()
      676901    0.00%       65  sun.nio.cs.StreamEncoder.writeBytes
      674950    0.00%       61  IntervalWalker::walk_to(int)
      674030    0.00%       63  java.util.concurrent.ConcurrentHashMap.putVal
      673042    0.00%       64  Compile::disconnect_useless_nodes(Unique_Node_List&, Unique_Node_List*)
      671930    0.00%       63  java.lang.String.getBytes
      669061    0.00%       58  Node::clone() const
      667300    0.00%       62  jdk.internal.org.objectweb.asm.Frame.pop
      665420    0.00%       42  do_syscall_64_[k]
      662660    0.00%       64  java.io.FileOutputStream.write
      659990    0.00%       63  PhaseIterGVN::add_users_to_worklist(Node*)
      657630    0.00%       39  AbsSeq::dsd() const
      653260    0.00%       19  __condvar_dec_grefs
      649900    0.00%       62  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
      649680    0.00%       55  SpinPause
      648540    0.00%       64  java.nio.charset.CharsetEncoder.encode
      648090    0.00%       56  LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
      644900    0.00%       62  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
      644040    0.00%       30  futex_hash_[k]
