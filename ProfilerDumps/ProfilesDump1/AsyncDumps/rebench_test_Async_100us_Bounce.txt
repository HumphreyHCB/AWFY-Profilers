--- Execution profile ---
Total samples       : 221947
unknown_Java        : 18 (0.01%)
not_walkable_Java   : 23 (0.01%)
deoptimization      : 3 (0.00%)

--- 6522724096 ns (29.36%), 65178 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 3832539184 ns (17.25%), 38295 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2610001063 ns (11.75%), 26081 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1332221839 ns (6.00%), 13312 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1259399950 ns (5.67%), 12584 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1026950598 ns (4.62%), 10261 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 767155870 ns (3.45%), 7668 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 724462788 ns (3.26%), 7239 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 510965702 ns (2.30%), 5106 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 304593572 ns (1.37%), 3042 samples
  [ 0] java.util.Arrays.setAll
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 272735234 ns (1.23%), 2725 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 231071456 ns (1.04%), 2308 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 220312805 ns (0.99%), 2201 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 200747309 ns (0.90%), 2006 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 195195313 ns (0.88%), 1951 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 184440201 ns (0.83%), 1842 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 168021901 ns (0.76%), 1678 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 159675484 ns (0.72%), 1595 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 139232684 ns (0.63%), 1391 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 115861213 ns (0.52%), 1158 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 110848688 ns (0.50%), 1107 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 92798316 ns (0.42%), 928 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 87278749 ns (0.39%), 872 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 80475302 ns (0.36%), 804 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 80273955 ns (0.36%), 802 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 64149116 ns (0.29%), 641 samples
  [ 0] Bounce.lambda$benchmark$0
  [ 1] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 2] java.util.Arrays.setAll
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 60365477 ns (0.27%), 603 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 58644357 ns (0.26%), 586 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 57781171 ns (0.26%), 577 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 56979737 ns (0.26%), 569 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 56723202 ns (0.26%), 567 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 56574194 ns (0.25%), 565 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 39222607 ns (0.18%), 392 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 34641392 ns (0.16%), 346 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 31815429 ns (0.14%), 318 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 23015475 ns (0.10%), 230 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 20026044 ns (0.09%), 200 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 15611965 ns (0.07%), 156 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 15519355 ns (0.07%), 155 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 12211972 ns (0.05%), 122 samples
  [ 0] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 1] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 2] Bounce.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 11503541 ns (0.05%), 115 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 10792460 ns (0.05%), 108 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 9112714 ns (0.04%), 91 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 7507511 ns (0.03%), 75 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 7000692 ns (0.03%), 70 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 6403651 ns (0.03%), 64 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 6400053 ns (0.03%), 62 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] ObjAllocator::initialize(HeapWordImpl**) const
  [ 9] MemAllocator::allocate() const
  [10] InstanceKlass::allocate_instance(JavaThread*)
  [11] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [12] Bounce.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 5940783 ns (0.03%), 58 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] Bounce.lambda$benchmark$0
  [ 9] Bounce$$Lambda$2.0x00000008010034f8.apply
  [10] java.util.Arrays.setAll
  [11] Bounce.benchmark
  [12] Benchmark.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 5903862 ns (0.03%), 59 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 5298831 ns (0.02%), 53 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 5203331 ns (0.02%), 52 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 5096371 ns (0.02%), 51 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 4501320 ns (0.02%), 45 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 4386532 ns (0.02%), 39 samples
  [ 0] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 1] G1PrepareEvacuationTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 4] .annobin__ZN6Thread8call_runEv.start
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 4100440 ns (0.02%), 41 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3835380 ns (0.02%), 39 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
  [ 2] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 3807940 ns (0.02%), 38 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3305443 ns (0.01%), 33 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 3107661 ns (0.01%), 31 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 3002044 ns (0.01%), 30 samples
  [ 0] Bounce.lambda$benchmark$0
  [ 1] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 2] java.util.Arrays.setAll
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2806751 ns (0.01%), 28 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2371770 ns (0.01%), 24 samples
  [ 0] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 2304951 ns (0.01%), 23 samples
  [ 0] Interpreter
  [ 1] [not_walkable_Java]

--- 2277680 ns (0.01%), 23 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 1954290 ns (0.01%), 19 samples
  [ 0] __memset_avx2_unaligned_erms
  [ 1] .annobin__ZN17G1RemSetScanState20G1ClearCardTableTask7do_workEj.start
  [ 2] G1BatchedGangTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 5] .annobin__ZN6Thread8call_runEv.start
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 1903600 ns (0.01%), 19 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1804000 ns (0.01%), 18 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1730220 ns (0.01%), 15 samples
  [ 0] clock_gettime@GLIBC_2.2.5
  [ 1] WatcherThread::sleep() const
  [ 2] WatcherThread::run()
  [ 3] .annobin__ZN6Thread8call_runEv.start
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 1700220 ns (0.01%), 17 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1499890 ns (0.01%), 15 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1306610 ns (0.01%), 13 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 1305060 ns (0.01%), 13 samples
  [ 0] __memset_avx2_unaligned_erms
  [ 1] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 2] MemAllocator::allocate() const
  [ 3] InstanceKlass::allocate_instance(JavaThread*)
  [ 4] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1260780 ns (0.01%), 12 samples
  [ 0] exit_to_user_mode_loop_[k]
  [ 1] exit_to_user_mode_prepare_[k]
  [ 2] irqentry_exit_to_user_mode_[k]
  [ 3] asm_sysvec_call_function_single_[k]
  [ 4] Bounce$Ball.bounce
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1198810 ns (0.01%), 12 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1190300 ns (0.01%), 11 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] __wake_up_common_lock_[k]
  [ 2] pipe_write_[k]
  [ 3] new_sync_write_[k]
  [ 4] vfs_write_[k]
  [ 5] ksys_write_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] __GI___libc_write
  [ 9] writeBytes
  [10] Java_java_io_FileOutputStream_writeBytes
  [11] java.io.FileOutputStream.writeBytes
  [12] java.io.FileOutputStream.write
  [13] java.io.BufferedOutputStream.flushBuffer
  [14] java.io.BufferedOutputStream.flush
  [15] java.io.PrintStream.write
  [16] sun.nio.cs.StreamEncoder.writeBytes
  [17] sun.nio.cs.StreamEncoder.implFlushBuffer
  [18] sun.nio.cs.StreamEncoder.flushBuffer
  [19] java.io.OutputStreamWriter.flushBuffer
  [20] java.io.PrintStream.writeln
  [21] java.io.PrintStream.println
  [22] Run.printResult
  [23] Run.measure
  [24] Run.doRuns
  [25] Run.runBenchmark
  [26] Harness.main

--- 1103550 ns (0.00%), 11 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 1080470 ns (0.00%), 10 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] __memmove_avx_unaligned_erms
  [ 9] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [10] HandleArea::oops_do(OopClosure*)
  [11] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [12] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [13] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [14] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [15] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [16] G1EvacuateRegionsBaseTask::work(unsigned int)
  [17] GangWorker::loop()
  [18] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [19] .annobin__ZN6Thread8call_runEv.start
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 1025880 ns (0.00%), 9 samples
  [ 0] G1RemSet::prepare_region_for_scan(HeapRegion*)
  [ 1] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 2] G1PrepareEvacuationTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 5] .annobin__ZN6Thread8call_runEv.start
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 1012020 ns (0.00%), 10 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 993652 ns (0.00%), 10 samples
  [ 0] LinearScan::build_intervals()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] .annobin__ZN6Thread8call_runEv.start
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 899980 ns (0.00%), 9 samples
  [ 0] [no_Java_frame]

--- 898640 ns (0.00%), 8 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] SafepointSynchronize::do_cleanup_tasks()
  [11] SafepointSynchronize::begin()
  [12] VMThread::inner_execute(VM_Operation*)
  [13] VMThread::run()
  [14] .annobin__ZN6Thread8call_runEv.start
  [15] thread_native_entry(Thread*)
  [16] start_thread

--- 890620 ns (0.00%), 9 samples
  [ 0] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] .annobin__ZN14PhaseIdealLoop8optimizeER12PhaseIterGVN12LoopOptsMode.start
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] .annobin__ZN6Thread8call_runEv.start
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 868850 ns (0.00%), 8 samples
  [ 0] malloc

--- 862970 ns (0.00%), 8 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1CollectedHeap::post_evacuate_cleanup_2(PreservedMarksSet*, G1RedirtyCardsQueueSet*, G1EvacuationInfo*, unsigned long const*)
  [11] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1CollectForAllocation::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] .annobin__ZN6Thread8call_runEv.start
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 803600 ns (0.00%), 7 samples
  [ 0] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 1] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 800710 ns (0.00%), 8 samples
  [ 0] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 1] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 2] Bounce.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 799890 ns (0.00%), 8 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 794120 ns (0.00%), 8 samples
  [ 0] LinearScan::allocate_registers()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] .annobin__ZN6Thread8call_runEv.start
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 788000 ns (0.00%), 8 samples
  [ 0] LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] .annobin__ZN6Thread8call_runEv.start
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 781920 ns (0.00%), 7 samples
  [ 0] __vfprintf_internal
  [ 1] [unknown]

--- 721220 ns (0.00%), 7 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 702700 ns (0.00%), 6 samples
  [ 0] WatcherThread::sleep() const
  [ 1] WatcherThread::run()
  [ 2] .annobin__ZN6Thread8call_runEv.start
  [ 3] thread_native_entry(Thread*)
  [ 4] start_thread

--- 701761 ns (0.00%), 7 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 696340 ns (0.00%), 7 samples
  [ 0] .annobin__ZN21OopOopIterateDispatchI17G1ScanCardClosureE5Table15oop_oop_iterateI19InstanceMirrorKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
  [ 1] G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
  [ 2] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 674140 ns (0.00%), 6 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@GLIBC_2.2.5
  [ 9] GangWorker::loop()
  [10] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [11] .annobin__ZN6Thread8call_runEv.start
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 666410 ns (0.00%), 6 samples
  [ 0] [vdso]
  [ 1] WatcherThread::sleep() const
  [ 2] WatcherThread::run()
  [ 3] .annobin__ZN6Thread8call_runEv.start
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 664600 ns (0.00%), 6 samples
  [ 0] G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
  [ 1] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 2] G1PrepareEvacuationTask::work(unsigned int)
  [ 3] GangWorker::loop()
  [ 4] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 5] .annobin__ZN6Thread8call_runEv.start
  [ 6] thread_native_entry(Thread*)
  [ 7] start_thread

--- 639800 ns (0.00%), 6 samples
  [ 0] G1RebuildFreeListTask::work(unsigned int)
  [ 1] GangWorker::loop()
  [ 2] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 3] .annobin__ZN6Thread8call_runEv.start
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 629710 ns (0.00%), 5 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] ___pthread_cond_broadcast

          ns  percent  samples  top
  ----------  -------  -------  ---
 18426259954   82.93%   184121  Bounce$Ball.bounce
  2148818933    9.67%    21473  Bounce.benchmark
   694077450    3.12%     6933  Bounce$Ball.<init>
   304793842    1.37%     3044  java.util.Arrays.setAll
   291318710    1.31%     2910  som.Random.next
    67151160    0.30%      671  Bounce.lambda$benchmark$0
    15944596    0.07%      154  clear_page_rep_[k]
    13112193    0.06%      131  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
     9277200    0.04%       85  _raw_spin_unlock_irqrestore_[k]
     7030060    0.03%       71  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     4598070    0.02%       45  __memset_avx2_unaligned_erms
     4501320    0.02%       45  SpinPause
     4386532    0.02%       39  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
     3723200    0.02%       37  Benchmark.innerBenchmarkLoop
     3664580    0.02%       35  exit_to_user_mode_loop_[k]
     2861853    0.01%       26  [vdso]
     2574800    0.01%       26  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
     2392740    0.01%       23  __tls_get_addr
     2304951    0.01%       23  Interpreter
     2040850    0.01%       18  clock_gettime@GLIBC_2.2.5
     1805461    0.01%       18  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     1505160    0.01%       15  __memset_avx2_unaligned
     1468070    0.01%       13  rmqueue_[k]
     1399721    0.01%       14  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     1375350    0.01%       13  malloc
     1296510    0.01%       13  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
     1130270    0.01%       11  G1FromCardCache::clear(unsigned int)
     1108140    0.00%       11  void G1ScanCardClosure::do_oop_work<narrowOop>(narrowOop*)
     1047261    0.00%       10  syscall_enter_from_user_mode_[k]
     1025880    0.00%        9  G1RemSet::prepare_region_for_scan(HeapRegion*)
     1001861    0.00%       10  MemAllocator::allocate() const
      999300    0.00%       10  PhaseIterGVN::transform_old(Node*)
      993652    0.00%       10  LinearScan::build_intervals()
      989820    0.00%       10  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
      903001    0.00%        9  pthread_mutex_lock@@GLIBC_2.2.5
      899980    0.00%        9  [no_Java_frame]
      879960    0.00%        8  futex_hash_[k]
      877310    0.00%        8  HeapRegionClaimer::claim_region(unsigned int)
      864441    0.00%        8  do_user_addr_fault_[k]
      807960    0.00%        8  HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
      804220    0.00%        8  vmSymbols::find_sid(Symbol const*)
      803600    0.00%        7  Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
      798690    0.00%        7  _int_malloc
      794120    0.00%        8  LinearScan::allocate_registers()
      788000    0.00%        8  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
      781920    0.00%        7  __vfprintf_internal
      712640    0.00%        7  Dict::Insert(void*, void*, bool)
      702800    0.00%        7  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
      702700    0.00%        6  WatcherThread::sleep() const
      701320    0.00%        7  I2C/C2I adapters(0xb)
      700031    0.00%        7  LIR_OpVisitState::visit(LIR_Op*)
      696340    0.00%        7  .annobin__ZN21OopOopIterateDispatchI17G1ScanCardClosureE5Table15oop_oop_iterateI19InstanceMirrorKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      664600    0.00%        6  G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
      663780    0.00%        6  __lll_lock_wake
      660690    0.00%        6  __futex_abstimed_wait_common
      643591    0.00%        6  futex_wake_[k]
      639800    0.00%        6  G1RebuildFreeListTask::work(unsigned int)
      634240    0.00%        6  __GI___pthread_mutex_unlock_usercnt
      611842    0.00%        6  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
      604150    0.00%        6  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
      603431    0.00%        6  G1CollectionSet::add_eden_region(HeapRegion*)
      602401    0.00%        6  PhaseIterGVN::subsume_node(Node*, Node*)
      601700    0.00%        6  jdk.internal.org.objectweb.asm.Type.getArgumentsAndReturnSizes
      601090    0.00%        6  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
      600400    0.00%        6  DebugInformationRecorder::find_sharable_decode_offset(int)
      594270    0.00%        6  PhaseIdealLoop::build_loop_tree_impl(Node*, int)
      593290    0.00%        6  __GI___pthread_mutex_trylock
      561110    0.00%        5  futex_wake_mark_[k]
      531890    0.00%        5  native_queued_spin_lock_slowpath_[k]
      524160    0.00%        5  JNIHandleBlock::oops_do(OopClosure*)
      521260    0.00%        5  ciObjectFactory::ciObjectFactory(Arena*, int)
      508990    0.00%        5  java.lang.String.getChars
      508611    0.00%        5  CodeCache::find_blob(void*)
      505700    0.00%        5  jdk.internal.org.objectweb.asm.Frame.execute
      504060    0.00%        5  SymbolTable::lookup_shared(char const*, int, unsigned int)
      502230    0.00%        5  G1Allocator::unsafe_max_tlab_alloc()
      501770    0.00%        5  Node::is_CFG() const
      501280    0.00%        5  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
      499930    0.00%        5  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
      499500    0.00%        5  Node::clone() const
      499350    0.00%        5  IndexSetIterator::advance_and_next()
      498090    0.00%        5  PhaseCCP::analyze()
      491860    0.00%        5  nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool)
      491050    0.00%        5  __memmove_avx_unaligned_erms
      455360    0.00%        4  finish_task_switch.isra.0_[k]
      454310    0.00%        4  __schedule_[k]
      450770    0.00%        4  __audit_syscall_entry_[k]
      450430    0.00%        4  os::free(void*)
      449560    0.00%        4  GCIdMark::GCIdMark(unsigned int)
      437480    0.00%        4  .annobin__ZN32G1ScanCollectionSetRegionClosure14do_heap_regionEP10HeapRegion.start
      433630    0.00%        4  futex_q_lock_[k]
      432990    0.00%        4  VMError::is_error_reported()
      425530    0.00%        4  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
      422250    0.00%        4  Method::invocation_count() const
      413890    0.00%        4  Matcher::init_first_stack_mask()
      408280    0.00%        4  G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
      406110    0.00%        4  NodeHash::hash_find_insert(Node*)
      404861    0.00%        4  ciObjectFactory::get_metadata(Metadata*)
      404260    0.00%        4  GraphBuilder::iterate_bytecodes_for_block(int)
      403470    0.00%        4  ThreadLocalAllocBuffer::fill(HeapWordImpl**, HeapWordImpl**, unsigned long)
      402991    0.00%        4  non-virtual thunk to LIRGenerator::block_do(BlockBegin*)
      402940    0.00%        4  java.lang.invoke.MethodType.equals
      402840    0.00%        4  MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
      402560    0.00%        4  ciMethodBlocks::do_analysis()
      401910    0.00%        4  Matcher::find_shared(Node*)
      401590    0.00%        4  OptoRuntime::new_instance_C(Klass*, JavaThread*)
      401530    0.00%        4  SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
      401420    0.00%        4  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      401360    0.00%        4  PhaseChaitin::post_allocate_copy_removal()
      401180    0.00%        4  CompilationPolicy::select_task(CompileQueue*)
      400910    0.00%        4  ValueMap::find_insert(Instruction*)
      400720    0.00%        4  Dictionary::find(unsigned int, Symbol*, Handle)
      400520    0.00%        4  __memcpy_avx_unaligned
      400270    0.00%        4  G1RemSet::merge_heap_roots(bool)
      400151    0.00%        4  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List*, Node_List*, bool)
      400050    0.00%        4  jdk.internal.org.objectweb.asm.SymbolTable.addConstantMemberReference
      399230    0.00%        4  PhaseIdealLoop::Dominators()
      398750    0.00%        4  PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0]
      398540    0.00%        4  LinearScanWalker::alloc_free_reg(Interval*)
      398250    0.00%        4  java.lang.AbstractStringBuilder.append
      395940    0.00%        4  .annobin__ZNK4Node6pinnedEv.start
      394380    0.00%        4  Type::hashcons()
      386320    0.00%        4  Compile::disconnect_useless_nodes(Unique_Node_List&, Unique_Node_List*)
      334960    0.00%        3  .annobin__ZN20G1MergeHeapRootsTask4workEj.start
      334921    0.00%        3  G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)
      332710    0.00%        2  do_syscall_64_[k]
      330780    0.00%        3  futex_wait_[k]
      326690    0.00%        3  G1BlockOffsetTablePart::zero_bottom_entry_raw()
      325260    0.00%        3  CompositeElapsedCounterSource::seconds(PairRep<long, long>)
      325140    0.00%        3  __list_del_entry_valid_[k]
      320090    0.00%        3  G1CodeRootSet::clear()
      319890    0.00%        3  CollectedHeap::tlab_alloc_reserve() const
      318620    0.00%        3  os::javaTimeNanos()
      317410    0.00%        3  FreeCSetClosure::do_heap_region(HeapRegion*)
      317140    0.00%        3  G1ServiceThread::sleep_before_next_cycle() [clone .part.0]
      315840    0.00%        3  .annobin__ZN13WeakProcessor4Task4workI19G1STWIsAliveClosure18G1KeepAliveClosureEEvjPT_PT0_.start
      312050    0.00%        3  CodeHeap::find_blob_unsafe(void*) const
      310580    0.00%        3  ConstantPool::impl_signature_ref_at(int, bool)
      308500    0.00%        3  .annobin__ZNK11TypeInstPtr2eqEPK4Type.start
      308351    0.00%        3  HandleMark::initialize(Thread*)
      307850    0.00%        3  do_futex_[k]
      305100    0.00%        3  java.nio.charset.CharsetEncoder.encode
      304991    0.00%        3  java.io.BufferedWriter.write
      304530    0.00%        3  LIR_Assembler::process_debug_info(LIR_Op*)
      304230    0.00%        3  java.lang.Integer.valueOf
      304050    0.00%        3  G1BarrierSet::enqueue(oopDesc*)
      303230    0.00%        3  sun.nio.cs.StreamEncoder.implWrite
      303140    0.00%        3  OtherRegionsTable::occupied() const
      303080    0.00%        3  PhaseOutput::BuildOopMaps()
      303070    0.00%        3  BlockListBuilder::make_block_at(int, BlockBegin*)
      302890    0.00%        3  java.lang.invoke.LambdaForm$MH.0x0000000801008800.invoke
      302810    0.00%        3  OopMapSet::update_register_map(frame const*, RegisterMap*)
      302790    0.00%        3  java.lang.invoke.DirectMethodHandle.make
      302701    0.00%        3  ObjAllocator::initialize(HeapWordImpl**) const
      302650    0.00%        3  G1ParCopyClosure<(G1Barrier)1, false>::do_oop(oopDesc**)
      302560    0.00%        3  Rewriter::compute_index_maps()
      302520    0.00%        3  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
      302330    0.00%        3  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
      302320    0.00%        3  BlockListBuilder::set_leaders()
      302181    0.00%        3  InstanceKlass::allocate_objArray(int, int, JavaThread*)
      301970    0.00%        3  G1Policy::preventive_collection_required(unsigned int)
      301850    0.00%        3  Mutex::unlock()
      301530    0.00%        3  Assembler::locate_operand(unsigned char*, Assembler::WhichOperand)
      301520    0.00%        3  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
      301471    0.00%        3  Method::is_not_compilable(int) const
      301470    0.00%        3  __memcmp_avx2_movbe
      301430    0.00%        3  G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const
      301280    0.00%        3  __mod_lruvec_page_state_[k]
      301270    0.00%        3  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
      301260    0.00%        3  Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
      301230    0.00%        3  _IO_default_xsputn
      301161    0.00%        3  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
      301100    0.00%        3  Bounce.verifyResult
      300920    0.00%        3  Type::cmp(Type const*, Type const*)
      300910    0.00%        3  I2C/C2I adapters(0xba)
      300870    0.00%        3  IdealLoopTree::est_loop_flow_merge_sz() const
      300830    0.00%        3  Relocation::pd_call_destination(unsigned char*)
      300700    0.00%        3  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)
      300291    0.00%        3  IntervalWalker::walk_to(int)
      300250    0.00%        3  I2C/C2I adapters(0xbb)
      300200    0.00%        3  HeapRegionRemSet::clear_fcc()
      300100    0.00%        3  java.lang.invoke.MemberName.getInvocationType
      300040    0.00%        3  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      300030    0.00%        3  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
      299930    0.00%        3  java.lang.StringLatin1.indexOfChar
      299530    0.00%        3  PhaseLive::compute(unsigned int)
      299220    0.00%        3  .annobin__ZN13ValueRecorderIP8MetadataE16maybe_find_indexES1_.start
      299031    0.00%        3  Node::out_grow(unsigned int)
      298880    0.00%        3  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      298850    0.00%        3  PhaseCFG::select(Block*, Node_List&, GrowableArray<int>&, VectorSet&, unsigned int, long*)
      298500    0.00%        3  Dependencies::initialize(ciEnv*)
      298250    0.00%        3  Matcher::xform(Node*, int)
      298140    0.00%        3  LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&)
      298050    0.00%        3  .annobin__ZN9ChunkPool8allocateEmN17AllocFailStrategy13AllocFailEnumE.start
      297970    0.00%        3  msort_with_tmp.part.0
      297900    0.00%        3  jdk.internal.org.objectweb.asm.Type.getArgumentTypes
      297020    0.00%        3  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
      295540    0.00%        3  ciMethodData::load_data()
      295290    0.00%        3  _dl_update_slotinfo
      294010    0.00%        3  ValueStack::values_do(ValueVisitor*)
