--- Execution profile ---
Total samples       : 328834
unknown_Java        : 4655 (1.42%)
not_walkable_Java   : 46 (0.01%)

--- 463826223 ns (1.41%), 4634 samples
  [ 0] List.tail
  [ 1] [unknown_Java]

--- 96484036 ns (0.29%), 964 samples
  [ 0] List.makeList
  [ 1] List.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 62136502 ns (0.19%), 621 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 58959986 ns (0.18%), 589 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 57539997 ns (0.17%), 575 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 55826867 ns (0.17%), 558 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 53448048 ns (0.16%), 534 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 52971752 ns (0.16%), 529 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 52834636 ns (0.16%), 528 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 51352941 ns (0.16%), 513 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 50113935 ns (0.15%), 501 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48949438 ns (0.15%), 489 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48935054 ns (0.15%), 489 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 48642962 ns (0.15%), 486 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48132544 ns (0.15%), 481 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48017707 ns (0.15%), 480 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 46736757 ns (0.14%), 467 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 46445425 ns (0.14%), 464 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 45741033 ns (0.14%), 457 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 45425445 ns (0.14%), 454 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 44614653 ns (0.14%), 446 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 44437176 ns (0.14%), 444 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 44352982 ns (0.13%), 443 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 44322298 ns (0.13%), 443 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 44139202 ns (0.13%), 441 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43336643 ns (0.13%), 433 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43145162 ns (0.13%), 431 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 43037743 ns (0.13%), 430 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43027388 ns (0.13%), 430 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43022908 ns (0.13%), 430 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 42821217 ns (0.13%), 428 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 42711814 ns (0.13%), 427 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 42104839 ns (0.13%), 421 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 42047603 ns (0.13%), 420 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41921009 ns (0.13%), 419 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 41824810 ns (0.13%), 418 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41548489 ns (0.13%), 415 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 41343966 ns (0.13%), 413 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 41245538 ns (0.13%), 412 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41244158 ns (0.13%), 412 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 41209862 ns (0.13%), 412 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 41124506 ns (0.12%), 411 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 40943366 ns (0.12%), 409 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 40941037 ns (0.12%), 409 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 40924480 ns (0.12%), 409 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 40740287 ns (0.12%), 407 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40537407 ns (0.12%), 405 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 40516492 ns (0.12%), 405 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 40314372 ns (0.12%), 403 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 40207637 ns (0.12%), 402 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 40132649 ns (0.12%), 401 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39228914 ns (0.12%), 392 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39217060 ns (0.12%), 392 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39041971 ns (0.12%), 390 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39038319 ns (0.12%), 390 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 39028582 ns (0.12%), 390 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 38639143 ns (0.12%), 386 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38635637 ns (0.12%), 387 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38327950 ns (0.12%), 383 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38226435 ns (0.12%), 382 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 38221272 ns (0.12%), 382 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38149331 ns (0.12%), 381 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38131542 ns (0.12%), 381 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 37906762 ns (0.12%), 379 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 37847158 ns (0.11%), 378 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 37825423 ns (0.11%), 378 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 37543078 ns (0.11%), 375 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 37435456 ns (0.11%), 374 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 37433445 ns (0.11%), 374 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 37416931 ns (0.11%), 374 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.makeList
  [ 4] List.makeList

--- 37133022 ns (0.11%), 371 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 37026622 ns (0.11%), 370 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 36737790 ns (0.11%), 367 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 36628910 ns (0.11%), 366 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 36321581 ns (0.11%), 363 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 36036362 ns (0.11%), 360 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 35926680 ns (0.11%), 359 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35912856 ns (0.11%), 359 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35730880 ns (0.11%), 357 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 35729838 ns (0.11%), 357 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 35630376 ns (0.11%), 356 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 35418700 ns (0.11%), 354 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35313661 ns (0.11%), 353 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35226912 ns (0.11%), 352 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35146956 ns (0.11%), 351 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 35129202 ns (0.11%), 351 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 35027567 ns (0.11%), 350 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 34934088 ns (0.11%), 349 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 34924397 ns (0.11%), 349 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 34920026 ns (0.11%), 349 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 34825020 ns (0.11%), 348 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 34817808 ns (0.11%), 348 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 34716498 ns (0.11%), 347 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 34613180 ns (0.11%), 346 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 34542868 ns (0.10%), 345 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 34518412 ns (0.10%), 345 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 34430889 ns (0.10%), 344 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 34428719 ns (0.10%), 344 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 34415658 ns (0.10%), 344 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 34318583 ns (0.10%), 343 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 27600365012   83.85%   275781  List.isShorterThan
  3148474565    9.57%    31459  List$Element.getNext
  1619031671    4.92%    16175  List.tail
   253218550    0.77%     2530  List.makeList
    48848928    0.15%      488  List$Element.<init>
    26299545    0.08%      263  List$Element.length
    16233915    0.05%      156  clear_page_rep_[k]
     7802671    0.02%       78  java.lang.Integer.valueOf
     5807922    0.02%       58  List$Element.setNext
     4812313    0.01%       48  Interpreter
     3838362    0.01%       38  Benchmark.innerBenchmarkLoop
     2778551    0.01%       25  _raw_spin_unlock_irqrestore_[k]
     2163650    0.01%       22  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     1698720    0.01%       17  IndexSetIterator::advance_and_next()
     1454750    0.00%       14  [no_Java_frame]
     1419650    0.00%       14  __tls_get_addr
     1372031    0.00%       14  __memset_avx2_unaligned_erms
     1300650    0.00%       13  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List*, Node_List*, bool)
     1295780    0.00%       13  SpinPause
     1281590    0.00%       11  rmqueue_[k]
     1203560    0.00%       12  List.verifyResult
     1112301    0.00%       10  Mutex::lock_without_safepoint_check()
     1110691    0.00%       11  Run.measure
     1101670    0.00%       11  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     1099610    0.00%       11  PhaseChaitin::Split(unsigned int, ResourceArea*)
     1098630    0.00%       11  LinearScan::build_intervals()
     1031380    0.00%       10  [vdso]
      944300    0.00%        9  futex_wake_[k]
      918960    0.00%        9  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
      909791    0.00%        8  .annobin__ZN15StatSamplerTask4taskEv.start
      901470    0.00%        9  DebugInformationRecorder::find_sharable_decode_offset(int)
      899560    0.00%        9  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
      804870    0.00%        8  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
      801400    0.00%        8  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
      787110    0.00%        1  JvmtiExport::post_vm_death()
      708090    0.00%        7  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
      707130    0.00%        7  SymbolTable::lookup_shared(char const*, int, unsigned int)
      706480    0.00%        7  __vfprintf_internal
      701100    0.00%        7  PhaseChaitin::gather_lrg_masks(bool)
      698140    0.00%        7  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
      696510    0.00%        7  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      687750    0.00%        6  __futex_abstimed_wait_common
      652430    0.00%        6  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
      612610    0.00%        6  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
      609380    0.00%        6  do_user_addr_fault_[k]
      609010    0.00%        6  ciObjectFactory::get_metadata(Metadata*)
      607600    0.00%        6  LinearScanWalker::alloc_free_reg(Interval*)
      603330    0.00%        6  PhaseChaitin::post_allocate_copy_removal()
      601710    0.00%        6  List.benchmark
      599691    0.00%        6  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
      597401    0.00%        6  Compile::disconnect_useless_nodes(Unique_Node_List&, Unique_Node_List*)
      597280    0.00%        6  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
      590101    0.00%        6  PhaseIdealLoop::Dominators()
      581560    0.00%        5  syscall_enter_from_user_mode_[k]
      522580    0.00%        5  pthread_mutex_lock@@GLIBC_2.2.5
      505480    0.00%        5  java.lang.Object.<init>
      505080    0.00%        5  vmSymbols::find_sid(Symbol const*)
      502300    0.00%        5  __GI___pthread_mutex_unlock_usercnt
      502140    0.00%        5  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
      500580    0.00%        5  I2C/C2I adapters(0xb)
      500090    0.00%        5  java.lang.invoke.MethodType.equals
      500060    0.00%        5  PhaseChaitin::merge_multidefs()
      499470    0.00%        5  NodeHash::hash_find_insert(Node*)
      498050    0.00%        5  LinearScan::allocate_registers()
      494430    0.00%        5  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
      491640    0.00%        5  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
      488540    0.00%        5  java.lang.invoke.MethodType.checkPtypes
      454040    0.00%        4  VMError::is_error_reported()
      450840    0.00%        4  PeriodicTask::real_time_tick(int)
      410941    0.00%        4  clock_gettime@GLIBC_2.2.5
      404970    0.00%        4  _invokeBasic
      402840    0.00%        4  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
      402190    0.00%        4  LIR_OpVisitState::visit(LIR_Op*)
      401240    0.00%        4  CompileBroker::invoke_compiler_on_method(CompileTask*)
      400751    0.00%        4  PhaseCCP::analyze()
      400190    0.00%        4  PhaseLive::compute(unsigned int)
      400060    0.00%        4  java.lang.invoke.MethodType.insertParameterTypes
      399930    0.00%        4  MemAllocator::allocate() const
      399900    0.00%        4  sun.invoke.util.VerifyAccess.isTypeVisible
      399510    0.00%        4  java.util.Arrays.equals
      399420    0.00%        4  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
      399310    0.00%        4  LinearScan::compute_local_live_sets()
      399001    0.00%        4  Node::remove_dead_region(PhaseGVN*, bool)
      398940    0.00%        4  Type::hashcons()
      398810    0.00%        4  java.lang.invoke.LambdaForm$MH.0x0000000801008400.invoke
      398440    0.00%        4  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      398050    0.00%        4  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
      397590    0.00%        4  RegionNode::is_CFG() const
      397220    0.00%        4  LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&)
      394120    0.00%        4  ValueMap::find_insert(Instruction*)
      392120    0.00%        4  java.lang.invoke.InvokerBytecodeGenerator.addMethod
      376550    0.00%        3  do_futex_[k]
      361640    0.00%        3  os::PlatformMonitor::wait(long)
      354121    0.00%        2  __strlen_avx2
      343780    0.00%        3  os::javaTimeNanos()
      328470    0.00%        3  os::elapsed_counter()
      322950    0.00%        3  pthread_cond_timedwait@@GLIBC_2.3.2
      320040    0.00%        3  exit_to_user_mode_loop_[k]
      312480    0.00%        3  _IO_default_xsputn
      309670    0.00%        3  __strchrnul_avx2
      307870    0.00%        3  mem_cgroup_from_task_[k]
      307080    0.00%        3  Parse::merge_common(Parse::Block*, int)
      305670    0.00%        3  TypeInstPtr::remove_speculative() const
      305590    0.00%        3  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
      304600    0.00%        3  RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*)
      304580    0.00%        3  .annobin__ZN17CompilationPolicy6commonI13LoopPredicateEE9CompLevelRK12methodHandleS2_b.start
      304220    0.00%        3  I2C/C2I adapters(0xba)
      303900    0.00%        3  NullCheckEliminator::iterate_one(BlockBegin*)
      303480    0.00%        3  java.io.PrintStream.println
      303400    0.00%        3  .annobin__ZN9ChunkPool8allocateEmN17AllocFailStrategy13AllocFailEnumE.start
      302870    0.00%        3  Dependencies::assert_evol_method(ciMethod*)
      302550    0.00%        3  java.lang.invoke.LambdaForm$Name.<init>
      302350    0.00%        3  java.lang.invoke.InvokerBytecodeGenerator.emitImplicitConversion
      302150    0.00%        3  Method::is_not_compilable(int) const
      302091    0.00%        3  jdk.internal.org.objectweb.asm.Type.getReturnTypeOffset
      301720    0.00%        3  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)
      301410    0.00%        3  os::free(void*)
      301120    0.00%        3  ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, JavaThread*)
      301060    0.00%        3  jdk.internal.org.objectweb.asm.Frame.execute
      301010    0.00%        3  __memchr_avx2
      300960    0.00%        3  PhaseOutput::BuildOopMaps()
      300530    0.00%        3  MachNode::rematerialize() const
      300490    0.00%        3  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
      300450    0.00%        3  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
      300420    0.00%        3  IndexSet::alloc_block_containing(unsigned int)
      300380    0.00%        3  LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag)
      300370    0.00%        3  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      300220    0.00%        3  PhiNode::Ideal(PhaseGVN*, bool)
      300200    0.00%        3  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
      300150    0.00%        3  java.util.zip.ZipUtils.SH
      300140    0.00%        3  update_get_addr
      300030    0.00%        3  .annobin__ZN22Node_Backward_Iterator4nextEv.start
      299930    0.00%        3  .annobin__ZN11Compilation9build_hirEv.part.0.start
      299650    0.00%        3  PhaseIterGVN::transform_old(Node*)
      299500    0.00%        3  PhaseIFG::re_insert(unsigned int)
      299460    0.00%        3  PhaseAggressiveCoalesce::insert_copies(Matcher&)
      299370    0.00%        3  Compile::identify_useful_nodes(Unique_Node_List&)
      299180    0.00%        3  Instruction::as_Constant()
      299170    0.00%        3  jdk.internal.org.objectweb.asm.Frame.pop
      299160    0.00%        3  I2C/C2I adapters(0xbb)
      298830    0.00%        3  LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*)
      298810    0.00%        3  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
      298800    0.00%        3  copy_page_[k]
      298740    0.00%        3  LinearScan::number_instructions()
      298690    0.00%        3  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
      298320    0.00%        3  Matcher::xform(Node*, int)
      298310    0.00%        3  Relocation::pd_call_destination(unsigned char*)
      297550    0.00%        3  ProjNode::pinned() const
      297510    0.00%        3  NullCheckEliminator::visit(Instruction**)
      297340    0.00%        3  LinearScanWalker::init_vars_for_alloc(Interval*)
      253890    0.00%        2  .annobin__ZN7Monitor4waitEl.start
      237410    0.00%        2  HeapRegionClaimer::claim_region(unsigned int)
      236770    0.00%        2  __x64_sys_futex_[k]
      236260    0.00%        2  ConstantPoolCacheEntry::set_direct_call(Bytecodes::Code, methodHandle const&, bool)
      235000    0.00%        2  Monitor::wait_without_safepoint_check(long)
      234940    0.00%        2  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(HeapRegion*)
      234110    0.00%        2  avc_lookup_[k]
      232730    0.00%        2  copy_user_generic_string_[k]
      222230    0.00%        2  __schedule_[k]
      220760    0.00%        2  java.nio.CharBuffer.position
      219540    0.00%        2  futex_setup_timer_[k]
      219070    0.00%        2  G1SurvRateGroup::record_surviving_words(int, unsigned long)
      218020    0.00%        2  .annobin__ZN15PerfLongVariant6sampleEv.start
      216590    0.00%        2  HandleMark::initialize(Thread*)
      215540    0.00%        2  G1FromCardCache::clear(unsigned int)
      214450    0.00%        2  find_vma_[k]
      211330    0.00%        2  .annobin__ZN20G1MergeHeapRootsTask4workEj.start
      209470    0.00%        2  MethodData::initialize_data(BytecodeStream*, int)
      208440    0.00%        2  smp_call_function_many_cond_[k]
      207890    0.00%        2  FreeCSetClosure::do_heap_region(HeapRegion*)
      207850    0.00%        2  PhaseCFG::schedule_pinned_nodes(VectorSet&)
      207600    0.00%        2  java.io.OutputStream.flush
      207510    0.00%        2  handle_pte_fault_[k]
      206850    0.00%        2  java.util.Arrays.copyOfRange
      206670    0.00%        2  folio_add_lru_[k]
      206380    0.00%        2  Node::is_CFG() const
      206370    0.00%        2  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<402470ul, G1BarrierSet>, (AccessInternal::BarrierType)5, 402470ul>::oop_access_barrier(oopDesc*, long, oopDesc*, oopDesc*)
      205890    0.00%        2  java.lang.AbstractStringBuilder.<init>
      205720    0.00%        2  ciEnv::get_method_by_index_impl(constantPoolHandle const&, int, Bytecodes::Code, ciInstanceKlass*)
      205410    0.00%        2  java.lang.invoke.MemberName.flagsMods
      205040    0.00%        2  java.lang.invoke.LambdaForm$MH.0x0000000801004800.invoke
      204790    0.00%        2  java.nio.HeapCharBuffer.<init>
      204460    0.00%        2  PackageEntryTable::lookup_only(Symbol*)
      204360    0.00%        2  java.util.Arrays.rangeCheck
      204190    0.00%        2  sun.nio.cs.StreamEncoder.implWrite
      204150    0.00%        2  __task_pid_nr_ns_[k]
      204150    0.00%        2  java.lang.String.getBytes
      204050    0.00%        2  java.lang.StringCoding.implEncodeAsciiArray
      204050    0.00%        2  CProjNode::is_block_proj() const
      203940    0.00%        2  ResolvedMethodTable::find_method(Method const*)
      203930    0.00%        2  .annobin__ZN21OopOopIterateDispatchI17G1ScanCardClosureE5Table15oop_oop_iterateI19InstanceMirrorKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      203850    0.00%        2  java.nio.charset.CharsetEncoder.encode
      203820    0.00%        2  java.nio.charset.CoderResult.isUnderflow
      203740    0.00%        2  java.lang.StringBuilder.append
      203610    0.00%        2  java.nio.CharBuffer.wrap
      203560    0.00%        2  java.lang.System$2.encodeASCII
      203530    0.00%        2  oopFactory::new_typeArray(BasicType, int, JavaThread*)
      203490    0.00%        2  Matcher::find_shared(Node*)
      203440    0.00%        2  Unique_Node_List::remove(Node*)
      203400    0.00%        2  sun.nio.cs.StreamEncoder.writeBytes
