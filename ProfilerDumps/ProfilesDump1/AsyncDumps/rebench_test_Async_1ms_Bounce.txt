--- Execution profile ---
Total samples       : 22155
not_walkable_Java   : 4 (0.02%)

--- 6250561497 ns (28.21%), 6250 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 3646375747 ns (16.46%), 3646 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2470240658 ns (11.15%), 2470 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1271152644 ns (5.74%), 1271 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1256167574 ns (5.67%), 1256 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1038093145 ns (4.68%), 1038 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 968112513 ns (4.37%), 968 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 720035171 ns (3.25%), 720 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 644078399 ns (2.91%), 644 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 520031061 ns (2.35%), 520 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 295016627 ns (1.33%), 295 samples
  [ 0] java.util.Arrays.setAll
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 276027162 ns (1.25%), 276 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 240028951 ns (1.08%), 240 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 199035730 ns (0.90%), 199 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 198032162 ns (0.89%), 198 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 183015318 ns (0.83%), 183 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 172036492 ns (0.78%), 172 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 136023689 ns (0.61%), 136 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 135014206 ns (0.61%), 135 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 130015475 ns (0.59%), 130 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 122018424 ns (0.55%), 122 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 106011403 ns (0.48%), 106 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 94020112 ns (0.42%), 94 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 88009559 ns (0.40%), 88 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 73995073 ns (0.33%), 74 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 71010099 ns (0.32%), 71 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 69009626 ns (0.31%), 69 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 59018540 ns (0.27%), 59 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 55005087 ns (0.25%), 55 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 53001443 ns (0.24%), 53 samples
  [ 0] Bounce.lambda$benchmark$0
  [ 1] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 2] java.util.Arrays.setAll
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 49006202 ns (0.22%), 49 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 46003744 ns (0.21%), 46 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 34009807 ns (0.15%), 34 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 27005597 ns (0.12%), 27 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 17003872 ns (0.08%), 17 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 17002953 ns (0.08%), 17 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 17001884 ns (0.08%), 17 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 15001315 ns (0.07%), 15 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 14002847 ns (0.06%), 14 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 13998311 ns (0.06%), 14 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 12004275 ns (0.05%), 12 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 9007673 ns (0.04%), 9 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 9001041 ns (0.04%), 9 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 8996114 ns (0.04%), 9 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 7023781 ns (0.03%), 7 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] ObjAllocator::initialize(HeapWordImpl**) const
  [ 9] MemAllocator::allocate() const
  [10] InstanceKlass::allocate_instance(JavaThread*)
  [11] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [12] Bounce.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 7017290 ns (0.03%), 7 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] Bounce.lambda$benchmark$0
  [ 9] Bounce$$Lambda$2.0x00000008010034f8.apply
  [10] java.util.Arrays.setAll
  [11] Bounce.benchmark
  [12] Benchmark.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 7004702 ns (0.03%), 7 samples
  [ 0] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 1] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 2] Bounce.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 7002230 ns (0.03%), 7 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 6999481 ns (0.03%), 7 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 5999850 ns (0.03%), 6 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 5997752 ns (0.03%), 6 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 5085941 ns (0.02%), 5 samples
  [ 0] SpinPause
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 4001510 ns (0.02%), 4 samples
  [ 0] Interpreter
  [ 1] [not_walkable_Java]

--- 3084250 ns (0.01%), 3 samples
  [ 0] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 1] G1PrepareEvacuationTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 4] .annobin__ZN6Thread8call_runEv.start
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 3081221 ns (0.01%), 3 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
  [ 9] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [10] JNIHandleBlock::oops_do(OopClosure*)
  [11] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [12] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [13] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [14] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [15] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [16] G1EvacuateRegionsBaseTask::work(unsigned int)
  [17] GangWorker::loop()
  [18] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [19] .annobin__ZN6Thread8call_runEv.start
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 3050251 ns (0.01%), 3 samples
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*, bool)
  [11] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [13] VM_G1CollectForAllocation::doit()
  [14] VM_Operation::evaluate()
  [15] VMThread::evaluate_operation(VM_Operation*)
  [16] VMThread::inner_execute(VM_Operation*)
  [17] VMThread::run()
  [18] .annobin__ZN6Thread8call_runEv.start
  [19] thread_native_entry(Thread*)
  [20] start_thread

--- 3014472 ns (0.01%), 3 samples
  [ 0] LinearScan::build_intervals()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] .annobin__ZN6Thread8call_runEv.start
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 3001641 ns (0.01%), 3 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 3000741 ns (0.01%), 3 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3000342 ns (0.01%), 3 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2999771 ns (0.01%), 3 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2999262 ns (0.01%), 3 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2073910 ns (0.01%), 2 samples
  [ 0] __futex_abstimed_wait_common

--- 2045201 ns (0.01%), 2 samples
  [ 0] __memset_avx2_unaligned_erms
  [ 1] G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*, bool)
  [ 2] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 3] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 4] VM_G1CollectForAllocation::doit()
  [ 5] VM_Operation::evaluate()
  [ 6] VMThread::evaluate_operation(VM_Operation*)
  [ 7] VMThread::inner_execute(VM_Operation*)
  [ 8] VMThread::run()
  [ 9] .annobin__ZN6Thread8call_runEv.start
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2043371 ns (0.01%), 2 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
  [ 9] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [10] OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, derived_pointer*, OopClosure*))
  [11] frame::oops_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) const
  [12] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [13] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [14] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [15] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [16] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [17] G1EvacuateRegionsBaseTask::work(unsigned int)
  [18] GangWorker::loop()
  [19] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [20] .annobin__ZN6Thread8call_runEv.start
  [21] thread_native_entry(Thread*)
  [22] start_thread

--- 2038732 ns (0.01%), 2 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] __memmove_avx_unaligned_erms
  [ 9] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [10] HandleArea::oops_do(OopClosure*)
  [11] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [12] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [13] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [14] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [15] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [16] G1EvacuateRegionsBaseTask::work(unsigned int)
  [17] GangWorker::loop()
  [18] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [19] .annobin__ZN6Thread8call_runEv.start
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 2026420 ns (0.01%), 2 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 2025250 ns (0.01%), 2 samples
  [ 0] HeapRegionClaimer::claim_region(unsigned int)
  [ 1] G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
  [ 2] G1PostEvacuateCollectionSetCleanupTask2::FreeCollectionSetTask::do_work(unsigned int)
  [ 3] G1BatchedGangTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] .annobin__ZN6Thread8call_runEv.start
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 2018061 ns (0.01%), 2 samples
  [ 0] _int_malloc

--- 2010100 ns (0.01%), 2 samples
  [ 0] __tls_get_addr
  [ 1] GangWorker::loop()
  [ 2] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 3] .annobin__ZN6Thread8call_runEv.start
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 2009301 ns (0.01%), 2 samples
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] ObjArrayAllocator::initialize(HeapWordImpl**) const
  [ 9] MemAllocator::allocate() const
  [10] InstanceKlass::allocate_objArray(int, int, JavaThread*)
  [11] OptoRuntime::new_array_C(Klass*, int, JavaThread*)
  [12] java.util.Arrays.setAll
  [13] Bounce.benchmark
  [14] Benchmark.innerBenchmarkLoop
  [15] Run.measure
  [16] Run.doRuns
  [17] Run.runBenchmark
  [18] Harness.main

--- 2003071 ns (0.01%), 2 samples
  [ 0] __memset_avx2_unaligned
  [ 1] MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
  [ 2] MemAllocator::allocate() const
  [ 3] InstanceKlass::allocate_instance(JavaThread*)
  [ 4] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 2003070 ns (0.01%), 2 samples
  [ 0] [no_Java_frame]

--- 2002131 ns (0.01%), 2 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 2001411 ns (0.01%), 2 samples
  [ 0] PhaseOutput::BuildOopMaps()
  [ 1] PhaseOutput::Output()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] .annobin__ZN6Thread8call_runEv.start
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2001190 ns (0.01%), 2 samples
  [ 0] MemAllocator::allocate() const
  [ 1] InstanceKlass::allocate_instance(JavaThread*)
  [ 2] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2001012 ns (0.01%), 2 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 2000381 ns (0.01%), 2 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 2000110 ns (0.01%), 2 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1999420 ns (0.01%), 2 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1999220 ns (0.01%), 2 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x00000008010034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1998681 ns (0.01%), 2 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1993691 ns (0.01%), 2 samples
  [ 0] Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
  [ 1] Compile::final_graph_reshaping() [clone .part.0]
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] .annobin__ZN6Thread8call_runEv.start
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 1097450 ns (0.00%), 1 sample
  [ 0] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 1] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 4] .annobin__ZN6Thread8call_runEv.start
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 1091270 ns (0.00%), 1 sample
  [ 0] __hrtimer_init_[k]
  [ 1] hrtimer_init_sleeper_[k]
  [ 2] futex_setup_timer_[k]
  [ 3] futex_wait_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] __futex_abstimed_wait_common

--- 1066620 ns (0.00%), 1 sample
  [ 0] TypeInstPtr::hash() const
  [ 1] Type::hashcons()
  [ 2] TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool)
  [ 3] .annobin__ZN9TypeTuple11make_domainEP15ciInstanceKlassP11ciSignature.start
  [ 4] TypeFunc::make(ciMethod*)
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] .annobin__ZN6Thread8call_runEv.start
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 1062151 ns (0.00%), 1 sample
  [ 0] __x64_sys_futex_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] __futex_abstimed_wait_common

--- 1060840 ns (0.00%), 1 sample
  [ 0] SuspendibleThreadSet::join()
  [ 1] G1ServiceThread::run_task(G1ServiceTask*)
  [ 2] G1ServiceThread::run_service()
  [ 3] .annobin__ZN18ConcurrentGCThread3runEv.start
  [ 4] .annobin__ZN6Thread8call_runEv.start
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 1052111 ns (0.00%), 1 sample
  [ 0] _int_malloc
  [ 1] [unknown]
  [ 2] [unknown]

--- 1041461 ns (0.00%), 1 sample
  [ 0] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [ 1] G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 2] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 1035340 ns (0.00%), 1 sample
  [ 0] G1CollectedHeap::reset_hot_card_cache()
  [ 1] GangWorker::loop()
  [ 2] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 3] .annobin__ZN6Thread8call_runEv.start
  [ 4] thread_native_entry(Thread*)
  [ 5] start_thread

--- 1034390 ns (0.00%), 1 sample
  [ 0] smp_call_function_many_cond_[k]
  [ 1] on_each_cpu_cond_mask_[k]
  [ 2] flush_tlb_mm_range_[k]
  [ 3] ptep_clear_flush_[k]
  [ 4] wp_page_copy_[k]
  [ 5] __handle_mm_fault_[k]
  [ 6] handle_mm_fault_[k]
  [ 7] do_user_addr_fault_[k]
  [ 8] exc_page_fault_[k]
  [ 9] asm_exc_page_fault_[k]
  [10] Method::link_method(methodHandle const&, JavaThread*)
  [11] InstanceKlass::link_methods(JavaThread*)
  [12] .annobin__ZN13InstanceKlass15link_class_implEP10JavaThread.start
  [13] InstanceKlass::initialize_impl(JavaThread*)
  [14] LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)
  [15] LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)
  [16] InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)
  [17] InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  [18] java.util.Locale.getDefaultExtensions
  [19] java.util.Locale.initDefault
  [20] java.util.Locale.<clinit>
  [21] java.lang.String.toLowerCase
  [22] sun.net.util.URLUtil.urlNoFragString
  [23] jdk.internal.loader.URLClassPath.getLoader
  [24] jdk.internal.loader.URLClassPath.getResource
  [25] jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull
  [26] jdk.internal.loader.BuiltinClassLoader.loadClassOrNull
  [27] jdk.internal.loader.BuiltinClassLoader.loadClass
  [28] jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass
  [29] java.lang.ClassLoader.loadClass
  [30] java.lang.Class.forName0
  [31] java.lang.Class.forName
  [32] sun.launcher.LauncherHelper.loadMainClass
  [33] sun.launcher.LauncherHelper.checkAndLoadMain

--- 1033750 ns (0.00%), 1 sample
  [ 0] G1CodeRootSet::contains(nmethod*)
  [ 1] nmethod::oops_do(OopClosure*, bool)
  [ 2] .annobin__ZN18G1NmethodProcessor21do_regular_processingEP7nmethod.start
  [ 3] nmethod::oops_do_process_weak(nmethod::OopsDoProcessor*)
  [ 4] G1CodeBlobClosure::do_code_blob(CodeBlob*)
  [ 5] G1CodeRootSet::nmethods_do(CodeBlobClosure*) const
  [ 6] .annobin__ZN32G1ScanCollectionSetRegionClosure14do_heap_regionEP10HeapRegion.start
  [ 7] G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0]
  [ 8] G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
  [ 9] G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)
  [10] G1EvacuateRegionsBaseTask::work(unsigned int)
  [11] GangWorker::loop()
  [12] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [13] .annobin__ZN6Thread8call_runEv.start
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 1033101 ns (0.00%), 1 sample
  [ 0] .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] .annobin__ZN14PhaseIdealLoop8optimizeER12PhaseIterGVN12LoopOptsMode.start
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] .annobin__ZN6Thread8call_runEv.start
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 1030930 ns (0.00%), 1 sample
  [ 0] .annobin__ZN21G1EvacuateRegionsTask10start_workEj.start
  [ 1] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 2] GangWorker::loop()
  [ 3] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 4] .annobin__ZN6Thread8call_runEv.start
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 1030320 ns (0.00%), 1 sample
  [ 0] _raw_spin_unlock_irqrestore_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] sem_post@GLIBC_2.2.5
  [ 9] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [10] G1CollectedHeap::post_evacuate_cleanup_2(PreservedMarksSet*, G1RedirtyCardsQueueSet*, G1EvacuationInfo*, unsigned long const*)
  [11] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [12] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [13] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [14] VM_G1CollectForAllocation::doit()
  [15] VM_Operation::evaluate()
  [16] VMThread::evaluate_operation(VM_Operation*)
  [17] VMThread::inner_execute(VM_Operation*)
  [18] VMThread::run()
  [19] .annobin__ZN6Thread8call_runEv.start
  [20] thread_native_entry(Thread*)
  [21] start_thread

--- 1029450 ns (0.00%), 1 sample
  [ 0] [vdso]
  [ 1] clock_gettime@GLIBC_2.2.5
  [ 2] os::elapsed_counter()
  [ 3] CompositeElapsedCounterSource::now()
  [ 4] G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker()
  [ 5] .annobin__ZN32G1ScanCollectionSetRegionClosure14do_heap_regionEP10HeapRegion.start
  [ 6] G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0]
  [ 7] G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const
  [ 8] G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases)
  [ 9] G1EvacuateRegionsBaseTask::work(unsigned int)
  [10] GangWorker::loop()
  [11] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [12] .annobin__ZN6Thread8call_runEv.start
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 1025151 ns (0.00%), 1 sample
  [ 0] clear_page_rep_[k]
  [ 1] clear_huge_page_[k]
  [ 2] __do_huge_pmd_anonymous_page_[k]
  [ 3] __handle_mm_fault_[k]
  [ 4] handle_mm_fault_[k]
  [ 5] do_user_addr_fault_[k]
  [ 6] exc_page_fault_[k]
  [ 7] asm_exc_page_fault_[k]
  [ 8] __memmove_avx_unaligned_erms
  [ 9] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [10] OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, derived_pointer*, OopClosure*))
  [11] frame::oops_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) const
  [12] JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0]
  [13] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [14] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [15] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [16] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [17] G1EvacuateRegionsBaseTask::work(unsigned int)
  [18] GangWorker::loop()
  [19] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [20] .annobin__ZN6Thread8call_runEv.start
  [21] thread_native_entry(Thread*)
  [22] start_thread

--- 1024770 ns (0.00%), 1 sample
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] .annobin__ZN6Thread8call_runEv.start
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 1024402 ns (0.00%), 1 sample
  [ 0] G1STWIsAliveClosure::do_object_b(oopDesc*)
  [ 1] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
  [ 2] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 3] G1ParEvacuateFollowersClosure::do_void()
  [ 4] G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int)
  [ 5] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 8] .annobin__ZN6Thread8call_runEv.start
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

          ns  percent  samples  top
  ----------  -------  -------  ---
 18161859944   81.96%    18160  Bounce$Ball.bounce
  2392199462   10.80%     2392  Bounce.benchmark
   680110024    3.07%      680  Bounce$Ball.<init>
   306051215    1.38%      306  som.Random.next
   296016768    1.34%      296  java.util.Arrays.setAll
    54000423    0.24%       54  Bounce.lambda$benchmark$0
    24238847    0.11%       24  clear_page_rep_[k]
     8004883    0.04%        8  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
     6088112    0.03%        6  _raw_spin_unlock_irqrestore_[k]
     5085941    0.02%        5  SpinPause
     5003724    0.02%        5  Benchmark.innerBenchmarkLoop
     4058790    0.02%        4  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     4014830    0.02%        4  __tls_get_addr
     4001510    0.02%        4  Interpreter
     3084250    0.01%        3  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
     3070172    0.01%        3  _int_malloc
     3045961    0.01%        3  __memset_avx2_unaligned_erms
     3014472    0.01%        3  LinearScan::build_intervals()
     3003971    0.01%        3  __memset_avx2_unaligned
     2073910    0.01%        2  __futex_abstimed_wait_common
     2037301    0.01%        2  smp_call_function_many_cond_[k]
     2034310    0.01%        2  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceRefKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
     2025250    0.01%        2  HeapRegionClaimer::claim_region(unsigned int)
     2011841    0.01%        2  LinearScan::allocate_registers()
     2008991    0.01%        2  Node::add_req(Node*)
     2006880    0.01%        2  InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
     2004952    0.01%        2  as_BasicType(ValueType*)
     2003070    0.01%        2  [no_Java_frame]
     2001411    0.01%        2  PhaseOutput::BuildOopMaps()
     2001190    0.01%        2  MemAllocator::allocate() const
     1999941    0.01%        2  java.lang.invoke.DirectMethodHandle.allocateInstance
     1998310    0.01%        2  PhaseIterGVN::add_users_to_worklist(Node*)
     1993691    0.01%        2  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
     1992570    0.01%        2  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     1097450    0.00%        1  G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
     1091270    0.00%        1  __hrtimer_init_[k]
     1066620    0.00%        1  TypeInstPtr::hash() const
     1062151    0.00%        1  __x64_sys_futex_[k]
     1060840    0.00%        1  SuspendibleThreadSet::join()
     1041461    0.00%        1  G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
     1035340    0.00%        1  G1CollectedHeap::reset_hot_card_cache()
     1033750    0.00%        1  G1CodeRootSet::contains(nmethod*)
     1033101    0.00%        1  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
     1030930    0.00%        1  .annobin__ZN21G1EvacuateRegionsTask10start_workEj.start
     1029450    0.00%        1  [vdso]
     1024402    0.00%        1  G1STWIsAliveClosure::do_object_b(oopDesc*)
     1022970    0.00%        1  _int_free
     1021500    0.00%        1  futex_hash_[k]
     1021041    0.00%        1  __lll_lock_wake
     1020001    0.00%        1  GCIdMark::GCIdMark(unsigned int)
     1019480    0.00%        1  rmqueue_[k]
     1016761    0.00%        1  ciObjectFactory::create_new_metadata(Metadata*)
     1016570    0.00%        1  G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*)
     1015850    0.00%        1  TruncatedSeq::add(double)
     1014680    0.00%        1  ciMethodData::offset_of_slot(ProfileData*, ByteSize)
     1014481    0.00%        1  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
     1013890    0.00%        1  clock_gettime@GLIBC_2.2.5
     1012661    0.00%        1  G1HeapTransition::print()
     1011810    0.00%        1  java.lang.invoke.MemberName.<init>
     1011800    0.00%        1  G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*)
     1010370    0.00%        1  memset_[k]
     1010320    0.00%        1  SignatureStream::find_symbol()
     1008951    0.00%        1  LRUMaxHeapPolicy::should_clear_reference(oopDesc*, long)
     1008560    0.00%        1  jdk.internal.org.objectweb.asm.Frame.execute
     1008330    0.00%        1  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
     1007941    0.00%        1  syscall
     1007930    0.00%        1  java.lang.invoke.LambdaForm$BasicType.basicTypeChar
     1007490    0.00%        1  CodeHeap::allocated_capacity() const
     1007490    0.00%        1  CmpINode::Ideal(PhaseGVN*, bool)
     1007480    0.00%        1  PhaseIdealLoop::build_loop_tree_impl(Node*, int)
     1007391    0.00%        1  IdealLoopTree::compute_profile_trip_cnt_helper(Node*)
     1006890    0.00%        1  Method::is_compiled_lambda_form() const
     1006520    0.00%        1  .annobin__ZN10ValueStackC2EP7IRScopePS_.start
     1006430    0.00%        1  ThreadLocalAllocBuffer::fill(HeapWordImpl**, HeapWordImpl**, unsigned long)
     1006180    0.00%        1  new_sync_write_[k]
     1006050    0.00%        1  jdk.internal.org.objectweb.asm.Frame.accept
     1006050    0.00%        1  G1BlockOffsetTablePart::zero_bottom_entry_raw()
     1005740    0.00%        1  ciBytecodeStream::get_declared_method_holder()
     1005701    0.00%        1  exit_to_user_mode_loop_[k]
     1005670    0.00%        1  java.lang.invoke.MethodHandles$Lookup$ClassOption.optionsToFlag
     1005641    0.00%        1  java.lang.invoke.MethodHandles$Lookup.getDirectFieldCommon
     1005570    0.00%        1  Relocation::pd_call_destination(unsigned char*)
     1005560    0.00%        1  OptoRuntime::new_array_C(Klass*, int, JavaThread*)
     1005340    0.00%        1  Dependencies::initialize(ciEnv*)
     1005271    0.00%        1  PhaseCFG::fixup_flow()
     1005251    0.00%        1  ciInstanceKlass::protection_domain()
     1005230    0.00%        1  LIR_Op1::emit_code(LIR_Assembler*)
     1005170    0.00%        1  java.nio.Buffer.<init>
     1005091    0.00%        1  Method::build_interpreter_method_data(methodHandle const&, JavaThread*)
     1005061    0.00%        1  ciMethodData::load_data()
     1004940    0.00%        1  PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*)
     1004901    0.00%        1  LIRGenerator::increment_event_counter(CodeEmitInfo*, LIR_OprDesc*, int, bool)
     1004870    0.00%        1  java.lang.invoke.MemberName.getMethodOrFieldType
     1004670    0.00%        1  java.lang.AbstractStringBuilder.newCapacity
     1004451    0.00%        1  CompileTask::free(CompileTask*)
     1004450    0.00%        1  ciEnv::is_in_vm()
     1004040    0.00%        1  LIR_OpVisitState::visit(LIR_Op*)
     1003940    0.00%        1  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
     1003830    0.00%        1  jdk.internal.org.objectweb.asm.SymbolTable.hash
     1003720    0.00%        1  do_user_addr_fault_[k]
     1003661    0.00%        1  ciBytecodeStream::has_appendix()
     1003450    0.00%        1  .annobin__ZN6Invoke9as_InvokeEv.start
     1003350    0.00%        1  Type::uhash(Type const*)
     1003210    0.00%        1  futex_wake_[k]
     1002850    0.00%        1  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
     1002770    0.00%        1  ciField::ciField(ciInstanceKlass*, int)
     1002670    0.00%        1  LoopNode::is_valid_counted_loop(BasicType) const [clone .part.0]
     1002640    0.00%        1  PhaseAggressiveCoalesce::insert_copies(Matcher&)
     1002420    0.00%        1  PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*)
     1002300    0.00%        1  java.io.FileOutputStream.writeBytes
     1002120    0.00%        1  LIRGenerator::invoke_visit_arguments(Invoke*)
     1002020    0.00%        1  java.lang.String.getChars
     1002001    0.00%        1  java.lang.String.checkBoundsOffCount
     1001860    0.00%        1  java.lang.invoke.MethodTypeForm.<init>
     1001820    0.00%        1  Matcher::init_first_stack_mask()
     1001650    0.00%        1  PhaseLive::compute(unsigned int)
     1001610    0.00%        1  java.lang.StringConcatHelper.newArrayWithSuffix
     1001581    0.00%        1  ciKlass::is_subtype_of(ciKlass*)
     1001570    0.00%        1  ObjArrayAllocator::initialize(HeapWordImpl**) const
     1001540    0.00%        1  sun.nio.cs.StreamEncoder.write
     1001441    0.00%        1  inflate_fast
     1001440    0.00%        1  ElfParser::loadSymbols(bool)
     1001341    0.00%        1  Node::hash() const
     1001320    0.00%        1  DebugInformationRecorder::find_sharable_decode_offset(int)
     1001290    0.00%        1  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1001270    0.00%        1  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
     1001261    0.00%        1  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
     1001231    0.00%        1  jdk.internal.org.objectweb.asm.Frame.getLocal
     1001180    0.00%        1  IdealLoopTree::is_member(IdealLoopTree const*) const
     1001160    0.00%        1  java.util.ImmutableCollections$MapN.probe
     1001091    0.00%        1  Matcher::xform(Node*, int)
     1000990    0.00%        1  G1Allocator::unsafe_max_tlab_alloc()
     1000980    0.00%        1  .annobin__ZN19CounterOverflowStub5visitEP16LIR_OpVisitState.start
     1000960    0.00%        1  void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<ObjArrayKlass, narrowOop>(G1ScanCardClosure*, oopDesc*, Klass*)
     1000931    0.00%        1  G1CollectedHeap::attempt_allocation_slow(unsigned long)
     1000890    0.00%        1  PhaseIFG::re_insert(unsigned int)
     1000820    0.00%        1  jdk.internal.org.objectweb.asm.ByteVector.put122
     1000800    0.00%        1  Run.measure
     1000790    0.00%        1  java.lang.invoke.MemberName.isPrivate
     1000790    0.00%        1  update_get_addr
     1000771    0.00%        1  PhaseIdealLoop::Dominators()
     1000740    0.00%        1  Compile::disconnect_useless_nodes(Unique_Node_List&, Unique_Node_List*)
     1000720    0.00%        1  java.lang.invoke.MethodHandles$Lookup.lookupClassOrNull
     1000710    0.00%        1  BlockBegin::iterate_preorder(BlockClosure*)
     1000670    0.00%        1  PhiNode::is_diamond_phi(bool) const
     1000651    0.00%        1  I2C/C2I adapters(0xbb)
     1000640    0.00%        1  java.nio.ByteBuffer.<init>
     1000621    0.00%        1  java.net.URL.isBuiltinStreamHandler
     1000580    0.00%        1  java.lang.invoke.LambdaForm.arguments
     1000480    0.00%        1  klassVtable::compute_vtable_size_and_num_mirandas(int*, int*, GrowableArray<Method*>*, Klass const*, Array<Method*>*, AccessFlags, unsigned short, Handle, Symbol*, Array<InstanceKlass*>*)
     1000460    0.00%        1  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     1000430    0.00%        1  .annobin__ZNK11G1CardTable11is_in_youngEP7oopDesc.start
     1000360    0.00%        1  java.lang.StringConcatHelper.stringOf
     1000300    0.00%        1  .annobin__ZNK14indOffset8Oper4baseEP13PhaseRegAllocPK4Nodei.start
     1000260    0.00%        1  java.lang.invoke.LambdaForm$NamedFunction.<init>
     1000180    0.00%        1  java.util.ArrayList.add
     1000161    0.00%        1  PhaseIterGVN::remove_globally_dead_node(Node*)
     1000060    0.00%        1  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1000060    0.00%        1  PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0]
     1000010    0.00%        1  java.net.URL.<init>
     1000000    0.00%        1  RelocIterator::reloc()
      999960    0.00%        1  PhaseChaitin::Split(unsigned int, ResourceArea*)
      999890    0.00%        1  java.lang.Class.isPrimitive
      999880    0.00%        1  .annobin__ZNK8MachNode9ideal_regEv.start
      999840    0.00%        1  java.lang.invoke.InvokerBytecodeGenerator.<init>
      999840    0.00%        1  .annobin__ZN13LIR_Assembler7move_opEP11LIR_OprDescS1_9BasicType13LIR_PatchCodeP12CodeEmitInfobbb.start
      999780    0.00%        1  ThreadLocalAllocBuffer::retire_before_allocation()
      999760    0.00%        1  JavaFrameAnchor::make_walkable()
      999750    0.00%        1  SafepointStateTracker::SafepointStateTracker(unsigned long, bool)
      999740    0.00%        1  jdk.internal.org.objectweb.asm.MethodWriter.putMethodInfo
      999730    0.00%        1  Type::hashcons()
      999680    0.00%        1  G1BarrierSet::enqueue(oopDesc*)
      999670    0.00%        1  PerfClassTraceTime::~PerfClassTraceTime()
      999620    0.00%        1  ObjAllocator::initialize(HeapWordImpl**) const
      999561    0.00%        1  java.lang.invoke.MethodHandles$Lookup$ClassFile.<init>
      999471    0.00%        1  stringStream::write(char const*, unsigned long)
      999330    0.00%        1  ConnectionGraph::get_addp_base(Node*)
      999160    0.00%        1  LinearScan::add_register_hints(LIR_Op*)
      999140    0.00%        1  jdk.internal.org.objectweb.asm.AnnotationVisitor.<init>
      998980    0.00%        1  LIR_Assembler::emit_op1(LIR_Op1*)
      998921    0.00%        1  MultiNode::is_CFG() const
      998730    0.00%        1  TypeInt::make(int, int, int)
      998430    0.00%        1  GraphBuilder::if_null(ValueType*, Instruction::Condition)
      998320    0.00%        1  StateSplit::state_values_do(ValueVisitor*)
      998180    0.00%        1  Dict::Insert(void*, void*, bool)
      998121    0.00%        1  PhaseIFG::remove_node(unsigned int)
      998061    0.00%        1  .annobin__ZN11LIR_Address10as_addressEv.start
      997980    0.00%        1  MemBarNode::hash() const
      997430    0.00%        1  .annobin__ZNK10MethodData13is_methodDataEv.start
      997380    0.00%        1  java.lang.invoke.BoundMethodHandle$Species_L.copyWithExtendL
      997180    0.00%        1  .annobin__ZNK8AddINode11bottom_typeEv.start
      996920    0.00%        1  ValueMap::kill_field(ciField*, bool)
      996761    0.00%        1  LoadNode::Ideal(PhaseGVN*, bool)
      996590    0.00%        1  _dl_update_slotinfo
      994961    0.00%        1  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
      993431    0.00%        1  charge_memcg_[k]
