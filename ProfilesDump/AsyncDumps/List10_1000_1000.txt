--- Execution profile ---
Total samples       : 3756387
unknown_Java        : 53981 (1.44%)
not_walkable_Java   : 1796 (0.05%)
deoptimization      : 12 (0.00%)

--- 532274879 ns (1.40%), 52755 samples
  [ 0] List.tail
  [ 1] [unknown_Java]

--- 189518398 ns (0.50%), 18758 samples
  [ 0] List.makeList
  [ 1] List.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 67548716 ns (0.18%), 6704 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 64611301 ns (0.17%), 6427 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 61283531 ns (0.16%), 6071 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 59604027 ns (0.16%), 5915 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 59492426 ns (0.16%), 5910 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 58974563 ns (0.16%), 5851 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 57993029 ns (0.15%), 5765 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 57733259 ns (0.15%), 5740 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 56420833 ns (0.15%), 5602 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 56375909 ns (0.15%), 5596 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 50903070 ns (0.13%), 5060 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 50794977 ns (0.13%), 5041 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 49766580 ns (0.13%), 4942 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 49572214 ns (0.13%), 4917 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48999857 ns (0.13%), 4863 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48712444 ns (0.13%), 4833 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 48331227 ns (0.13%), 4800 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48277374 ns (0.13%), 4793 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 48198808 ns (0.13%), 4779 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 48129444 ns (0.13%), 4775 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 48073087 ns (0.13%), 4776 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 47410412 ns (0.12%), 4704 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 46723249 ns (0.12%), 4628 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 46708728 ns (0.12%), 4632 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 46622795 ns (0.12%), 4627 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 46529115 ns (0.12%), 4618 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 46425001 ns (0.12%), 4608 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 46118844 ns (0.12%), 4573 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 46064550 ns (0.12%), 4568 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 45843582 ns (0.12%), 4549 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 45784883 ns (0.12%), 4545 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 45763017 ns (0.12%), 4538 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 45560751 ns (0.12%), 4479 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 45392377 ns (0.12%), 4504 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 45252958 ns (0.12%), 4495 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 44969415 ns (0.12%), 4463 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 44714802 ns (0.12%), 4439 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 44595821 ns (0.12%), 4424 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 44578533 ns (0.12%), 4423 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 44491605 ns (0.12%), 4419 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 44349956 ns (0.12%), 4407 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 44157113 ns (0.12%), 4388 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 43909783 ns (0.12%), 4359 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 43901318 ns (0.12%), 4361 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43895813 ns (0.12%), 4367 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 43672455 ns (0.12%), 4341 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43420681 ns (0.11%), 4314 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 43394218 ns (0.11%), 4303 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 43296473 ns (0.11%), 4287 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 43265219 ns (0.11%), 4293 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 43228123 ns (0.11%), 4295 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 43133580 ns (0.11%), 4278 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 42514116 ns (0.11%), 4219 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 42433294 ns (0.11%), 4214 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 42386676 ns (0.11%), 4205 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 42253278 ns (0.11%), 4189 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 42087164 ns (0.11%), 4180 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 41965540 ns (0.11%), 4162 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41891904 ns (0.11%), 4160 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41817392 ns (0.11%), 4153 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41627791 ns (0.11%), 4134 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41530999 ns (0.11%), 4123 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 41463089 ns (0.11%), 4110 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 41226097 ns (0.11%), 4093 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 41210634 ns (0.11%), 4089 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41119420 ns (0.11%), 4079 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 41043732 ns (0.11%), 4084 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 40630019 ns (0.11%), 4033 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40425561 ns (0.11%), 4015 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40363668 ns (0.11%), 4007 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40216605 ns (0.11%), 3997 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40113663 ns (0.11%), 3981 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 40060360 ns (0.11%), 3978 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39750327 ns (0.10%), 3947 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 39746263 ns (0.10%), 3943 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 39706451 ns (0.10%), 3940 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 39698478 ns (0.10%), 3939 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 39643414 ns (0.10%), 3933 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39524968 ns (0.10%), 3928 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 39352762 ns (0.10%), 3904 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 39349399 ns (0.10%), 3905 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 39247890 ns (0.10%), 3892 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39100694 ns (0.10%), 3880 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 39055195 ns (0.10%), 3876 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 39028303 ns (0.10%), 3872 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 39022599 ns (0.10%), 3877 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 38912778 ns (0.10%), 3856 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 38824124 ns (0.10%), 3851 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 38767680 ns (0.10%), 3849 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 38640716 ns (0.10%), 3837 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38639756 ns (0.10%), 3833 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38636796 ns (0.10%), 3835 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38489320 ns (0.10%), 3818 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 38476735 ns (0.10%), 3818 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 38408959 ns (0.10%), 3813 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38274395 ns (0.10%), 3804 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38213147 ns (0.10%), 3794 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 38208229 ns (0.10%), 3798 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 31138039450   82.09%  3090103  List.isShorterThan
  3616686956    9.53%   358840  List$Element.getNext
  1759952216    4.64%   174526  List.tail
   419387157    1.11%    41489  List.makeList
    99268890    0.26%     9823  List$Element.<init>
    47225049    0.12%     4667  List$Element.length
    36368811    0.10%     3603  List.verifyResult
    18117422    0.05%     1776  Interpreter
    17828766    0.05%     1694  Benchmark.innerBenchmarkLoop
    16053384    0.04%     1587  List$Element.setNext
    11745340    0.03%      665  generic_exec_single_[k]
    10724492    0.03%     1017  Run.measure
     9158442    0.02%      587  queue_work_on_[k]
     9027972    0.02%      575  _raw_spin_unlock_irqrestore_[k]
     8220162    0.02%      813  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop
     7541520    0.02%      745  List.benchmark
     7437461    0.02%      738  SpinPause
     6684633    0.02%      548  __tls_get_addr
     4728060    0.01%      188  __futex_abstimed_wait_common
     4581711    0.01%      328  [vdso]
     4562251    0.01%      426  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     4332882    0.01%      431  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
     4184931    0.01%      301  clock_gettime@GLIBC_2.2.5
     3954040    0.01%      369  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     3545300    0.01%      351  java.lang.StringConcatHelper.prepend
     3343391    0.01%      322  [no_Java_frame]
     3336500    0.01%      210  restore_fpregs_from_user_[k]
     3335650    0.01%      208  copy_user_generic_string_[k]
     3292420    0.01%      326  sun.nio.cs.StreamEncoder.implWrite
     3077070    0.01%      283  LinearScan::build_intervals()
     3040210    0.01%      297  I2C/C2I adapters(0xb)
     3030041    0.01%      206  syscall_enter_from_user_mode_[k]
     2881221    0.01%      276  sun.nio.cs.StreamEncoder.writeBytes
     2871852    0.01%      161  StatSamplerTask::task()
     2776970    0.01%      266  DebugInformationRecorder::find_sharable_decode_offset(int)
     2678331    0.01%      262  java.lang.Long.stringSize
     2659750    0.01%      253  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     2564711    0.01%      236  LIR_OpVisitState::visit(LIR_Op*)
     2564380    0.01%      253  IndexSetIterator::advance_and_next()
     2502371    0.01%      251  java.lang.invoke.LambdaForm$MH.0x0000000800c08400.invoke
     2425870    0.01%      125  WatcherThread::sleep() const
     2420851    0.01%      221  ciObjectFactory::get_metadata(Metadata*)
     2384260    0.01%      235  Run.printResult
     2382080    0.01%      238  _invokeBasic
     2372421    0.01%      231  java.io.FileOutputStream.write
     2362830    0.01%      236  PhaseChaitin::gather_lrg_masks(bool)
     2351860    0.01%      234  java.nio.charset.CharsetEncoder.encode
     2343280    0.01%      229  java.lang.Long.getChars
     2301080    0.01%      122  .annobin__ZN15PerfLongVariant6sampleEv.start
     2277151    0.01%      210  __memset_avx2_unaligned_erms
     2231033    0.01%      208  .annobin__ZN16LinearScanWalker14alloc_free_regEP8Interval.start
     2214530    0.01%      220  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
     2200730    0.01%      214  PhaseChaitin::Split(unsigned int, ResourceArea*)
     2177070    0.01%      204  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     2173060    0.01%      107  Monitor::wait_without_safepoint_check(long)
     2166890    0.01%      204  LinearScan::allocate_registers()
     2165150    0.01%      124  __GI___pthread_cond_timedwait
     2155602    0.01%      126  os::PlatformMonitor::wait(long)
     2151202    0.01%      208  java.io.PrintStream.write
     2113561    0.01%      187  vmSymbols::find_sid(Symbol const*)
     2029390    0.01%      200  java.io.PrintStream.writeln
     1967960    0.01%      119  os::elapsed_counter()
     1953621    0.01%      126  VMError::is_error_reported()
     1931650    0.01%      191  java.io.PrintStream.println
     1914531    0.01%      188  java.lang.StringConcatHelper.mix
     1871641    0.00%      187  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1859210    0.00%      178  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
     1853270    0.00%      126  file_tty_write.constprop.0_[k]
     1823264    0.00%      182  PhaseLive::compute(unsigned int)
     1790430    0.00%      178  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     1770500    0.00%      163  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1750070    0.00%      119  new_sync_write_[k]
     1719830    0.00%      170  sun.nio.cs.UTF_8$Encoder.encodeLoop
     1718830    0.00%      114  inode_security_[k]
     1694761    0.00%      155  GraphBuilder::iterate_bytecodes_for_block(int)
     1675640    0.00%      158  LinearScan::compute_local_live_sets()
     1665700    0.00%      158  Run.doRuns
     1650990    0.00%      164  PhaseChaitin::post_allocate_copy_removal()
     1650741    0.00%      153  java.io.FileOutputStream.writeBytes
     1639090    0.00%      162  java.lang.Integer.valueOf
     1625540    0.00%      161  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     1625411    0.00%       67  Mutex::lock_without_safepoint_check()
     1613410    0.00%      157  java.nio.Buffer.<init>
     1591180    0.00%      151  I2C/C2I adapters(0xbb)
     1588312    0.00%      157  java.lang.invoke.MethodHandle.invokeBasic
     1584660    0.00%      156  sun.nio.cs.StreamEncoder.write
     1564370    0.00%      156  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
     1558340    0.00%       88  futex_wake_[k]
     1523971    0.00%      122  PeriodicTask::real_time_tick(int)
     1515480    0.00%      148  java.lang.System$2.encodeASCII
     1504241    0.00%      144  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
     1493021    0.00%      132  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
     1482701    0.00%      146  java.lang.String.getChars
     1473750    0.00%       66  exit_to_user_mode_loop_[k]
     1442161    0.00%      130  LinearScanWalker::free_collect_inactive_fixed(Interval*)
     1440830    0.00%      139  java.nio.CharBuffer.limit
     1426260    0.00%      141  java.nio.CharBuffer.wrap
     1397070    0.00%      120  ValueStack::values_do(ValueVisitor*)
     1391470    0.00%       95  process_echoes_[k]
     1373900    0.00%      131  __memmove_avx_unaligned
     1370220    0.00%      115  clear_page_rep_[k]
     1358430    0.00%      136  sun.nio.cs.UTF_8.updatePositions
     1333730    0.00%      128  sun.nio.cs.StreamEncoder.flushBuffer
     1329992    0.00%       83  rmqueue_[k]
     1321500    0.00%       82  os::javaTimeNanos()
     1320381    0.00%      122  .annobin__ZN12methodHandleD2Ev.start
     1314880    0.00%      119  __vfprintf_internal
     1290100    0.00%      127  jdk.internal.misc.Unsafe.allocateUninitializedArray
     1280550    0.00%      127  java.lang.String.getBytes
     1277980    0.00%      108  ___pthread_mutex_lock
     1274570    0.00%      126  java.nio.CharBuffer.<init>
     1264590    0.00%      124  java.io.BufferedWriter.flushBuffer
     1239791    0.00%      121  jni_GetObjectField
     1235351    0.00%      122  java.lang.String.coder
     1226631    0.00%      119  java.lang.System.arraycopy
     1219080    0.00%      120  java.lang.StringConcatHelper.newArray
     1212770    0.00%      120  java.nio.ByteBuffer.position
     1207570    0.00%      120  java.io.BufferedOutputStream.write
     1207452    0.00%      119  I2C/C2I adapters(0xba)
     1205920    0.00%       56  __pthread_mutex_cond_lock
     1205430    0.00%       53  __GI___pthread_disable_asynccancel
     1197460    0.00%      114  Dictionary::find(unsigned int, Symbol*, Handle)
     1194310    0.00%      115  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
     1170850    0.00%      116  PhaseIdealLoop::Dominators()
     1163292    0.00%      113  jni_GetArrayLength
     1152850    0.00%      113  java.lang.String.length
     1135080    0.00%      112  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
     1128280    0.00%      110  __memmove_avx_unaligned_erms
     1115640    0.00%      110  jdk.internal.org.objectweb.asm.Frame.execute
     1114310    0.00%       89  do_user_addr_fault_[k]
     1113890    0.00%      111  jdk.internal.org.objectweb.asm.ByteVector.putUTF8
     1111950    0.00%      110  java.nio.HeapCharBuffer.<init>
     1107770    0.00%      101  CodeHeap::find_blob_unsafe(void*) const
     1076971    0.00%       96  NullCheckEliminator::iterate_one(BlockBegin*)
     1059450    0.00%      100  __GI___libc_malloc
     1055900    0.00%       82  __GI___pthread_mutex_unlock_usercnt
     1045030    0.00%       67  _raw_spin_unlock_irq_[k]
     1034530    0.00%      100  jni_GetByteArrayRegion
     1014940    0.00%       48  __condvar_dec_grefs
     1013261    0.00%       71  __fget_light_[k]
     1009610    0.00%       93  .annobin__ZN8Interval9add_rangeEii.start
      995120    0.00%       92  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      992000    0.00%      100  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      982270    0.00%       96  jdk.internal.misc.Unsafe.allocateUninitializedArray0
      979100    0.00%       63  __schedule_[k]
      978891    0.00%       96  Java_java_io_FileOutputStream_writeBytes
      977900    0.00%       97  NodeHash::hash_find_insert(Node*)
      976050    0.00%       99  Matcher::xform(Node*, int)
      944200    0.00%       94  java.lang.String.checkBoundsBeginEnd
      942400    0.00%       96  ___pthread_mutex_trylock
      929480    0.00%       90  java.lang.StringConcatHelper.stringOf
      928701    0.00%       93  java.lang.StringCoding.implEncodeAsciiArray
      925650    0.00%       91  Dict::Insert(void*, void*, bool)
      922042    0.00%       91  java.lang.invoke.LambdaForm$MH.0x0000000800c08800.linkToTargetMethod
      916350    0.00%       91  java.lang.StringConcatHelper.newString
      906701    0.00%       84  LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
      900300    0.00%       89  java.nio.ByteBuffer.arrayOffset
      899590    0.00%       62  n_tty_write_[k]
      894691    0.00%       56  __get_user_nocheck_8_[k]
      882340    0.00%       59  tty_paranoia_check_[k]
      875581    0.00%       87  java.io.BufferedWriter.write
      869330    0.00%       79  GlobalValueNumbering::GlobalValueNumbering(IR*)
      867540    0.00%       86  java.lang.String.<init>
      865200    0.00%       84  JNIHandleBlock::allocate_handle(oopDesc*, AllocFailStrategy::AllocFailEnum)
      862720    0.00%       85  java.nio.Buffer.limit
      859200    0.00%       85  java.lang.AbstractStringBuilder.append
      856480    0.00%       82  java_lang_ref_Reference::is_referent_field(oopDesc*, long)
      850521    0.00%       85  PhaseIdealLoop::build_loop_tree()
      846980    0.00%       83  java.nio.Buffer.position
      844200    0.00%       80  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
      837161    0.00%       81  java.lang.invoke.MethodType.equals
      832940    0.00%       82  java.nio.CharBuffer.array
      831120    0.00%       81  java.nio.CharBuffer.position
      821881    0.00%       66  os::free(void*)
      816190    0.00%       82  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      810720    0.00%       76  GraphBuilder::append_with_bci(Instruction*, int)
      810570    0.00%       81  PhaseIterGVN::add_users_to_worklist(Node*)
      806710    0.00%       76  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
      806670    0.00%       80  java.nio.ByteBuffer.flip
      806500    0.00%       80  java.nio.CharBuffer.arrayOffset
      806100    0.00%       74  ValueMap::find_insert(Instruction*)
      804730    0.00%       79  .annobin__ZN14AccessInternal19PostRuntimeDispatchIN12G1BarrierSet13AccessBarrierILm2646116ES1_EELNS_11BarrierTypeE0ELm2646116EE18oop_access_barrierEPvP7oopDesc.start
      803470    0.00%       81  PhaseIterGVN::transform_old(Node*)
      802890    0.00%       76  java.io.BufferedOutputStream.flush
      788490    0.00%       72  constantPoolHandle::~constantPoolHandle()
      786720    0.00%       77  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      782161    0.00%       80  _int_malloc
      778921    0.00%       57  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
      775920    0.00%       73  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
      770110    0.00%       39  __audit_syscall_entry_[k]
      763890    0.00%       76  jdk.internal.org.objectweb.asm.Frame.push
      763870    0.00%       75  java.util.Arrays.copyOf
      760200    0.00%       71  __GI___ioctl_time64
      758650    0.00%       44  __get_user_nocheck_4_[k]
      752920    0.00%       66  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      747771    0.00%       74  Type::cmp(Type const*, Type const*)
      745160    0.00%       75  java.lang.StringLatin1.inflate
      745160    0.00%       60  ___pthread_mutex_unlock
      741121    0.00%       70  java.io.BufferedOutputStream.flushBuffer
      737160    0.00%       72  JavaThread::check_and_handle_async_exceptions()
