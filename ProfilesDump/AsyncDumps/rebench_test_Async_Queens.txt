--- Execution profile ---
Total samples       : 1272567
unknown_Java        : 3665 (0.29%)
not_walkable_Java   : 694 (0.05%)
deoptimization      : 4 (0.00%)

--- 1374289239 ns (10.66%), 136225 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 715111032 ns (5.54%), 70783 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 549315734 ns (4.26%), 54413 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 534237933 ns (4.14%), 52966 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 520774475 ns (4.04%), 51650 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 362172584 ns (2.81%), 35869 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 341787776 ns (2.65%), 33861 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 336326717 ns (2.61%), 33328 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 333280772 ns (2.58%), 33004 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 305010242 ns (2.36%), 30227 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 299114542 ns (2.32%), 29671 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 297319504 ns (2.31%), 29459 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 258393016 ns (2.00%), 25611 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 241827954 ns (1.87%), 23978 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 241339011 ns (1.87%), 23921 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 225536711 ns (1.75%), 22304 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 197396336 ns (1.53%), 19548 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 195466417 ns (1.52%), 19384 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 183071106 ns (1.42%), 18119 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 171119862 ns (1.33%), 16962 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 163611373 ns (1.27%), 16250 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 151143973 ns (1.17%), 14951 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 148707413 ns (1.15%), 14754 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 143644770 ns (1.11%), 14261 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 139814801 ns (1.08%), 13816 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 138335164 ns (1.07%), 13727 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 126244494 ns (0.98%), 12517 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 124732766 ns (0.97%), 12379 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 123468193 ns (0.96%), 12231 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 120464632 ns (0.93%), 11945 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 113617384 ns (0.88%), 11287 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 109025205 ns (0.85%), 10825 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 106937269 ns (0.83%), 10621 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 106057975 ns (0.82%), 10528 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 101734393 ns (0.79%), 10067 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100299268 ns (0.78%), 9923 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100208861 ns (0.78%), 9915 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 90947409 ns (0.71%), 9033 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 84480004 ns (0.66%), 8390 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 77606189 ns (0.60%), 7703 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 76615020 ns (0.59%), 7611 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 70259683 ns (0.54%), 6974 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 69828813 ns (0.54%), 6929 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 63352116 ns (0.49%), 6275 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 62542104 ns (0.48%), 6190 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 61640225 ns (0.48%), 6101 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 57015144 ns (0.44%), 5655 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 56968448 ns (0.44%), 5634 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 55822545 ns (0.43%), 5532 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 54930628 ns (0.43%), 5431 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 54449254 ns (0.42%), 5405 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 53084983 ns (0.41%), 5270 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 51940543 ns (0.40%), 5079 samples
  [ 0] Queens.queens
  [ 1] Queens.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 51677368 ns (0.40%), 5111 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 49686711 ns (0.39%), 4897 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 47894314 ns (0.37%), 4756 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 47259554 ns (0.37%), 4688 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 40569514 ns (0.31%), 4024 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 40339104 ns (0.31%), 3988 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 39798447 ns (0.31%), 3952 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 39317279 ns (0.30%), 3902 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 38361631 ns (0.30%), 3809 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 37691398 ns (0.29%), 3742 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 34618350 ns (0.27%), 3433 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 34331051 ns (0.27%), 3404 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 33591157 ns (0.26%), 3337 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 33454052 ns (0.26%), 3317 samples
  [ 0] Queens.placeQueen
  [ 1] [unknown_Java]

--- 31209281 ns (0.24%), 3096 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 30773645 ns (0.24%), 3051 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 30552602 ns (0.24%), 3018 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 28848077 ns (0.22%), 2864 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 28224863 ns (0.22%), 2803 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 27850703 ns (0.22%), 2734 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 25392418 ns (0.20%), 2524 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 25185451 ns (0.20%), 2499 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.queens
  [ 4] Queens.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 22866339 ns (0.18%), 2254 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 20827307 ns (0.16%), 2066 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 20236804 ns (0.16%), 2011 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.queens
  [ 4] Queens.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 18646962 ns (0.14%), 1851 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 18337258 ns (0.14%), 1821 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 18007144 ns (0.14%), 1777 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 17837397 ns (0.14%), 1770 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.queens
  [ 4] Queens.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 17152380 ns (0.13%), 1692 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 16986527 ns (0.13%), 1678 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 16481715 ns (0.13%), 1634 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 16240027 ns (0.13%), 1560 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.placeQueen
  [ 9] Queens.queens
  [10] Queens.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16016663 ns (0.12%), 1592 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 15908861 ns (0.12%), 1580 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 15511614 ns (0.12%), 1539 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.queens
  [ 8] Queens.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 15230283 ns (0.12%), 1511 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 15040533 ns (0.12%), 1493 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.placeQueen
  [ 7] Queens.placeQueen
  [ 8] Queens.queens
  [ 9] Queens.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 14876720 ns (0.12%), 1453 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 14763943 ns (0.11%), 1465 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.queens
  [ 4] Queens.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 14402506 ns (0.11%), 1423 samples
  [ 0] java.util.Arrays.fill
  [ 1] Queens.queens
  [ 2] Queens.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 14239202 ns (0.11%), 1412 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.queens
  [ 6] Queens.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 14122875 ns (0.11%), 1392 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.queens
  [ 3] Queens.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 14075043 ns (0.11%), 1378 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 13925656 ns (0.11%), 1366 samples
  [ 0] Queens.placeQueen
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.placeQueen
  [ 5] Queens.placeQueen
  [ 6] Queens.queens
  [ 7] Queens.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 13729656 ns (0.11%), 1364 samples
  [ 0] Queens.setRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.placeQueen
  [ 4] Queens.queens
  [ 5] Queens.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 13400205 ns (0.10%), 1328 samples
  [ 0] Queens.getRowColumn
  [ 1] Queens.placeQueen
  [ 2] Queens.placeQueen
  [ 3] Queens.queens
  [ 4] Queens.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
  7363101862   57.09%   729675  Queens.getRowColumn
  3047241654   23.63%   302000  Queens.setRowColumn
  1817600006   14.09%   180138  Queens.placeQueen
   149792444    1.16%    14753  java.util.Arrays.fill
    87178744    0.68%     8541  Queens.queens
    12601367    0.10%     1206  Benchmark.innerBenchmarkLoop
     7284964    0.06%      718  Queens.benchmark
     7092851    0.05%      681  Interpreter
     4585143    0.04%      346  __tls_get_addr
     3222230    0.02%      283  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     2945441    0.02%      260  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     2751351    0.02%      229  [no_Java_frame]
     2618380    0.02%      221  LinearScan::build_intervals()
     2411820    0.02%      230  Queens.verifyResult
     2098492    0.02%      184  LinearScan::allocate_registers()
     1973560    0.02%      183  .annobin__ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack.start
     1916521    0.01%      165  LIR_OpVisitState::visit(LIR_Op*)
     1863511    0.01%      176  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1831852    0.01%      170  DebugInformationRecorder::find_sharable_decode_offset(int)
     1830330    0.01%      105  [vdso]
     1826061    0.01%      163  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1814750    0.01%       50  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
     1739121    0.01%      117  __memset_avx2_unaligned_erms
     1724450    0.01%      150  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     1702920    0.01%      154  PhaseChaitin::gather_lrg_masks(bool)
     1700600    0.01%      155  LinearScanWalker::alloc_free_reg(Interval*)
     1556340    0.01%      135  GraphBuilder::iterate_bytecodes_for_block(int)
     1516351    0.01%      140  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
     1467440    0.01%      129  LinearScan::compute_local_live_sets()
     1457450    0.01%      131  PhaseLive::compute(unsigned int)
     1450350    0.01%      141  IndexSetIterator::advance_and_next()
     1427400    0.01%      135  PhaseChaitin::Split(unsigned int, ResourceArea*)
     1402240    0.01%      136  I2C/C2I adapters(0xb)
     1373703    0.01%      120  ciObjectFactory::get_metadata(Metadata*)
     1368300    0.01%      128  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     1346472    0.01%      128  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
     1314910    0.01%      102  vmSymbols::find_sid(Symbol const*)
     1274130    0.01%       44  clock_gettime@GLIBC_2.2.5
     1234590    0.01%      105  PhaseIdealLoop::Dominators()
     1234480    0.01%      104  Dict::Insert(void*, void*, bool)
     1213331    0.01%      114  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     1192460    0.01%       95  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
     1185620    0.01%      107  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
     1118580    0.01%       98  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1089301    0.01%      101  PhaseChaitin::post_allocate_copy_removal()
     1083380    0.01%       73  __vfprintf_internal
     1056940    0.01%       94  methodHandle::~methodHandle()
     1045480    0.01%      103  jdk.internal.org.objectweb.asm.Frame.execute
     1016320    0.01%       98  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
     1009710    0.01%       89  Dictionary::find(unsigned int, Symbol*, Handle)
     1003050    0.01%       90  LinearScanWalker::free_collect_inactive_fixed(Interval*)
      999671    0.01%       90  Type::cmp(Type const*, Type const*)
      999470    0.01%       80  _dl_update_slotinfo
      958800    0.01%       87  ValueStack::values_do(ValueVisitor*)
      956070    0.01%       81  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
      924970    0.01%       90  jdk.internal.org.objectweb.asm.ByteVector.putUTF8
      923260    0.01%       81  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
      907521    0.01%       81  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      873160    0.01%       78  NodeHash::hash_find_insert(Node*)
      861170    0.01%       71  __memmove_avx_unaligned_erms
      850870    0.01%       81  I2C/C2I adapters(0xbb)
      846231    0.01%       77  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
      840461    0.01%       65  ___pthread_mutex_lock
      838340    0.01%       52  CodeCache::find_blob(void*)
      822000    0.01%       78  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      817120    0.01%       80  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      812990    0.01%       71  Matcher::xform(Node*, int)
      794461    0.01%       65  __GI___libc_malloc
      771430    0.01%       70  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
      748590    0.01%       69  NullCheckEliminator::iterate_one(BlockBegin*)
      748140    0.01%       68  PhaseIterGVN::add_users_to_worklist(Node*)
      747300    0.01%       56  __memmove_avx_unaligned
      725490    0.01%       68  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
      722270    0.01%       71  jdk.internal.org.objectweb.asm.Frame.push
      722242    0.01%       48  BlockBegin::try_merge(ValueStack*)
      721381    0.01%       67  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
      715650    0.01%       70  jdk.internal.org.objectweb.asm.Type.getArgumentsAndReturnSizes
      701810    0.01%       68  java.lang.Long.getChars
      699480    0.01%       68  _invokeBasic
      691990    0.01%       57  Run.measure
      691560    0.01%       57  _int_malloc
      689591    0.01%       46  NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
      683810    0.01%       66  PhaseIterGVN::transform_old(Node*)
      682860    0.01%       64  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
      679200    0.01%       48  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      674971    0.01%       55  ValueMap::find_insert(Instruction*)
      671512    0.01%       43  __memset_avx2_unaligned
      670980    0.01%       66  java.lang.AbstractStringBuilder.append
      670010    0.01%       62  ___pthread_mutex_trylock
      665371    0.01%       58  GraphBuilder::append_with_bci(Instruction*, int)
      651570    0.01%       61  .annobin__ZN8Interval9add_rangeEii.start
      642311    0.00%       60  PhaseCCP::analyze()
      638481    0.00%       57  IntervalWalker::walk_to(int)
      635610    0.00%       51  PhiResolver::create_node(LIR_OprDesc*, bool)
      631620    0.00%       19  __futex_abstimed_wait_common
      631540    0.00%       38  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
      630220    0.00%       55  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
      627281    0.00%       61  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
      626760    0.00%       46  os::free(void*)
      625590    0.00%       60  java.lang.invoke.LambdaForm$MH.0x0000000800c08400.invoke
      619482    0.00%       44  _IO_default_xsputn
      617170    0.00%       30  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
      602690    0.00%       57  Unique_Node_List::remove(Node*)
      600640    0.00%       55  java.lang.invoke.MethodType.equals
      599050    0.00%       16  nmethod::oops_do(OopClosure*, bool)
      597231    0.00%       56  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
      589160    0.00%       49  __GI___pthread_mutex_unlock_usercnt
      587161    0.00%       58  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
      586280    0.00%       54  PhaseOutput::BuildOopMaps()
      585400    0.00%       57  jdk.internal.org.objectweb.asm.SymbolTable.hash
      582161    0.00%       17  os::javaTimeNanos()
      581700    0.00%       55  java.util.concurrent.ConcurrentHashMap.get
      581160    0.00%       56  .annobin__ZNK4Node6is_CFGEv.start
      581030    0.00%       55  java.lang.invoke.MethodType.hashCode
      575360    0.00%       49  Node::clone() const
      575031    0.00%       51  constantPoolHandle::~constantPoolHandle()
      573150    0.00%       56  InterpreterRuntime::ldc(JavaThread*, bool)
      569420    0.00%       55  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
      565190    0.00%       54  java.util.Arrays.copyOf
      562061    0.00%       52  LinearScan::eliminate_spill_moves()
      556720    0.00%       55  java.lang.String.getBytes
      547350    0.00%       27  __strchr_avx2
      546470    0.00%       45  Node::out_grow(unsigned int)
      537940    0.00%       49  PhaseChaitin::merge_multidefs()
      535380    0.00%       47  LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
      531610    0.00%       48  java.lang.invoke.MethodType.checkPtypes
      518280    0.00%       42  MethodLiveness::init_basic_blocks()
      514580    0.00%       47  .annobin__ZN22Node_Backward_Iterator4nextEv.start
      511540    0.00%       49  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
      511410    0.00%       47  CodeHeap::find_blob_unsafe(void*) const
      509440    0.00%        3  G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
      506810    0.00%       50  jdk.internal.org.objectweb.asm.Frame.pop
      506600    0.00%       46  Matcher::find_shared(Node*)
      506440    0.00%       43  Relocation::pd_call_destination(unsigned char*)
      503090    0.00%       47  java.lang.StringConcatHelper.prepend
      502630    0.00%       43  GlobalValueNumbering::GlobalValueNumbering(IR*)
      501200    0.00%       33  stringStream::write(char const*, unsigned long)
      501070    0.00%       37  LinearScan::sort_intervals_before_allocation()
      499320    0.00%       50  java.lang.invoke.InvokerBytecodeGenerator.emitPushArgument
      498270    0.00%       19  CompileBroker::invoke_compiler_on_method(CompileTask*)
      497600    0.00%       33  __strlen_avx2
      497060    0.00%       41  Type::hashcons()
      496260    0.00%       42  BlockListBuilder::set_leaders()
      495540    0.00%       42  Matcher::match_tree(Node const*)
      493810    0.00%       43  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode)
      491771    0.00%       48  jdk.internal.org.objectweb.asm.SymbolTable.put
      491480    0.00%        5  G1ParCopyClosure<(G1Barrier)1, false>::do_oop(oopDesc**)
      486700    0.00%       48  java.lang.invoke.LambdaForm.normalize
      485401    0.00%       48  java.lang.invoke.MethodType.insertParameterTypes
      484990    0.00%       47  java.io.PrintStream.writeln
      482471    0.00%        9  os::PlatformMonitor::wait(long)
      480530    0.00%       40  MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*)
      480350    0.00%       46  java.lang.invoke.MethodType.makeImpl
      475680    0.00%       13  SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
      473540    0.00%       41  GraphBuilder::access_field(Bytecodes::Code)
      471670    0.00%       47  sun.nio.cs.StreamEncoder.writeBytes
      470250    0.00%       46  java.lang.invoke.LambdaForm$Name.<init>
      467080    0.00%       45  I2C/C2I adapters(0xba)
      466240    0.00%        4  Method::bcp_from(unsigned char*) const
      466230    0.00%       39  BitMap::set_union(BitMap const&)
      463220    0.00%       36  msort_with_tmp.part.0
      460790    0.00%       45  java.lang.AbstractStringBuilder.putStringAt
      460230    0.00%       45  IndexSet::alloc_block_containing(unsigned int)
      459070    0.00%       43  java.util.Arrays.copyOfRange
      454830    0.00%       27  syscall
      453460    0.00%       44  jdk.internal.org.objectweb.asm.SymbolTable.addConstantNameAndType
      452830    0.00%       40  PhaseCFG::sched_call(Block*, unsigned int, Node_List&, GrowableArray<int>&, MachCallNode*, VectorSet&)
      448730    0.00%        9  .annobin__ZN7Monitor4waitEl.start
      448500    0.00%       44  jdk.internal.org.objectweb.asm.ClassWriter.toByteArray
      448121    0.00%       37  ciMethodBlocks::do_analysis()
      447960    0.00%       45  java.lang.invoke.InvokerBytecodeGenerator.addMethod
      445550    0.00%       42  java.lang.StringConcatHelper.mix
      441451    0.00%       40  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm
      440860    0.00%       42  PhaseIdealLoop::build_loop_tree_impl(Node*, int)
      440311    0.00%       42  InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code)
      440110    0.00%       37  __tls_get_addr@plt
      440080    0.00%       39  Compile::remove_useless_nodes(Unique_Node_List&)
      438740    0.00%       40  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
      438481    0.00%       39  ciMethodData::bci_to_data(int, ciMethod*)
      437491    0.00%       42  GraphBuilder::invoke(Bytecodes::Code)
      436580    0.00%       43  sun.nio.cs.StreamEncoder.implWrite
      434840    0.00%       42  java.util.concurrent.ConcurrentHashMap.putVal
      429810    0.00%       42  java.lang.invoke.LambdaForm$Name.replaceNames
      429440    0.00%       40  java.lang.Long.stringSize
      428020    0.00%       43  java.lang.invoke.MethodType$ConcurrentWeakInternSet.add
      426160    0.00%       38  MultiNode::is_CFG() const
      424730    0.00%       33  Optimizer::eliminate_null_checks()
      424000    0.00%       38  Compile::identify_useful_nodes(Unique_Node_List&)
      423921    0.00%       42  sun.nio.cs.StreamEncoder.write
      422140    0.00%       21  IndexSet::initialize(unsigned int)
      420980    0.00%       34  Dependencies::assert_evol_method(ciMethod*)
      420290    0.00%       39  Interval::add_use_pos(int, IntervalUseKind)
      418480    0.00%       40  TypeArrayKlass::allocate_common(int, bool, JavaThread*)
      413600    0.00%       39  PhaseAggressiveCoalesce::insert_copies(Matcher&)
      409810    0.00%       37  .annobin__ZN26GrowableArrayWithAllocatorIP11Instruction13GrowableArrayIS1_EE4growEi.start
      409740    0.00%        2  oop_Relocation::oop_value()
      401770    0.00%       38  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8
      401040    0.00%       37  PhaseIterGVN::remove_globally_dead_node(Node*)
      400200    0.00%       38  java.lang.invoke.LambdaForm.useCount
      400020    0.00%       39  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8Reference
