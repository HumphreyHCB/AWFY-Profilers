--- Execution profile ---
Total samples       : 184456622
unknown_Java        : 1034348 (0.56%)
not_walkable_Java   : 1424 (0.00%)
deoptimization      : 47 (0.00%)

--- 663143084437 ns (35.71%), 65914698 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 531869126763 ns (28.64%), 52843252 samples
  [ 0] Richards.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 67919887292 ns (3.66%), 6753126 samples
  [ 0] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 57224515662 ns (3.08%), 5684264 samples
  [ 0] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 35187030879 ns (1.89%), 3496366 samples
  [ 0] richards.Scheduler.createTask
  [ 1] richards.Scheduler.createWorker
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 32857683740 ns (1.77%), 3265355 samples
  [ 0] richards.TaskState.createRunning
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 32788043799 ns (1.77%), 3258927 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 25554134059 ns (1.38%), 2539934 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 23834773421 ns (1.28%), 2371960 samples
  [ 0] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 21670263047 ns (1.17%), 2153157 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 17464601023 ns (0.94%), 1735674 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 17413986660 ns (0.94%), 1732228 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 15952151531 ns (0.86%), 1586860 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 14269896259 ns (0.77%), 1419608 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 13817211515 ns (0.74%), 1373353 samples
  [ 0] richards.Scheduler.lambda$createDevice$0
  [ 1] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 12156897273 ns (0.65%), 1206774 samples
  [ 0] richards.Scheduler.lambda$createHandler$1
  [ 1] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 11941301505 ns (0.64%), 1187466 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.deviceInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 10996607239 ns (0.59%), 1092408 samples
  [ 0] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 9691177302 ns (0.52%), 963260 samples
  [ 0] richards.Packet.<init>
  [ 1] richards.Scheduler.createPacket
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 9203999635 ns (0.50%), 915697 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 9186855237 ns (0.49%), 913859 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.TaskControlBlock.addInputAndCheckPriority
  [ 3] richards.Scheduler.queuePacket
  [ 4] richards.Scheduler.lambda$createHandler$1
  [ 5] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 6] richards.TaskControlBlock.runTask
  [ 7] richards.Scheduler.schedule
  [ 8] richards.Scheduler.start
  [ 9] Richards.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 7940095209 ns (0.43%), 789661 samples
  [ 0] java.lang.Object.<init>
  [ 1] richards.RBObject.<init>
  [ 2] richards.WorkerTaskDataRecord.<init>
  [ 3] richards.Scheduler.createWorker
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 6396100616 ns (0.34%), 636286 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 6350558998 ns (0.34%), 631650 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 6285263696 ns (0.34%), 625114 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 6137000458 ns (0.33%), 608851 samples
  [ 0] richards.TaskState.createRunning
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 5841660832 ns (0.31%), 581133 samples
  [ 0] richards.DeviceTaskDataRecord.getPending
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 5614944983 ns (0.30%), 556789 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 5464877689 ns (0.29%), 543548 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 5196468721 ns (0.28%), 515213 samples
  [ 0] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 1] [unknown_Java]

--- 5153758644 ns (0.28%), 512153 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.TaskState.<init>
  [ 2] richards.TaskControlBlock.<init>
  [ 3] richards.Scheduler.createTask
  [ 4] richards.Scheduler.createIdler
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 5149008990 ns (0.28%), 512349 samples
  [ 0] richards.Scheduler.lambda$createIdler$2
  [ 1] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 5109763283 ns (0.28%), 508357 samples
  [ 0] richards.Scheduler.lambda$createIdler$2
  [ 1] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 4988714742 ns (0.27%), 496244 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 4804519400 ns (0.26%), 477993 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 4620469118 ns (0.25%), 459705 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 4486305739 ns (0.24%), 446019 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 4292434792 ns (0.23%), 426991 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.deviceInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 4145149434 ns (0.22%), 412107 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 4108172265 ns (0.22%), 407080 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 3910416589 ns (0.21%), 389056 samples
  [ 0] richards.Packet.getIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 3849115219 ns (0.21%), 382947 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 3825748054 ns (0.21%), 380581 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 3770719153 ns (0.20%), 373624 samples
  [ 0] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 1] [unknown_Java]

--- 3752566548 ns (0.20%), 372978 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.TaskState.<init>
  [ 2] richards.TaskState.createRunning
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3694745174 ns (0.20%), 366343 samples
  [ 0] richards.TaskState.createWaitingWithPacket
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 3654090079 ns (0.20%), 363573 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 3522161185 ns (0.19%), 350237 samples
  [ 0] richards.TaskState.<init>
  [ 1] richards.TaskState.createRunning
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 3378192707 ns (0.18%), 335678 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 3257803739 ns (0.18%), 324026 samples
  [ 0] java.util.Arrays.fill
  [ 1] richards.Scheduler.<init>
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 3049324177 ns (0.16%), 303054 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 3016867241 ns (0.16%), 300064 samples
  [ 0] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 2936886112 ns (0.16%), 291855 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 2840777450 ns (0.15%), 282422 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 2594248309 ns (0.14%), 258021 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 2493679506 ns (0.13%), 247706 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 2271302498 ns (0.12%), 225985 samples
  [ 0] richards.HandlerTaskDataRecord.workIn
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 2151357992 ns (0.12%), 213345 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1927426797 ns (0.10%), 191458 samples
  [ 0] richards.Scheduler.createPacket
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1897389661 ns (0.10%), 188572 samples
  [ 0] richards.Scheduler.createPacket
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1865326901 ns (0.10%), 184964 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1857969681 ns (0.10%), 184848 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1853741063 ns (0.10%), 184191 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1843374630 ns (0.10%), 183183 samples
  [ 0] java.lang.Object.<init>
  [ 1] richards.RBObject.<init>
  [ 2] richards.TaskState.<init>
  [ 3] richards.TaskControlBlock.<init>
  [ 4] richards.Scheduler.createTask
  [ 5] richards.Scheduler.createIdler
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1831606662 ns (0.10%), 181562 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1605782291 ns (0.09%), 159592 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createIdler
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1503054328 ns (0.08%), 149390 samples
  [ 0] richards.Scheduler.start
  [ 1] Richards.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1455015698 ns (0.08%), 144300 samples
  [ 0] richards.WorkerTaskDataRecord.<init>
  [ 1] richards.Scheduler.createWorker
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1388880441 ns (0.07%), 137661 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1371821477 ns (0.07%), 136414 samples
  [ 0] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 1] [unknown_Java]

--- 1317070673 ns (0.07%), 130904 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler.lambda$createIdler$2
  [ 2] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1307996758 ns (0.07%), 130090 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1302870070 ns (0.07%), 129202 samples
  [ 0] richards.WorkerTaskDataRecord.setCount
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1265941337 ns (0.07%), 125919 samples
  [ 0] richards.TaskControlBlock.getPriority
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1226232989 ns (0.07%), 121573 samples
  [ 0] richards.WorkerTaskDataRecord.getCount
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1217421163 ns (0.07%), 120997 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1201468042 ns (0.06%), 119456 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1164880560 ns (0.06%), 115951 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler.lambda$createIdler$2
  [ 2] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1164686258 ns (0.06%), 115885 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 1059270818 ns (0.06%), 105336 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1047715551 ns (0.06%), 104220 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1036750263 ns (0.06%), 103035 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1023538483 ns (0.06%), 101807 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.deviceInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 963264574 ns (0.05%), 95679 samples
  [ 0] richards.Scheduler.start
  [ 1] Richards.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 963092243 ns (0.05%), 95553 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 943666413 ns (0.05%), 93868 samples
  [ 0] richards.TaskControlBlock.getPriority
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 912141347 ns (0.05%), 90778 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 897494916 ns (0.05%), 89003 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 882796957 ns (0.05%), 87494 samples
  [ 0] richards.Scheduler.createTask
  [ 1] richards.Scheduler.createIdler
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 864364235 ns (0.05%), 85922 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.Packet.<init>
  [ 2] richards.Scheduler.createPacket
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 851373243 ns (0.05%), 84617 samples
  [ 0] richards.Scheduler.createTask
  [ 1] richards.Scheduler.createIdler
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 807813284 ns (0.04%), 80257 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 807202038 ns (0.04%), 80298 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 798241489 ns (0.04%), 79346 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 763112818 ns (0.04%), 75633 samples
  [ 0] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 738150867 ns (0.04%), 73172 samples
  [ 0] richards.WorkerTaskDataRecord.setDestination
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 654683272 ns (0.04%), 65061 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 654549111 ns (0.04%), 64993 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 648962449 ns (0.03%), 64391 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 648732940 ns (0.03%), 64283 samples
  [ 0] richards.Scheduler.<init>
  [ 1] Richards.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
700421728889   37.72%  69620078  itable stub
531879304746   28.64%  52844248  Richards.benchmark
 72770558381    3.92%  7233856  richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
 62682193357    3.38%  6225449  richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
 61630584574    3.32%  6127319  richards.RBObject.append
 41632707634    2.24%  4139155  richards.TaskControlBlock.addInputAndCheckPriority
 39237895769    2.11%  3902905  richards.Packet.setLink
 38995117098    2.10%  3874247  richards.TaskState.createRunning
 37281042474    2.01%  3704141  richards.Scheduler.createTask
 34671541274    1.87%  3447153  richards.HandlerTaskDataRecord.workInAdd
 25216486561    1.36%  2509344  richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
 16507564646    0.89%  1641192  richards.Scheduler.findTask
 14093851145    0.76%  1400417  richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
 13838265820    0.75%  1375425  richards.Scheduler.lambda$createDevice$0
 12683761193    0.68%  1261637  richards.TaskState.setTaskHolding
 12525490212    0.67%  1243316  richards.Scheduler.lambda$createHandler$1
 10805497898    0.58%  1074894  richards.TaskControlBlock.runTask
 10759961840    0.58%  1069363  richards.Packet.<init>
 10490560644    0.56%  1043330  richards.Scheduler.queuePacket
 10270482028    0.55%  1021836  richards.Scheduler.lambda$createIdler$2
  9793361203    0.53%   973811  java.lang.Object.<init>
  9785749108    0.53%   972542  richards.RBObject.<init>
  8813063646    0.47%   874486  richards.Scheduler.lambda$createWorker$3
  8577755684    0.46%   852463  richards.Scheduler.schedule
  6152186855    0.33%   610042  richards.DeviceTaskDataRecord.setPending
  5841738282    0.31%   581141  richards.DeviceTaskDataRecord.getPending
  5274123046    0.28%   523135  richards.Scheduler.holdSelf
  4953519788    0.27%   492152  richards.TaskControlBlock.<init>
  3910533809    0.21%   389068  richards.Packet.getIdentity
  3829835189    0.21%   380512  richards.Scheduler.createPacket
  3733946031    0.20%   371236  richards.TaskState.<init>
  3695327954    0.20%   366400  richards.TaskState.createWaitingWithPacket
  3260656730    0.18%   324303  java.util.Arrays.fill
  2632786286    0.14%   261610  richards.Scheduler.start
  2271699608    0.12%   226025  richards.HandlerTaskDataRecord.workIn
  2222506422    0.12%   221058  richards.TaskControlBlock.getPriority
  1576812963    0.08%   156714  richards.TaskState.isTaskHoldingOrWaiting
  1471649442    0.08%   146285  richards.IdleTaskDataRecord.setControl
  1455308378    0.08%   144328  richards.WorkerTaskDataRecord.<init>
  1303335920    0.07%   129248  richards.WorkerTaskDataRecord.setCount
  1226391639    0.07%   121589  richards.WorkerTaskDataRecord.getCount
   738272017    0.04%    73184  richards.WorkerTaskDataRecord.setDestination
   730623892    0.04%    72406  richards.HandlerTaskDataRecord.deviceInAdd
   650075541    0.04%    64412  richards.Scheduler.<init>
   646110646    0.03%    64040  richards.Packet.setIdentity
   507077284    0.03%    50445  richards.Scheduler.release
   180390362    0.01%    17882  richards.Packet.setDatum
   145291918    0.01%    14430  java.lang.invoke.DirectMethodHandle.allocateInstance
    93444865    0.01%     3834  [vdso]
    91643249    0.00%     5801  generic_exec_single_[k]
    76547651    0.00%     3307  _raw_spin_unlock_irqrestore_[k]
    75036593    0.00%     2672  Monitor::wait_without_safepoint_check(long)
    66951606    0.00%     6653  richards.TaskState.isWaitingWithPacket
    62169088    0.00%     2201  clock_gettime@GLIBC_2.2.5
    56736442    0.00%     5606  Richards.verifyResult
    56680656    0.00%     2362  __tls_get_addr
    54036752    0.00%     1909  __futex_abstimed_wait_common
    53244724    0.00%     1914  StatSamplerTask::task()
    53132387    0.00%     2646  syscall_enter_from_user_mode_[k]
    52552616    0.00%     1908  PeriodicTask::real_time_tick(int)
    50230928    0.00%     1668  WatcherThread::sleep() const
    42705474    0.00%     1269  VMError::is_error_reported()
    41136263    0.00%     1691  os::PlatformMonitor::wait(long)
    36302205    0.00%     2230  copy_user_generic_string_[k]
    35493003    0.00%     1172  Mutex::lock_without_safepoint_check()
    34849704    0.00%     1393  plist_add_[k]
    34665448    0.00%     2689  restore_fpregs_from_user_[k]
    33047452    0.00%     1395  __GI___pthread_cond_timedwait
    30995739    0.00%     2953  Benchmark.innerBenchmarkLoop
    29064556    0.00%     1080  .annobin__ZN15PerfLongVariant6sampleEv.start
    25148833    0.00%     1653  .annobin__ZN28G1YoungRemSetSamplingClosure14do_heap_regionEP10HeapRegion.start
    22560586    0.00%     1043  os::elapsed_counter()
    21854275    0.00%      891  __schedule_[k]
    21356896    0.00%      843  ___pthread_mutex_unlock
    20160397    0.00%      765  os::javaTimeNanos()
    20031048    0.00%     1184  G1CollectionSet::iterate(HeapRegionClosure*) const
    19926039    0.00%      766  __x64_sys_futex_[k]
    19266407    0.00%      869  __GI___pthread_mutex_unlock_usercnt
    17175091    0.00%      757  futex_wake_[k]
    16786593    0.00%     1023  G1Analytics::predict_scan_card_num(unsigned long, bool) const
    15932883    0.00%      557  __pthread_mutex_cond_lock
    15900343    0.00%     1544  Node::dominates(Node*, Node_List&)
    15369047    0.00%      516  WatcherThread::run()
    15342124    0.00%      490  __audit_syscall_entry_[k]
    14746520    0.00%      657  G1ServiceThread::sleep_before_next_cycle() [clone .part.0]
    14540465    0.00%     1441  richards.Scheduler.markWaiting
    14476743    0.00%     1409  Interpreter
    13825596    0.00%      957  OtherRegionsTable::occupied() const
    13384236    0.00%     1327  IndexSetIterator::advance_and_next()
    13346992    0.00%      476  __GI___pthread_disable_asynccancel
    13044392    0.00%     1297  InlineCacheBuffer
    12946563    0.00%      730  __get_user_nocheck_4_[k]
    12865610    0.00%     1276  richards.Packet.getData
    12782215    0.00%      464  __lll_lock_wake
    12758452    0.00%     1259  Node::is_dead_loop_safe() const
    12462674    0.00%      655  .annobin__ZN20G1RemSetSamplingTask7executeEv.start
    12188282    0.00%     1214  PhaseChaitin::gather_lrg_masks(bool)
    12176662    0.00%      562  futex_wait_[k]
    12169942    0.00%      535  ObjectSynchronizer::is_async_deflation_needed()
    11722145    0.00%     1167  PhaseChaitin::Split(unsigned int, ResourceArea*)
    11652422    0.00%      621  ___pthread_mutex_lock
    11402281    0.00%      787  queue_work_on_[k]
    11383284    0.00%      442  futex_hash_[k]
    10970313    0.00%      460  VMThread::wait_for_operation()
    10819474    0.00%     1077  PhaseLive::compute(unsigned int)
    10790471    0.00%      654  exit_to_user_mode_loop_[k]
    10401893    0.00%     1013  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
    10385926    0.00%     1030  PhaseIterGVN::subsume_node(Node*, Node*)
    10254770    0.00%      525  G1Policy::use_adaptive_young_list_length() const
    10249733    0.00%     1009  PhiNode::is_unsafe_data_reference(Node*) const [clone .part.0]
    10129632    0.00%      423  __condvar_dec_grefs
     9827601    0.00%      949  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
     9823483    0.00%      368  get_futex_key_[k]
     9743982    0.00%      575  AbsSeq::dsd() const
     9347902    0.00%      446  __hrtimer_init_[k]
     9332425    0.00%      412  futex_wait_setup_[k]
     9294031    0.00%      559  G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long)
     8819573    0.00%      458  SuspendibleThreadSet::join()
     8781631    0.00%      328  do_futex_[k]
     8716652    0.00%      452  getrusage_[k]
     8451076    0.00%      591  _raw_spin_unlock_irq_[k]
     8388155    0.00%      802  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     8017131    0.00%      795  richards.TaskState.running
     7973903    0.00%      451  os::elapsedVTime()
     7925542    0.00%      780  richards.TaskState.setTaskWaiting
     7830623    0.00%      481  AbsSeq::davg() const
     7772353    0.00%      452  G1Analytics::predict_card_merge_time_ms(unsigned long, bool) const
     7589592    0.00%      467  __getrusage
     7480161    0.00%      743  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     7385871    0.00%      734  PhaseChaitin::post_allocate_copy_removal()
     7198861    0.00%      716  richards.TaskControlBlock.getLink
     7105580    0.00%      689  Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
     6974332    0.00%      664  __GI___ioctl_time64
     6876840    0.00%      236  schedule_[k]
     6836882    0.00%      343  do_syscall_64_[k]
     6809392    0.00%      260  futex_wait_queue_[k]
     6686884    0.00%      387  G1Policy::predict_region_non_copy_time_ms(HeapRegion*, bool) const
     6557050    0.00%      408  G1Analytics::predict_young_other_time_ms(unsigned long) const
     6535523    0.00%      404  G1Analytics::predict_card_scan_time_ms(unsigned long, bool) const
     6368834    0.00%      611  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
     6256680    0.00%      622  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
     6238872    0.00%      485  __get_user_nocheck_8_[k]
     6232390    0.00%      340  get_task_mm_[k]
     6141592    0.00%      577  NodeHash::hash_find_insert(Node*)
     5996120    0.00%      329  InlineCacheBuffer::is_empty()
     5880591    0.00%      238  syscall_trace_enter.constprop.0_[k]
     5854844    0.00%      533  Dict::Insert(void*, void*, bool)
     5823060    0.00%      521  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     5768752    0.00%      255  get_timespec64_[k]
     5730282    0.00%      526  __memset_avx2_unaligned_erms
     5657280    0.00%      136  __get_user_8_[k]
     5587132    0.00%      534  PhaseIdealLoop::Dominators()
     5504161    0.00%      522  PhaseIdealLoop::build_loop_tree()
     5436512    0.00%      286  futex_q_lock_[k]
     5372871    0.00%      534  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
     5103571    0.00%      484  PhaseIterGVN::add_users_to_worklist(Node*)
     5093934    0.00%      260  ConcurrentGCThread::should_terminate() const
     5084310    0.00%      470  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     5072052    0.00%      504  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
     4918181    0.00%      485  richards.TaskControlBlock.getIdentity
     4857093    0.00%      141  futex_get_value_locked_[k]
     4748511    0.00%      446  PhaseIterGVN::transform_old(Node*)
     4713581    0.00%      465  sun.nio.cs.UTF_8$Encoder.encodeArrayLoop
     4675110    0.00%      471  Matcher::xform(Node*, int)
     4602693    0.00%      234  Mutex::unlock()
     4549340    0.00%      137  ktime_get_coarse_real_ts64_[k]
     4439921    0.00%      426  Unique_Node_List::remove(Node*)
     4377380    0.00%      250  syscall_exit_work_[k]
     4197030    0.00%      295  G1Policy::revise_young_list_target_length_if_necessary(unsigned long)
     4176602    0.00%      270  os::elapsedTime()
     4155511    0.00%      189  CompileQueue::get()
     4137472    0.00%      214  __audit_syscall_exit_[k]
     4132100    0.00%      406  richards.TaskState.isPacketPending
     4091040    0.00%      395  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
     4080710    0.00%      374  [no_Java_frame]
     4072402    0.00%      405  PhaseAggressiveCoalesce::insert_copies(Matcher&)
     4063160    0.00%      393  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
     4026711    0.00%      373  PhaseCCP::analyze()
     4017141    0.00%      386  PhiNode::Ideal(PhaseGVN*, bool)
     3970200    0.00%      352  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     3838000    0.00%      365  java.lang.Boolean.valueOf
     3831161    0.00%      353  Node::clone() const
     3809890    0.00%      201  G1ServiceThread::run_task(G1ServiceTask*)
     3755372    0.00%      364  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
     3753920    0.00%      340  LinearScan::build_intervals()
     3749801    0.00%      376  Arena::contains(void const*) const
     3698231    0.00%      266  G1ServiceThread::schedule(G1ServiceTask*, long)
     3681051    0.00%      366  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
     3599111    0.00%      159  _raw_spin_lock_[k]
     3592802    0.00%      109  finish_task_switch.isra.0_[k]
     3535601    0.00%      352  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
     3507790    0.00%      333  DebugInformationRecorder::find_sharable_decode_offset(int)
     3479731    0.00%      339  ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray<PhiNode*>&, bool&)
     3465061    0.00%      163  _copy_from_user_[k]
     3461411    0.00%      335  PhiNode::unique_input(PhaseTransform*, bool)
     3458321    0.00%      330  Node::is_CFG() const
     3433241    0.00%      294  ciObjectFactory::get_metadata(Metadata*)
     3416051    0.00%      335  PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
     3409730    0.00%      316  clear_page_rep_[k]
     3406590    0.00%      174  __list_add_valid_[k]
