--- Execution profile ---
Total samples       : 20370476
GC_active           : 4 (0.00%)
unknown_Java        : 41581 (0.20%)
not_walkable_Java   : 1773 (0.01%)
deoptimization      : 235 (0.00%)

--- 14521993507 ns (7.06%), 1440813 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 2] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 3] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.reduceCollisionSet
  [ 6] cd.CollisionDetector.handleNewFrame
  [ 7] CD.benchmark
  [ 8] CD.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 11396463998 ns (5.54%), 1134976 samples
  [ 0] cd.RedBlackTree.forEach
  [ 1] cd.CollisionDetector.reduceCollisionSet
  [ 2] cd.CollisionDetector.handleNewFrame
  [ 3] CD.benchmark
  [ 4] CD.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 11026762769 ns (5.36%), 1095423 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 3] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 4] cd.RedBlackTree.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 9749364672 ns (4.74%), 967085 samples
  [ 0] cd.RedBlackTree.treeMinimum
  [ 1] cd.RedBlackTree$Node.successor
  [ 2] cd.RedBlackTree.forEach
  [ 3] cd.CollisionDetector.reduceCollisionSet
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 7608641694 ns (3.70%), 755779 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 4455563770 ns (2.17%), 441855 samples
  [ 0] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 1] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 2] som.Vector.forEach
  [ 3] cd.CollisionDetector.handleNewFrame
  [ 4] CD.benchmark
  [ 5] CD.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 4389243686 ns (2.13%), 436085 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 4024842315 ns (1.96%), 399688 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 2866667398 ns (1.39%), 284508 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 2652852004 ns (1.29%), 263935 samples
  [ 0] cd.RedBlackTree.treeMinimum
  [ 1] cd.RedBlackTree.forEach
  [ 2] cd.CollisionDetector.handleNewFrame
  [ 3] CD.benchmark
  [ 4] CD.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2598501067 ns (1.26%), 258198 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1980350800 ns (0.96%), 196395 samples
  [ 0] libmSin
  [ 1] cd.Simulator.simulate
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1896268122 ns (0.92%), 188536 samples
  [ 0] cd.Vector2D.compareNumbers
  [ 1] cd.Vector2D.compareTo
  [ 2] cd.Vector2D.compareTo
  [ 3] cd.RedBlackTree.treeInsert
  [ 4] cd.RedBlackTree.put
  [ 5] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 6] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 1749812159 ns (0.85%), 174486 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1647088082 ns (0.80%), 163900 samples
  [ 0] cd.RedBlackTree.treeMinimum
  [ 1] cd.RedBlackTree$Node.successor
  [ 2] cd.RedBlackTree.forEach
  [ 3] cd.CollisionDetector.handleNewFrame
  [ 4] CD.benchmark
  [ 5] CD.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1549886394 ns (0.75%), 154533 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1542044084 ns (0.75%), 152898 samples
  [ 0] libmCos
  [ 1] cd.Simulator.simulate
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1498209171 ns (0.73%), 149048 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 1415929182 ns (0.69%), 140608 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 1341114895 ns (0.65%), 133379 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1333458806 ns (0.65%), 132431 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1328587567 ns (0.65%), 131974 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1324937537 ns (0.64%), 131847 samples
  [ 0] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 1] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 2] cd.RedBlackTree.forEach
  [ 3] cd.CollisionDetector.handleNewFrame
  [ 4] CD.benchmark
  [ 5] CD.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1241130418 ns (0.60%), 123620 samples
  [ 0] som.Vector.<init>
  [ 1] som.Vector.<init>
  [ 2] cd.Simulator.simulate
  [ 3] CD.benchmark
  [ 4] CD.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1238827112 ns (0.60%), 123092 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 3] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 4] cd.RedBlackTree.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1223918658 ns (0.59%), 121684 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 1220497060 ns (0.59%), 121312 samples
  [ 0] cd.RedBlackTree$Node.successor
  [ 1] cd.RedBlackTree.forEach
  [ 2] cd.CollisionDetector.handleNewFrame
  [ 3] CD.benchmark
  [ 4] CD.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1203422367 ns (0.58%), 119707 samples
  [ 0] cd.RedBlackTree.forEach
  [ 1] cd.CollisionDetector.handleNewFrame
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1190371462 ns (0.58%), 117795 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 5] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 6] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.reduceCollisionSet
  [ 9] cd.CollisionDetector.handleNewFrame
  [10] CD.benchmark
  [11] CD.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 1140699662 ns (0.55%), 113468 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 3] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 4] cd.RedBlackTree.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1138618631 ns (0.55%), 113169 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1104007344 ns (0.54%), 110060 samples
  [ 0] cd.RedBlackTree.leftRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1060126057 ns (0.52%), 105373 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1041194329 ns (0.51%), 103752 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1021527870 ns (0.50%), 101701 samples
  [ 0] java.util.Arrays.copyOf
  [ 1] som.Vector.append
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 5] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 6] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.reduceCollisionSet
  [ 9] cd.CollisionDetector.handleNewFrame
  [10] CD.benchmark
  [11] CD.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 908994493 ns (0.44%), 89992 samples
  [ 0] som.Vector.append
  [ 1] cd.CollisionDetector.putIntoMap
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 873828771 ns (0.42%), 86966 samples
  [ 0] cd.RedBlackTree.forEach
  [ 1] cd.CollisionDetector.handleNewFrame
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 859351495 ns (0.42%), 85686 samples
  [ 0] cd.RedBlackTree.rightRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 827921435 ns (0.40%), 82306 samples
  [ 0] cd.CollisionDetector.lambda$reduceCollisionSet$5
  [ 1] cd.CollisionDetector$$Lambda$6.0x0000000800c0c678.apply
  [ 2] cd.RedBlackTree.forEach
  [ 3] cd.CollisionDetector.reduceCollisionSet
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 822904330 ns (0.40%), 81690 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 662941294 ns (0.32%), 65928 samples
  [ 0] cd.CallSign.compareTo
  [ 1] cd.CallSign.compareTo
  [ 2] cd.RedBlackTree.findNode
  [ 3] cd.RedBlackTree.get
  [ 4] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 5] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 6] cd.RedBlackTree.forEach
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 659034061 ns (0.32%), 65219 samples
  [ 0] cd.Vector2D.compareNumbers
  [ 1] cd.Vector2D.compareTo
  [ 2] cd.Vector2D.compareTo
  [ 3] cd.RedBlackTree.treeInsert
  [ 4] cd.RedBlackTree.put
  [ 5] cd.CollisionDetector.putIntoMap
  [ 6] cd.CollisionDetector.recurse
  [ 7] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 8] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 9] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [10] som.Vector.forEach
  [11] cd.CollisionDetector.reduceCollisionSet
  [12] cd.CollisionDetector.handleNewFrame
  [13] CD.benchmark
  [14] CD.innerBenchmarkLoop
  [15] Run.measure
  [16] Run.doRuns
  [17] Run.runBenchmark
  [18] Harness.main

--- 637290048 ns (0.31%), 63437 samples
  [ 0] cd.RedBlackTree.treeMinimum
  [ 1] cd.RedBlackTree$Node.successor
  [ 2] cd.RedBlackTree.forEach
  [ 3] cd.CollisionDetector.handleNewFrame
  [ 4] CD.benchmark
  [ 5] CD.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 630713284 ns (0.31%), 62828 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 566681296 ns (0.28%), 56234 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 555311241 ns (0.27%), 55366 samples
  [ 0] cd.RedBlackTree.leftRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 469864554 ns (0.23%), 41234 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 462417326 ns (0.22%), 45880 samples
  [ 0] Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
  [ 1] Node::replace_edge(Node*, Node*, PhaseGVN*)
  [ 2] PhaseIterGVN::remove_globally_dead_node(Node*)
  [ 3] PhaseIterGVN::subsume_node(Node*, Node*)
  [ 4] PhaseIterGVN::transform_old(Node*)
  [ 5] PhaseIterGVN::optimize()
  [ 6] Compile::Optimize()
  [ 7] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 8] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 450753331 ns (0.22%), 44758 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 440033046 ns (0.21%), 43654 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 437871056 ns (0.21%), 43466 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 426534525 ns (0.21%), 42429 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 3] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 4] cd.RedBlackTree.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 415790571 ns (0.20%), 41063 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 408705992 ns (0.20%), 40520 samples
  [ 0] cd.CollisionDetector.putIntoMap
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 401388502 ns (0.20%), 39967 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 394118858 ns (0.19%), 38961 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 5] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 6] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.reduceCollisionSet
  [ 9] cd.CollisionDetector.handleNewFrame
  [10] CD.benchmark
  [11] CD.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 391592244 ns (0.19%), 38807 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.putIntoMap
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 372034338 ns (0.18%), 36667 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.recurse
  [ 5] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 6] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 7] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 8] som.Vector.forEach
  [ 9] cd.CollisionDetector.reduceCollisionSet
  [10] cd.CollisionDetector.handleNewFrame
  [11] CD.benchmark
  [12] CD.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 371065834 ns (0.18%), 37008 samples
  [ 0] cd.RedBlackTree.rightRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 371019282 ns (0.18%), 36629 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 366911570 ns (0.18%), 36120 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 351030105 ns (0.17%), 34560 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 346569502 ns (0.17%), 34561 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 333301082 ns (0.16%), 33156 samples
  [ 0] cd.RedBlackTree$Node.successor
  [ 1] cd.RedBlackTree.forEach
  [ 2] cd.CollisionDetector.handleNewFrame
  [ 3] CD.benchmark
  [ 4] CD.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 330673799 ns (0.16%), 32587 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.recurse
  [ 5] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 6] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 7] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 8] som.Vector.forEach
  [ 9] cd.CollisionDetector.reduceCollisionSet
  [10] cd.CollisionDetector.handleNewFrame
  [11] CD.benchmark
  [12] CD.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 324229818 ns (0.16%), 32271 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$1
  [ 3] cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
  [ 4] cd.RedBlackTree.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 323702329 ns (0.16%), 32358 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 323559652 ns (0.16%), 33311 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 300924582 ns (0.15%), 29770 samples
  [ 0] som.Vector.append
  [ 1] cd.CollisionDetector.putIntoMap
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 5] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 6] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.reduceCollisionSet
  [ 9] cd.CollisionDetector.handleNewFrame
  [10] CD.benchmark
  [11] CD.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 299855843 ns (0.15%), 29676 samples
  [ 0] cd.Vector2D.compareTo
  [ 1] cd.Vector2D.compareTo
  [ 2] cd.RedBlackTree.treeInsert
  [ 3] cd.RedBlackTree.put
  [ 4] cd.CollisionDetector.putIntoMap
  [ 5] cd.CollisionDetector.recurse
  [ 6] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 7] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 8] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 9] som.Vector.forEach
  [10] cd.CollisionDetector.reduceCollisionSet
  [11] cd.CollisionDetector.handleNewFrame
  [12] CD.benchmark
  [13] CD.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 290984816 ns (0.14%), 28675 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 290910648 ns (0.14%), 29019 samples
  [ 0] cd.RedBlackTree.rightRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 285944830 ns (0.14%), 28304 samples
  [ 0] cd.Vector2D.compareNumbers
  [ 1] cd.Vector2D.compareTo
  [ 2] cd.Vector2D.compareTo
  [ 3] cd.RedBlackTree.treeInsert
  [ 4] cd.RedBlackTree.put
  [ 5] cd.CollisionDetector.putIntoMap
  [ 6] cd.CollisionDetector.recurse
  [ 7] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 8] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 9] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [10] som.Vector.forEach
  [11] cd.CollisionDetector.reduceCollisionSet
  [12] cd.CollisionDetector.handleNewFrame
  [13] CD.benchmark
  [14] CD.innerBenchmarkLoop
  [15] Run.measure
  [16] Run.doRuns
  [17] Run.runBenchmark
  [18] Harness.main

--- 277693771 ns (0.13%), 28147 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 270566795 ns (0.13%), 27850 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 267827613 ns (0.13%), 26648 samples
  [ 0] cd.Motion.findIntersection
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$3
  [ 2] cd.CollisionDetector$$Lambda$7.0x0000000800c0c8a0.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 263579144 ns (0.13%), 26638 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 263195616 ns (0.13%), 26181 samples
  [ 0] cd.RedBlackTree.forEach
  [ 1] cd.CollisionDetector.handleNewFrame
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 258648980 ns (0.13%), 25843 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 258175959 ns (0.13%), 25485 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 255129768 ns (0.12%), 25144 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 252643829 ns (0.12%), 24978 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.recurse
  [ 5] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 6] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 7] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 8] som.Vector.forEach
  [ 9] cd.CollisionDetector.reduceCollisionSet
  [10] cd.CollisionDetector.handleNewFrame
  [11] CD.benchmark
  [12] CD.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 248751154 ns (0.12%), 24752 samples
  [ 0] cd.RedBlackTree.forEach
  [ 1] cd.CollisionDetector.handleNewFrame
  [ 2] CD.benchmark
  [ 3] CD.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 248610837 ns (0.12%), 24745 samples
  [ 0] cd.Motion.findIntersection
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$3
  [ 2] cd.CollisionDetector$$Lambda$7.0x0000000800c0c8a0.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 246477834 ns (0.12%), 24525 samples
  [ 0] cd.RedBlackTree.leftRotate
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 241074450 ns (0.12%), 24810 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 236977310 ns (0.12%), 23777 samples
  [ 0] cd.CollisionDetector.voxelHash
  [ 1] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 2] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 3] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.reduceCollisionSet
  [ 6] cd.CollisionDetector.handleNewFrame
  [ 7] CD.benchmark
  [ 8] CD.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 235111250 ns (0.11%), 23417 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 3] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 4] som.Vector.forEach
  [ 5] cd.CollisionDetector.handleNewFrame
  [ 6] CD.benchmark
  [ 7] CD.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 232032514 ns (0.11%), 23670 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 231710102 ns (0.11%), 23863 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 230423479 ns (0.11%), 23547 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 227464967 ns (0.11%), 23438 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 223728042 ns (0.11%), 23034 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 219976849 ns (0.11%), 21806 samples
  [ 0] cd.RedBlackTree.put
  [ 1] cd.CollisionDetector.putIntoMap
  [ 2] cd.CollisionDetector.recurse
  [ 3] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 4] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 5] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 6] som.Vector.forEach
  [ 7] cd.CollisionDetector.reduceCollisionSet
  [ 8] cd.CollisionDetector.handleNewFrame
  [ 9] CD.benchmark
  [10] CD.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 217384841 ns (0.11%), 21518 samples
  [ 0] cd.RedBlackTree.treeInsert
  [ 1] cd.RedBlackTree.put
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 5] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 6] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 7] som.Vector.forEach
  [ 8] cd.CollisionDetector.reduceCollisionSet
  [ 9] cd.CollisionDetector.handleNewFrame
  [10] CD.benchmark
  [11] CD.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 216838337 ns (0.11%), 21354 samples
  [ 0] cd.CollisionDetector.recurse
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 210621499 ns (0.10%), 20904 samples
  [ 0] som.Vector.append
  [ 1] cd.CollisionDetector.lambda$handleNewFrame$0
  [ 2] cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
  [ 3] som.Vector.forEach
  [ 4] cd.CollisionDetector.handleNewFrame
  [ 5] CD.benchmark
  [ 6] CD.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 207749824 ns (0.10%), 20465 samples
  [ 0] cd.CollisionDetector.isInVoxel
  [ 1] cd.CollisionDetector.recurse
  [ 2] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 3] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 4] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 5] som.Vector.forEach
  [ 6] cd.CollisionDetector.reduceCollisionSet
  [ 7] cd.CollisionDetector.handleNewFrame
  [ 8] CD.benchmark
  [ 9] CD.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 203875973 ns (0.10%), 20185 samples
  [ 0] cd.RedBlackTree.findNode
  [ 1] cd.RedBlackTree.get
  [ 2] cd.CollisionDetector.putIntoMap
  [ 3] cd.CollisionDetector.recurse
  [ 4] cd.CollisionDetector.recurse
  [ 5] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 6] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [ 7] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [ 8] som.Vector.forEach
  [ 9] cd.CollisionDetector.reduceCollisionSet
  [10] cd.CollisionDetector.handleNewFrame
  [11] CD.benchmark
  [12] CD.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 203740297 ns (0.10%), 20070 samples
  [ 0] cd.Vector2D.compareNumbers
  [ 1] cd.Vector2D.compareTo
  [ 2] cd.Vector2D.compareTo
  [ 3] cd.RedBlackTree.treeInsert
  [ 4] cd.RedBlackTree.put
  [ 5] cd.CollisionDetector.putIntoMap
  [ 6] cd.CollisionDetector.recurse
  [ 7] cd.CollisionDetector.recurse
  [ 8] cd.CollisionDetector.drawMotionOnVoxelMap
  [ 9] cd.CollisionDetector.lambda$reduceCollisionSet$4
  [10] cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
  [11] som.Vector.forEach
  [12] cd.CollisionDetector.reduceCollisionSet
  [13] cd.CollisionDetector.handleNewFrame
  [14] CD.benchmark
  [15] CD.innerBenchmarkLoop
  [16] Run.measure
  [17] Run.doRuns
  [18] Run.runBenchmark
  [19] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 42633096978   20.72%  4230308  cd.RedBlackTree.treeInsert
 29320713731   14.25%  2927030  cd.CollisionDetector.isInVoxel
 22390742290   10.88%  2222023  cd.CollisionDetector.recurse
 15720871659    7.64%  1561900  cd.RedBlackTree.findNode
 15183609171    7.38%  1507737  cd.RedBlackTree.treeMinimum
 14576465063    7.09%  1448177  cd.RedBlackTree.put
 14174640272    6.89%  1411359  cd.RedBlackTree.forEach
  7184850652    3.49%   711581  cd.Vector2D.compareNumbers
  5259680540    2.56%   522585  cd.RedBlackTree.leftRotate
  4606608236    2.24%   456851  cd.CollisionDetector.lambda$handleNewFrame$0
  3621838043    1.76%   360028  cd.RedBlackTree.rightRotate
  2508941886    1.22%   249558  som.Vector.append
  1987368631    0.97%   197087  libmSin
  1773819335    0.86%   176367  cd.RedBlackTree$Node.successor
  1727629833    0.84%   170872  cd.Vector2D.compareTo
  1549369138    0.75%   153621  libmCos
  1497155195    0.73%   148997  cd.CollisionDetector.lambda$handleNewFrame$1
  1485545060    0.72%   147808  som.Vector.<init>
  1400400466    0.68%   138805  cd.CallSign.compareTo
  1279136476    0.62%   127292  java.util.Arrays.copyOf
  1138352803    0.55%   112987  cd.CollisionDetector.putIntoMap
  1131278141    0.55%   112592  cd.Motion.findIntersection
   959148428    0.47%    95391  cd.CollisionDetector.lambda$reduceCollisionSet$5
   814241077    0.40%    81090  cd.Vector2D.plus
   693413647    0.34%    69064  cd.Simulator.simulate
   612328284    0.30%    60755  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
   549875939    0.27%    48751  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
   456342208    0.22%    45198  cd.Vector2D.minus
   374709355    0.18%    37251  cd.Vector2D.<init>
   318009991    0.15%    31482  som.Vector.forEach
   303749168    0.15%    30094  jint_disjoint_arraycopy
   290424719    0.14%    27374  Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
   277522689    0.13%    27632  cd.Vector3D.minus
   245984231    0.12%    24673  cd.CollisionDetector.voxelHash
   234564829    0.11%    23264  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
   232676359    0.11%    14859  _raw_spin_unlock_irqrestore_[k]
   211749220    0.10%    21012  cd.CollisionDetector$$Lambda$2.0x0000000800c07618.apply
   205551665    0.10%    20460  cd.RedBlackTree.get
   160037642    0.08%    13942  __memset_avx2_unaligned_erms
   143595553    0.07%    14293  PhaseIterGVN::subsume_node(Node*, Node*)
   141645708    0.07%    13992  cd.RedBlackTree$Node.<init>
   140460131    0.07%    13877  java.lang.Object.<init>
   135848044    0.07%    12755  SpinPause
   135167605    0.07%     8325  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
   123858886    0.06%    11577  ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray<PhiNode*>&, bool&)
   120353697    0.06%    11976  cd.Vector3D.<init>
   111726064    0.05%     9761  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
    98994913    0.05%     9844  PhaseChaitin::Split(unsigned int, ResourceArea*)
    95630839    0.05%     9531  som.Vector.at
    80379250    0.04%     7991  som.Vector.size
    76562583    0.04%     7585  IndexSetIterator::advance_and_next()
    66090047    0.03%     6587  Arena::contains(void const*) const
    55466276    0.03%     3494  [vdso]
    54324473    0.03%     5387  itable stub
    54030487    0.03%     4601  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
    53123908    0.03%     5292  cd.Vector3D.plus
    52602952    0.03%     5198  cd.CollisionDetector$$Lambda$5.0x0000000800c0c450.apply
    50549275    0.02%     5016  PhaseChaitin::gather_lrg_masks(bool)
    45985704    0.02%     4399  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray<PhiNode*>&)
    44472042    0.02%     4421  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
    43014210    0.02%     4295  cd.CollisionDetector$$Lambda$6.0x0000000800c0c678.apply
    42767631    0.02%     4244  PhaseAggressiveCoalesce::insert_copies(Matcher&)
    42389752    0.02%     4212  PhaseLive::compute(unsigned int)
    41560981    0.02%     3534  __tls_get_addr
    40063101    0.02%     3980  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
    37559968    0.02%     3720  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
    37341840    0.02%     3612  CD.benchmark
    36671269    0.02%     3442  .annobin__ZNK7Compile18flatten_alias_typeEPK7TypePtr.start
    36454629    0.02%     2609  G1FromCardCache::clear(unsigned int)
    34549087    0.02%     2107  generic_exec_single_[k]
    32827070    0.02%     3259  PhaseChaitin::post_allocate_copy_removal()
    32252687    0.02%     3196  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
    31565641    0.02%     3122  Unique_Node_List::remove(Node*)
    30064747    0.01%     2970  Node::remove_dead_region(PhaseGVN*, bool)
    29538497    0.01%     2932  PhaseIterGVN::add_users_to_worklist(Node*)
    26597026    0.01%     2582  PhiNode::unique_input(PhaseTransform*, bool)
    26402809    0.01%     2625  RegionNode::is_unreachable_from_root(PhaseGVN const*) const
    26298725    0.01%     2621  cd.CollisionDetector.lambda$handleNewFrame$3
    25444583    0.01%     2471  MemAllocator::allocate() const
    24312473    0.01%     2423  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
    23224246    0.01%     2293  NodeHash::hash_find_insert(Node*)
    23180419    0.01%     2277  Node::dominates(Node*, Node_List&)
    22193713    0.01%     2206  PhaseIterGVN::transform_old(Node*)
    21737572    0.01%     2167  Matcher::xform(Node*, int)
    21645281    0.01%     1360  syscall_enter_from_user_mode_[k]
    21250715    0.01%     2005  __memmove_avx_unaligned_erms
    20755434    0.01%     2008  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
    19922978    0.01%     1984  cd.Vector3D.dot
    19793031    0.01%     1965  PhaseIdealLoop::Dominators()
    19719071    0.01%     1912  G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*)
    19675194    0.01%     1555  G1ScanCollectionSetRegionClosure::do_heap_region(HeapRegion*)
    19368935    0.01%     1938  IndexSet::initialize(unsigned int)
    19221843    0.01%     1909  PhiNode::Ideal(PhaseGVN*, bool)
    19073085    0.01%     1803  HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
    18596983    0.01%     1806  MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&) const
    17903825    0.01%     1758  Interpreter
    17845847    0.01%     1716  G1Allocator::unsafe_max_tlab_alloc()
    17821477    0.01%     1768  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
    17563587    0.01%     1347  __softirqentry_text_start_[k]
    17484477    0.01%      937  clock_gettime@GLIBC_2.2.5
    17404902    0.01%     1707  PhaseIdealLoop::build_loop_tree()
    17069556    0.01%     1121  futex_wake_[k]
    16799896    0.01%     1657  OptoRuntime::new_instance_C(Klass*, JavaThread*)
    16609282    0.01%     1664  Node::del_req(unsigned int)
    16606282    0.01%     1646  cd.CollisionDetector$$Lambda$3.0x0000000800c0c000.apply
    16268664    0.01%     1578  Dict::Insert(void*, void*, bool)
    15781522    0.01%     1564  PhaseOutput::BuildOopMaps()
    15660203    0.01%     1486  ciInstanceKlass::get_field_by_offset(int, bool)
    15488581    0.01%      849  __GI___libc_malloc
    15294896    0.01%      583  __futex_abstimed_wait_common
    15248064    0.01%     1519  cd.Motion.delta
    15086574    0.01%     1168  exit_to_user_mode_loop_[k]
    14928117    0.01%      813  native_queued_spin_lock_slowpath_[k]
    14815973    0.01%     1421  G1Policy::preventive_collection_required(unsigned int)
    14742212    0.01%     1460  IndexSet::alloc_block_containing(unsigned int)
    14584203    0.01%     1444  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
    14398557    0.01%     1434  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
    14372674    0.01%      967  os::free(void*)
    14289762    0.01%      882  HeapRegionClaimer::claim_region(unsigned int)
    14187424    0.01%      802  _int_malloc
    14097235    0.01%     1393  TypeNode::hash() const
    14028595    0.01%     1385  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
    13596163    0.01%      873  .annobin__ZN15FreeCSetClosure14do_heap_regionEP10HeapRegion.start
    13451913    0.01%     1324  g1_post_barrier_slow
    13440444    0.01%     1257  clear_page_rep_[k]
    13363704    0.01%     1327  PhaseChaitin::merge_multidefs()
    13333225    0.01%      864  queue_work_on_[k]
    13142014    0.01%     1299  PhaseCCP::analyze()
    12921306    0.01%     1277  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
    12727923    0.01%      498  finish_task_switch.isra.0_[k]
    12542366    0.01%     1245  Matcher::find_shared(Node*)
    12310015    0.01%     1220  .annobin__ZNK7PhiNode5ValueEP8PhaseGVN.start
    12306930    0.01%     1214  SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
    11976353    0.01%     1167  ClassLoaderData::holder_phantom() const
    11904880    0.01%     1153  ObjAllocator::initialize(HeapWordImpl**) const
    11822092    0.01%     1175  PhaseIFG::effective_degree(unsigned int) const
    11720063    0.01%     1162  MergeMemNode::Ideal(PhaseGVN*, bool)
    11423913    0.01%      968  ___pthread_mutex_lock
    11390665    0.01%     1096  Node::Node(unsigned int)
    11376315    0.01%     1135  cd.Vector3D.times
    11190011    0.01%     1107  Compile::identify_useful_nodes(Unique_Node_List&)
    11144351    0.01%     1066  MergeMemNode::memory_at(unsigned int) const
    10815691    0.01%     1068  Node::clone() const
    10648100    0.01%     1049  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
    10644152    0.01%     1047  ___pthread_mutex_trylock
    10591861    0.01%     1055  PhaseChaitin::Select()
    10585321    0.01%     1039  cd.CollisionDetector.handleNewFrame
    10531033    0.01%      954  CollectedHeap::tlab_alloc_reserve() const
    10512194    0.01%     1045  PhaseIFG::remove_node(unsigned int)
    10383992    0.01%      599  Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
    10378774    0.01%      979  ObjArrayAllocator::initialize(HeapWordImpl**) const
    10342793    0.01%      883  __memset_avx2_unaligned
    10310195    0.01%     1024  .annobin__ZN22Node_Backward_Iterator4nextEv.start
    10309990    0.01%     1024  PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*)
    10303755    0.01%     1026  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
    10223635    0.00%     1018  PhaseIterGVN::optimize()
    10063681    0.00%      661  .annobin__ZN16G1ParCopyClosureIL9G1Barrier0ELb0EE6do_oopEPP7oopDesc.start
    10021380    0.00%      987  Node::is_CFG() const
     9877717    0.00%      983  PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
     9824242    0.00%      926  CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool)
     9761113    0.00%      969  PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
     9724046    0.00%      938  Compile::copy_node_notes_to(Node*, Node*)
     9692375    0.00%      964  IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&)
     9648730    0.00%      624  JNIHandleBlock::oops_do(OopClosure*)
     9621012    0.00%      444  G1RemSet::prepare_region_for_scan(HeapRegion*)
     9614350    0.00%      612  G1BlockOffsetTablePart::zero_bottom_entry_raw()
     9540971    0.00%      871  __memmove_avx_unaligned
     9518784    0.00%      934  DebugInformationRecorder::find_sharable_decode_offset(int)
     9474603    0.00%      614  copy_user_generic_string_[k]
     9411003    0.00%      938  Matcher::match_tree(Node const*)
     9212142    0.00%      919  Node::rematerialize() const
     9204652    0.00%      644  restore_fpregs_from_user_[k]
     9175272    0.00%      846  AbsSeq::davg() const
     9131744    0.00%      879  G1NUMA::index_of_current_thread() const
     9131142    0.00%      880  Type::cmp(Type const*, Type const*)
     9085704    0.00%      858  do_user_addr_fault_[k]
     9045771    0.00%      524  futex_q_lock_[k]
     9044462    0.00%      901  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
     9037345    0.00%      896  PhaseIFG::SquareUp()
     8986953    0.00%      861  HeapRegion::set_eden()
     8778323    0.00%      753  OtherRegionsTable::occupied() const
     8753371    0.00%      843  G1CollectedHeap::attempt_allocation_slow(unsigned long)
     8742235    0.00%      846  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     8683273    0.00%      846  Node::add_req(Node*)
     8682723    0.00%      864  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)
     8669451    0.00%      848  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<598116ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 598116ul>::oop_access_barrier(void*)
     8639730    0.00%      529  os::javaTimeNanos()
     8545105    0.00%      846  Compile::remove_useless_nodes(Unique_Node_List&)
     8419643    0.00%      709  __vfprintf_internal
     8400062    0.00%      819  MultiNode::proj_out_or_null(unsigned int) const
     8307230    0.00%      783  nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool)
     8170924    0.00%      812  PhiNode::is_unsafe_data_reference(Node*) const [clone .part.0]
     8113062    0.00%      793  InstanceKlass::allocate_objArray(int, int, JavaThread*)
     8092913    0.00%      790  Node::out_grow(unsigned int)
     8042434    0.00%      796  PhaseIdealLoop::get_early_ctrl(Node*)
     8005102    0.00%      764  G1CollectionSet::add_eden_region(HeapRegion*)
     7904132    0.00%      465  __schedule_[k]
     7875155    0.00%      766  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
     7868723    0.00%      755  MutatorAllocRegion::retire(bool)
     7868353    0.00%      777  PhaseIterGVN::remove_globally_dead_node(Node*)
