--- Execution profile ---
Total samples       : 167153
unknown_Java        : 419 (0.25%)
not_walkable_Java   : 752 (0.45%)
deoptimization      : 112 (0.07%)

--- 29188724 ns (1.71%), 2894 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 22460175 ns (1.31%), 2229 samples
  [ 0] PhaseChaitin::Split(unsigned int, ResourceArea*)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 13768045 ns (0.81%), 1367 samples
  [ 0] PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
  [ 1] PhaseChaitin::post_allocate_copy_removal()
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 13748913 ns (0.80%), 1370 samples
  [ 0] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 13047916 ns (0.76%), 1296 samples
  [ 0] PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 12324524 ns (0.72%), 1222 samples
  [ 0] PhaseChaitin::gather_lrg_masks(bool)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 12097924 ns (0.71%), 1202 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseIterGVN::transform_old(Node*)
  [ 6] PhaseIterGVN::optimize()
  [ 7] Compile::Optimize()
  [ 8] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 9] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [10] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [11] CompileBroker::compiler_thread_loop()
  [12] JavaThread::thread_main_inner()
  [13] Thread::call_run()
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 11910653 ns (0.70%), 1182 samples
  [ 0] PhaseChaitin::post_allocate_copy_removal()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 11581524 ns (0.68%), 1152 samples
  [ 0] PhaseLive::compute(unsigned int)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 10765923 ns (0.63%), 1082 samples
  [ 0] havlak.HavlakLoopFinder.lambda$processEdges$1
  [ 1] havlak.HavlakLoopFinder$$Lambda$3.0x0000000800c08a28.apply
  [ 2] som.Vector.forEach
  [ 3] havlak.HavlakLoopFinder.processEdges
  [ 4] havlak.HavlakLoopFinder.identifyEdges
  [ 5] havlak.HavlakLoopFinder.findLoops
  [ 6] havlak.LoopTesterApp.findLoops
  [ 7] havlak.LoopTesterApp.main
  [ 8] Havlak.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 10308154 ns (0.60%), 1055 samples
  [ 0] havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4
  [ 1] havlak.HavlakLoopFinder$$Lambda$8.0x0000000800c096f0.apply
  [ 2] som.Vector.forEach
  [ 3] som.Set.forEach
  [ 4] havlak.HavlakLoopFinder.stepEProcessNonBackPreds
  [ 5] havlak.HavlakLoopFinder.findLoops
  [ 6] havlak.LoopTesterApp.findLoops
  [ 7] havlak.LoopTesterApp.main
  [ 8] Havlak.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 9474161 ns (0.55%), 941 samples
  [ 0] PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
  [ 1] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 9463553 ns (0.55%), 937 samples
  [ 0] PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
  [ 1] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 2] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 3] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 4] Compile::Optimize()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 8897951 ns (0.52%), 883 samples
  [ 0] Matcher::xform(Node*, int)
  [ 1] Matcher::match()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 8492303 ns (0.50%), 842 samples
  [ 0] PhaseAggressiveCoalesce::insert_copies(Matcher&)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 7948485 ns (0.47%), 792 samples
  [ 0] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 7574583 ns (0.44%), 750 samples
  [ 0] PhaseIdealLoop::Dominators()
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 7470403 ns (0.44%), 740 samples
  [ 0] Interpreter
  [ 1] [not_walkable_Java]

--- 7432970 ns (0.44%), 738 samples
  [ 0] som.Vector.<init>
  [ 1] som.Vector.<init>
  [ 2] havlak.HavlakLoopFinder.findLoops
  [ 3] havlak.LoopTesterApp.findLoops
  [ 4] havlak.LoopTesterApp.main
  [ 5] Havlak.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 7312091 ns (0.43%), 728 samples
  [ 0] Arena::contains(void const*) const
  [ 1] Matcher::match()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 6558903 ns (0.38%), 650 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseGVN::transform_no_reclaim(Node*)
  [ 6] GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool)
  [ 7] BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
  [ 8] .annobin__ZNK18ModRefBarrierSetC217store_at_resolvedER8C2AccessR13C2AccessValue.start
  [ 9] BarrierSetC2::store_at(C2Access&, C2AccessValue&) const
  [10] GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long)
  [11] Parse::do_put_xxx(Node*, ciField*, bool)
  [12] Parse::do_field_access(bool, bool)
  [13] Parse::do_one_block()
  [14] Parse::do_all_blocks()
  [15] Parse::Parse(JVMState*, ciMethod*, float)
  [16] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [17] Parse::do_call()
  [18] Parse::do_one_block()
  [19] Parse::do_all_blocks()
  [20] Parse::Parse(JVMState*, ciMethod*, float)
  [21] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [22] Parse::do_call()
  [23] Parse::do_one_block()
  [24] Parse::do_all_blocks()
  [25] Parse::Parse(JVMState*, ciMethod*, float)
  [26] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [27] Parse::do_call()
  [28] Parse::do_one_block()
  [29] Parse::do_all_blocks()
  [30] Parse::Parse(JVMState*, ciMethod*, float)
  [31] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [32] PredictedCallGenerator::generate(JVMState*)
  [33] Parse::do_call()
  [34] Parse::do_one_block()
  [35] Parse::do_all_blocks()
  [36] Parse::Parse(JVMState*, ciMethod*, float)
  [37] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [38] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [39] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [40] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [41] CompileBroker::compiler_thread_loop()
  [42] JavaThread::thread_main_inner()
  [43] Thread::call_run()
  [44] thread_native_entry(Thread*)
  [45] start_thread

--- 6376794 ns (0.37%), 657 samples
  [ 0] havlak.HavlakLoopFinder$$Lambda$5.0x0000000800c09078.apply
  [ 1] som.Vector.forEach
  [ 2] havlak.HavlakLoopFinder.stepD
  [ 3] havlak.HavlakLoopFinder.findLoops
  [ 4] havlak.LoopTesterApp.findLoops
  [ 5] havlak.LoopTesterApp.main
  [ 6] Havlak.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 6288022 ns (0.37%), 625 samples
  [ 0] PhaseIdealLoop::build_loop_tree()
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 5957383 ns (0.35%), 587 samples
  [ 0] PhaseCCP::analyze()
  [ 1] Compile::Optimize()
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 5859381 ns (0.34%), 575 samples
  [ 0] Matcher::find_shared(Node*)
  [ 1] Matcher::match()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 5649250 ns (0.33%), 557 samples
  [ 0] som.Vector.<init>
  [ 1] som.Vector.<init>
  [ 2] havlak.HavlakLoopFinder.findLoops
  [ 3] havlak.LoopTesterApp.findLoops
  [ 4] havlak.LoopTesterApp.main
  [ 5] Havlak.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 5589131 ns (0.33%), 554 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 5310641 ns (0.31%), 524 samples
  [ 0] PhaseOutput::BuildOopMaps()
  [ 1] PhaseOutput::Output()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 5219421 ns (0.31%), 518 samples
  [ 0] PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
  [ 1] PhaseLive::compute(unsigned int)
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 4931853 ns (0.29%), 491 samples
  [ 0] som.Dictionary.transferEntries
  [ 1] som.Dictionary.resize
  [ 2] som.Dictionary.atPut
  [ 3] havlak.HavlakLoopFinder.lambda$initAllNodes$0
  [ 4] havlak.HavlakLoopFinder$$Lambda$2.0x0000000800c08800.apply
  [ 5] som.Vector.forEach
  [ 6] havlak.HavlakLoopFinder.initAllNodes
  [ 7] havlak.HavlakLoopFinder.findLoops
  [ 8] havlak.LoopTesterApp.findLoops
  [ 9] havlak.LoopTesterApp.main
  [10] Havlak.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 4888074 ns (0.29%), 483 samples
  [ 0] PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
  [ 1] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 4841090 ns (0.28%), 475 samples
  [ 0] .annobin_Unsafe_AllocateInstance.start
  [ 1] jdk.internal.misc.Unsafe.allocateInstance
  [ 2] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 3] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 4] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 5] havlak.HavlakLoopFinder.findLoops
  [ 6] havlak.LoopTesterApp.findLoops
  [ 7] havlak.LoopTesterApp.main
  [ 8] Havlak.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 4774351 ns (0.28%), 473 samples
  [ 0] PhaseChaitin::merge_multidefs()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 4763561 ns (0.28%), 473 samples
  [ 0] .annobin__ZN22Node_Backward_Iterator4nextEv.start
  [ 1] PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
  [ 2] PhaseCFG::global_code_motion()
  [ 3] PhaseCFG::do_global_code_motion()
  [ 4] Compile::Code_Gen()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 4588023 ns (0.27%), 451 samples
  [ 0] .annobin_Unsafe_AllocateInstance.start
  [ 1] jdk.internal.misc.Unsafe.allocateInstance
  [ 2] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 3] java.lang.invoke.LambdaForm$DMH.0x0000000800c0d000.newInvokeSpecial
  [ 4] java.lang.invoke.LambdaForm$MH.0x0000000800c0d800.linkToTargetMethod
  [ 5] havlak.HavlakLoopFinder.stepD
  [ 6] havlak.HavlakLoopFinder.findLoops
  [ 7] havlak.LoopTesterApp.findLoops
  [ 8] havlak.LoopTesterApp.main
  [ 9] Havlak.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 4556143 ns (0.27%), 448 samples
  [ 0] havlak.UnionFindNode.getBb
  [ 1] havlak.HavlakLoopFinder.findLoops
  [ 2] havlak.LoopTesterApp.findLoops
  [ 3] havlak.LoopTesterApp.main
  [ 4] Havlak.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 4401552 ns (0.26%), 411 samples
  [ 0] PhaseIterGVN::subsume_node(Node*, Node*)
  [ 1] PhaseIterGVN::transform_old(Node*)
  [ 2] PhaseIterGVN::optimize()
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 4161822 ns (0.24%), 410 samples
  [ 0] PhaseIterGVN::transform_old(Node*)
  [ 1] PhaseIterGVN::optimize()
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 4075381 ns (0.24%), 402 samples
  [ 0] Matcher::match_tree(Node const*)
  [ 1] Matcher::xform(Node*, int)
  [ 2] Matcher::match()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3972600 ns (0.23%), 394 samples
  [ 0] PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3916671 ns (0.23%), 386 samples
  [ 0] PhaseCFG::sched_call(Block*, unsigned int, Node_List&, GrowableArray<int>&, MachCallNode*, VectorSet&)
  [ 1] PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
  [ 2] PhaseCFG::global_code_motion()
  [ 3] PhaseCFG::do_global_code_motion()
  [ 4] Compile::Code_Gen()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 3876900 ns (0.23%), 385 samples
  [ 0] [no_Java_frame]

--- 3876281 ns (0.23%), 383 samples
  [ 0] PhaseChaitin::gather_lrg_masks(bool)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3861583 ns (0.23%), 385 samples
  [ 0] havlak.HavlakLoopFinder.lambda$initAllNodes$0
  [ 1] havlak.HavlakLoopFinder$$Lambda$2.0x0000000800c08800.apply
  [ 2] som.Vector.forEach
  [ 3] havlak.HavlakLoopFinder.initAllNodes
  [ 4] havlak.HavlakLoopFinder.findLoops
  [ 5] havlak.LoopTesterApp.findLoops
  [ 6] havlak.LoopTesterApp.main
  [ 7] Havlak.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 3746630 ns (0.22%), 373 samples
  [ 0] PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3726510 ns (0.22%), 367 samples
  [ 0] PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
  [ 1] PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)
  [ 2] PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
  [ 3] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 4] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 5] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 6] Compile::Optimize()
  [ 7] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 8] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 3688582 ns (0.22%), 362 samples
  [ 0] som.Vector.<init>
  [ 1] som.Vector.<init>
  [ 2] havlak.HavlakLoopFinder.findLoops
  [ 3] havlak.LoopTesterApp.findLoops
  [ 4] havlak.LoopTesterApp.main
  [ 5] Havlak.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3594312 ns (0.21%), 356 samples
  [ 0] PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
  [ 1] PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
  [ 2] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 3] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 4] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 5] Compile::Optimize()
  [ 6] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 7] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 8] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 9] CompileBroker::compiler_thread_loop()
  [10] JavaThread::thread_main_inner()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 3585310 ns (0.21%), 354 samples
  [ 0] Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
  [ 1] Compile::final_graph_reshaping() [clone .part.0]
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 3560900 ns (0.21%), 352 samples
  [ 0] PhaseIdealLoop::is_dominator(Node*, Node*)
  [ 1] PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
  [ 2] PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
  [ 3] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 4] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 5] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 6] Compile::Optimize()
  [ 7] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 8] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 3486570 ns (0.20%), 345 samples
  [ 0] .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
  [ 1] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 2] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 3] G1ParEvacuateFollowersClosure::do_void()
  [ 4] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 5] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 3446211 ns (0.20%), 341 samples
  [ 0] PhaseLive::compute(unsigned int)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3413971 ns (0.20%), 338 samples
  [ 0] NodeHash::hash_find_insert(Node*)
  [ 1] PhaseIterGVN::transform_old(Node*)
  [ 2] PhaseIterGVN::optimize()
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3342281 ns (0.20%), 247 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseGVN::transform_no_reclaim(Node*)
  [ 6] GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool)
  [ 7] BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
  [ 8] .annobin__ZNK18ModRefBarrierSetC217store_at_resolvedER8C2AccessR13C2AccessValue.start
  [ 9] BarrierSetC2::store_at(C2Access&, C2AccessValue&) const
  [10] GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long)
  [11] Parse::do_put_xxx(Node*, ciField*, bool)
  [12] Parse::do_field_access(bool, bool)
  [13] Parse::do_one_block()
  [14] Parse::do_all_blocks()
  [15] Parse::Parse(JVMState*, ciMethod*, float)
  [16] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [17] Parse::do_call()
  [18] Parse::do_one_block()
  [19] Parse::do_all_blocks()
  [20] Parse::Parse(JVMState*, ciMethod*, float)
  [21] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [22] Parse::do_call()
  [23] Parse::do_one_block()
  [24] Parse::do_all_blocks()
  [25] Parse::Parse(JVMState*, ciMethod*, float)
  [26] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [27] Parse::do_call()
  [28] Parse::do_one_block()
  [29] Parse::do_all_blocks()
  [30] Parse::Parse(JVMState*, ciMethod*, float)
  [31] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [32] PredictedCallGenerator::generate(JVMState*)
  [33] Parse::do_call()
  [34] Parse::do_one_block()
  [35] Parse::do_all_blocks()
  [36] Parse::Parse(JVMState*, ciMethod*, float)
  [37] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [38] PredictedCallGenerator::generate(JVMState*)
  [39] Parse::do_call()
  [40] Parse::do_one_block()
  [41] Parse::do_all_blocks()
  [42] Parse::Parse(JVMState*, ciMethod*, float)
  [43] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [44] PredictedCallGenerator::generate(JVMState*)
  [45] Parse::do_call()
  [46] Parse::do_one_block()
  [47] Parse::do_all_blocks()
  [48] Parse::Parse(JVMState*, ciMethod*, float)
  [49] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [50] PredictedCallGenerator::generate(JVMState*)
  [51] Parse::do_call()
  [52] Parse::do_one_block()
  [53] Parse::do_all_blocks()
  [54] Parse::Parse(JVMState*, ciMethod*, float)
  [55] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [56] PredictedCallGenerator::generate(JVMState*)
  [57] Parse::do_call()
  [58] Parse::do_one_block()
  [59] Parse::do_all_blocks()
  [60] Parse::Parse(JVMState*, ciMethod*, float)
  [61] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [62] PredictedCallGenerator::generate(JVMState*)
  [63] PredictedCallGenerator::generate(JVMState*)
  [64] Parse::do_call()
  [65] Parse::do_one_block()
  [66] Parse::do_all_blocks()
  [67] Parse::Parse(JVMState*, ciMethod*, float)
  [68] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [69] PredictedCallGenerator::generate(JVMState*)
  [70] Parse::do_call()
  [71] Parse::do_one_block()
  [72] Parse::do_all_blocks()
  [73] Parse::Parse(JVMState*, ciMethod*, float)
  [74] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [75] PredictedCallGenerator::generate(JVMState*)
  [76] Parse::do_call()
  [77] Parse::do_one_block()
  [78] Parse::do_all_blocks()
  [79] Parse::Parse(JVMState*, ciMethod*, float)
  [80] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [81] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [82] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [83] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [84] CompileBroker::compiler_thread_loop()
  [85] JavaThread::thread_main_inner()
  [86] Thread::call_run()
  [87] thread_native_entry(Thread*)
  [88] start_thread

--- 3332193 ns (0.20%), 330 samples
  [ 0] .annobin__ZN12PhaseChaitin16gather_lrg_masksEb.constprop.0.start
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 3262250 ns (0.19%), 324 samples
  [ 0] NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
  [ 1] PhaseIdealLoop::Dominators()
  [ 2] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 3] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 4] Compile::Optimize()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 3240481 ns (0.19%), 321 samples
  [ 0] PhaseCFG::schedule_early(VectorSet&, Node_Stack&)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 3226660 ns (0.19%), 320 samples
  [ 0] IndexSetIterator::advance_and_next()
  [ 1] PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
  [ 2] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 3] PhaseChaitin::Register_Allocate()
  [ 4] Compile::Code_Gen()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 3148072 ns (0.18%), 310 samples
  [ 0] Compile::remove_useless_nodes(Unique_Node_List&)
  [ 1] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 2] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 3] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 4] CompileBroker::compiler_thread_loop()
  [ 5] JavaThread::thread_main_inner()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 3122771 ns (0.18%), 245 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseGVN::transform_no_reclaim(Node*)
  [ 6] GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool)
  [ 7] BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
  [ 8] .annobin__ZNK18ModRefBarrierSetC217store_at_resolvedER8C2AccessR13C2AccessValue.start
  [ 9] BarrierSetC2::store_at(C2Access&, C2AccessValue&) const
  [10] GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long)
  [11] Parse::do_put_xxx(Node*, ciField*, bool)
  [12] Parse::do_field_access(bool, bool)
  [13] Parse::do_one_block()
  [14] Parse::do_all_blocks()
  [15] Parse::Parse(JVMState*, ciMethod*, float)
  [16] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [17] Parse::do_call()
  [18] Parse::do_one_block()
  [19] Parse::do_all_blocks()
  [20] Parse::Parse(JVMState*, ciMethod*, float)
  [21] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [22] Parse::do_call()
  [23] Parse::do_one_block()
  [24] Parse::do_all_blocks()
  [25] Parse::Parse(JVMState*, ciMethod*, float)
  [26] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [27] Parse::do_call()
  [28] Parse::do_one_block()
  [29] Parse::do_all_blocks()
  [30] Parse::Parse(JVMState*, ciMethod*, float)
  [31] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [32] PredictedCallGenerator::generate(JVMState*)
  [33] Parse::do_call()
  [34] Parse::do_one_block()
  [35] Parse::do_all_blocks()
  [36] Parse::Parse(JVMState*, ciMethod*, float)
  [37] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [38] PredictedCallGenerator::generate(JVMState*)
  [39] Parse::do_call()
  [40] Parse::do_one_block()
  [41] Parse::do_all_blocks()
  [42] Parse::Parse(JVMState*, ciMethod*, float)
  [43] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [44] PredictedCallGenerator::generate(JVMState*)
  [45] Parse::do_call()
  [46] Parse::do_one_block()
  [47] Parse::do_all_blocks()
  [48] Parse::Parse(JVMState*, ciMethod*, float)
  [49] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [50] PredictedCallGenerator::generate(JVMState*)
  [51] Parse::do_call()
  [52] Parse::do_one_block()
  [53] Parse::do_all_blocks()
  [54] Parse::Parse(JVMState*, ciMethod*, float)
  [55] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [56] PredictedCallGenerator::generate(JVMState*)
  [57] PredictedCallGenerator::generate(JVMState*)
  [58] Parse::do_call()
  [59] Parse::do_one_block()
  [60] Parse::do_all_blocks()
  [61] Parse::Parse(JVMState*, ciMethod*, float)
  [62] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [63] PredictedCallGenerator::generate(JVMState*)
  [64] Parse::do_call()
  [65] Parse::do_one_block()
  [66] Parse::do_all_blocks()
  [67] Parse::Parse(JVMState*, ciMethod*, float)
  [68] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [69] PredictedCallGenerator::generate(JVMState*)
  [70] Parse::do_call()
  [71] Parse::do_one_block()
  [72] Parse::do_all_blocks()
  [73] Parse::Parse(JVMState*, ciMethod*, float)
  [74] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [75] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [76] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [77] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [78] CompileBroker::compiler_thread_loop()
  [79] JavaThread::thread_main_inner()
  [80] Thread::call_run()
  [81] thread_native_entry(Thread*)
  [82] start_thread

--- 2989670 ns (0.17%), 296 samples
  [ 0] PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)
  [ 1] Compile::Code_Gen()
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 2981370 ns (0.17%), 293 samples
  [ 0] jdk.internal.misc.Unsafe.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 2] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 3] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 4] havlak.HavlakLoopFinder.findLoops
  [ 5] havlak.LoopTesterApp.findLoops
  [ 6] havlak.LoopTesterApp.main
  [ 7] Havlak.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 2975230 ns (0.17%), 293 samples
  [ 0] Compile::identify_useful_nodes(Unique_Node_List&)
  [ 1] PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber)
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 2908970 ns (0.17%), 286 samples
  [ 0] PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
  [ 1] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2880201 ns (0.17%), 287 samples
  [ 0] PhaseChaitin::Select()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2825371 ns (0.17%), 275 samples
  [ 0] LinearScan::build_intervals()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2812220 ns (0.16%), 277 samples
  [ 0] jdk.internal.misc.Unsafe.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 2] java.lang.invoke.LambdaForm$DMH.0x0000000800c0d000.newInvokeSpecial
  [ 3] java.lang.invoke.LambdaForm$MH.0x0000000800c0d800.linkToTargetMethod
  [ 4] havlak.HavlakLoopFinder.stepD
  [ 5] havlak.HavlakLoopFinder.findLoops
  [ 6] havlak.LoopTesterApp.findLoops
  [ 7] havlak.LoopTesterApp.main
  [ 8] Havlak.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 2804020 ns (0.16%), 279 samples
  [ 0] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2780242 ns (0.16%), 276 samples
  [ 0] itable stub
  [ 1] som.Vector.hasSome
  [ 2] som.Set.hasSome
  [ 3] som.IdentitySet.contains
  [ 4] som.Set.add
  [ 5] havlak.SimpleLoop.addChildLoop
  [ 6] havlak.SimpleLoop.setParent
  [ 7] havlak.LoopStructureGraph.lambda$calculateNestingLevel$0
  [ 8] havlak.LoopStructureGraph$$Lambda$12.0x0000000800c09f90.apply
  [ 9] som.Vector.forEach
  [10] havlak.LoopStructureGraph.calculateNestingLevel
  [11] havlak.LoopTesterApp.main
  [12] Havlak.innerBenchmarkLoop
  [13] Run.measure
  [14] Run.doRuns
  [15] Run.runBenchmark
  [16] Harness.main

--- 2764751 ns (0.16%), 275 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseIterGVN::transform_old(Node*)
  [ 6] PhaseIterGVN::optimize()
  [ 7] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 8] Compile::Optimize()
  [ 9] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [10] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [11] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [12] CompileBroker::compiler_thread_loop()
  [13] JavaThread::thread_main_inner()
  [14] Thread::call_run()
  [15] thread_native_entry(Thread*)
  [16] start_thread

--- 2732613 ns (0.16%), 271 samples
  [ 0] PhaseIdealLoop::get_early_ctrl(Node*)
  [ 1] PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
  [ 2] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 3] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 4] Compile::Optimize()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2721230 ns (0.16%), 270 samples
  [ 0] PhaseCFG::schedule_pinned_nodes(VectorSet&)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2713600 ns (0.16%), 269 samples
  [ 0] som.Vector.<init>
  [ 1] som.Set.<init>
  [ 2] som.Set.<init>
  [ 3] havlak.HavlakLoopFinder.findLoops
  [ 4] havlak.LoopTesterApp.findLoops
  [ 5] havlak.LoopTesterApp.main
  [ 6] Havlak.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 2663581 ns (0.16%), 263 samples
  [ 0] PhaseCFG::insert_anti_dependences(Block*, Node*, bool)
  [ 1] PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
  [ 2] PhaseCFG::global_code_motion()
  [ 3] PhaseCFG::do_global_code_motion()
  [ 4] Compile::Code_Gen()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2635010 ns (0.15%), 260 samples
  [ 0] PhaseIdealLoop::build_loop_tree_impl(Node*, int)
  [ 1] PhaseIdealLoop::build_loop_tree()
  [ 2] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 3] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 4] Compile::Optimize()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2604310 ns (0.15%), 254 samples
  [ 0] MemAllocator::allocate() const
  [ 1] InstanceKlass::allocate_instance(JavaThread*)
  [ 2] .annobin_Unsafe_AllocateInstance.start
  [ 3] jdk.internal.misc.Unsafe.allocateInstance
  [ 4] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 5] java.lang.invoke.LambdaForm$DMH.0x0000000800c0d000.newInvokeSpecial
  [ 6] java.lang.invoke.LambdaForm$MH.0x0000000800c0d800.linkToTargetMethod
  [ 7] havlak.HavlakLoopFinder.stepD
  [ 8] havlak.HavlakLoopFinder.findLoops
  [ 9] havlak.LoopTesterApp.findLoops
  [10] havlak.LoopTesterApp.main
  [11] Havlak.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 2554390 ns (0.15%), 251 samples
  [ 0] __memset_avx2_unaligned_erms
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2543721 ns (0.15%), 251 samples
  [ 0] Matcher::Label_Root(Node const*, State*, Node*, Node*&)
  [ 1] Matcher::Label_Root(Node const*, State*, Node*, Node*&)
  [ 2] Matcher::match_tree(Node const*)
  [ 3] Matcher::xform(Node*, int)
  [ 4] Matcher::match()
  [ 5] Compile::Code_Gen()
  [ 6] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 7] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 8] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 9] CompileBroker::compiler_thread_loop()
  [10] JavaThread::thread_main_inner()
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 2496010 ns (0.15%), 248 samples
  [ 0] PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2471382 ns (0.14%), 242 samples
  [ 0] havlak.HavlakLoopFinder.stepD
  [ 1] havlak.HavlakLoopFinder.findLoops
  [ 2] havlak.LoopTesterApp.findLoops
  [ 3] havlak.LoopTesterApp.main
  [ 4] Havlak.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2391320 ns (0.14%), 238 samples
  [ 0] Node::dominates(Node*, Node_List&)
  [ 1] MemNode::all_controls_dominate(Node*, Node*) [clone .part.0]
  [ 2] InitializeNode::detect_init_independence(Node*, PhaseGVN*)
  [ 3] InitializeNode::can_capture_store(StoreNode*, PhaseGVN*, bool) [clone .part.0]
  [ 4] StoreNode::Ideal(PhaseGVN*, bool)
  [ 5] PhaseGVN::transform_no_reclaim(Node*)
  [ 6] GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool)
  [ 7] BarrierSetC2::store_at_resolved(C2Access&, C2AccessValue&) const
  [ 8] BarrierSetC2::store_at(C2Access&, C2AccessValue&) const
  [ 9] GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long)
  [10] Parse::do_put_xxx(Node*, ciField*, bool)
  [11] Parse::do_field_access(bool, bool)
  [12] Parse::do_one_block()
  [13] Parse::do_all_blocks()
  [14] Parse::Parse(JVMState*, ciMethod*, float)
  [15] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [16] Parse::do_call()
  [17] Parse::do_one_block()
  [18] Parse::do_all_blocks()
  [19] Parse::Parse(JVMState*, ciMethod*, float)
  [20] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [21] Parse::do_call()
  [22] Parse::do_one_block()
  [23] Parse::do_all_blocks()
  [24] Parse::Parse(JVMState*, ciMethod*, float)
  [25] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [26] Parse::do_call()
  [27] Parse::do_one_block()
  [28] Parse::do_all_blocks()
  [29] Parse::Parse(JVMState*, ciMethod*, float)
  [30] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [31] PredictedCallGenerator::generate(JVMState*)
  [32] Parse::do_call()
  [33] Parse::do_one_block()
  [34] Parse::do_all_blocks()
  [35] Parse::Parse(JVMState*, ciMethod*, float)
  [36] .annobin__ZN14ParseGenerator8generateEP8JVMState.start
  [37] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [38] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [39] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [40] CompileBroker::compiler_thread_loop()
  [41] JavaThread::thread_main_inner()
  [42] Thread::call_run()
  [43] thread_native_entry(Thread*)
  [44] start_thread

--- 2319071 ns (0.14%), 213 samples
  [ 0] PhaseIterGVN::add_users_to_worklist(Node*)
  [ 1] PhaseIterGVN::transform_old(Node*)
  [ 2] PhaseIterGVN::optimize()
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2278551 ns (0.13%), 227 samples
  [ 0] PhaseIFG::SquareUp()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2252950 ns (0.13%), 224 samples
  [ 0] PhaseChaitin::build_ifg_virtual()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 2241590 ns (0.13%), 223 samples
  [ 0] Node::pinned() const
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2211181 ns (0.13%), 220 samples
  [ 0] PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2204011 ns (0.13%), 217 samples
  [ 0] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 2] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 3] havlak.HavlakLoopFinder.findLoops
  [ 4] havlak.LoopTesterApp.findLoops
  [ 5] havlak.LoopTesterApp.main
  [ 6] Havlak.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 2182660 ns (0.13%), 218 samples
  [ 0] Node::is_CFG() const
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2178331 ns (0.13%), 214 samples
  [ 0] LinearScan::allocate_registers()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2147460 ns (0.13%), 212 samples
  [ 0] PhaseIFG::effective_degree(unsigned int) const
  [ 1] PhaseIFG::Compute_Effective_Degree()
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 2133990 ns (0.12%), 207 samples
  [ 0] MemAllocator::allocate() const
  [ 1] InstanceKlass::allocate_instance(JavaThread*)
  [ 2] .annobin_Unsafe_AllocateInstance.start
  [ 3] jdk.internal.misc.Unsafe.allocateInstance
  [ 4] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 5] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 6] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 7] havlak.HavlakLoopFinder.findLoops
  [ 8] havlak.LoopTesterApp.findLoops
  [ 9] havlak.LoopTesterApp.main
  [10] Havlak.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 2131170 ns (0.12%), 207 samples
  [ 0] .annobin__ZN16LinearScanWalker14alloc_free_regEP8Interval.start
  [ 1] LinearScanWalker::activate_current()
  [ 2] LinearScan::allocate_registers()
  [ 3] LinearScan::do_linear_scan()
  [ 4] Compilation::emit_lir()
  [ 5] Compilation::compile_java_method()
  [ 6] Compilation::compile_method()
  [ 7] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 8] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 2077791 ns (0.12%), 205 samples
  [ 0] Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]
  [ 1] Compile::Optimize()
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 2041081 ns (0.12%), 201 samples
  [ 0] Matcher::Label_Root(Node const*, State*, Node*, Node*&)
  [ 1] Matcher::match_tree(Node const*)
  [ 2] Matcher::xform(Node*, int)
  [ 3] Matcher::match()
  [ 4] Compile::Code_Gen()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 2015910 ns (0.12%), 200 samples
  [ 0] som.Dictionary.transferEntries
  [ 1] som.Dictionary.resize
  [ 2] som.Dictionary.atPut
  [ 3] havlak.HavlakLoopFinder.lambda$initAllNodes$0
  [ 4] havlak.HavlakLoopFinder$$Lambda$2.0x0000000800c08800.apply
  [ 5] som.Vector.forEach
  [ 6] havlak.HavlakLoopFinder.initAllNodes
  [ 7] havlak.HavlakLoopFinder.findLoops
  [ 8] havlak.LoopTesterApp.findLoops
  [ 9] havlak.LoopTesterApp.main
  [10] Havlak.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 2011890 ns (0.12%), 199 samples
  [ 0] PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&, double) [clone .part.0] [clone .isra.0]
  [ 1] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 1984411 ns (0.12%), 196 samples
  [ 0] PhaseIFG::remove_node(unsigned int)
  [ 1] PhaseChaitin::Simplify()
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 1982190 ns (0.12%), 193 samples
  [ 0] PhaseIterGVN::optimize()
  [ 1] Compile::Optimize()
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 1973430 ns (0.12%), 194 samples
  [ 0] PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 1942120 ns (0.11%), 195 samples
  [ 0] PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
  [ 1] .annobin__ZN14PhaseIdealLoop18build_and_optimizeEv.start
  [ 2] Compile::Optimize()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

          ns  percent  samples  top
  ----------  -------  -------  ---
    40613907    2.38%     4021  havlak.HavlakLoopFinder.findLoops
    36866791    2.16%     3491  Node::dominates(Node*, Node_List&)
    36506265    2.14%     3618  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
    28432303    1.66%     2817  som.Vector.<init>
    22470355    1.32%     2230  PhaseChaitin::Split(unsigned int, ResourceArea*)
    19146426    1.12%     1887  .annobin_Unsafe_AllocateInstance.start
    16810782    0.98%     1661  IndexSetIterator::advance_and_next()
    16562193    0.97%     1650  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
    16200805    0.95%     1605  PhaseChaitin::gather_lrg_masks(bool)
    15710684    0.92%     1579  som.Vector.forEach
    15543926    0.91%     1544  PhaseIdealLoop::build_loop_early(VectorSet&, Node_List&, Node_Stack&)
    15037685    0.88%     1494  PhaseLive::compute(unsigned int)
    14455953    0.85%     1436  havlak.HavlakLoopFinder.doDFS
    14038542    0.82%     1368  __tls_get_addr
    13969460    0.82%     1381  jdk.internal.misc.Unsafe.allocateInstance
    13787985    0.81%     1369  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
    13518106    0.79%     1383  havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$4
    12081006    0.71%     1215  havlak.HavlakLoopFinder.lambda$processEdges$1
    11920623    0.70%     1183  PhaseChaitin::post_allocate_copy_removal()
    11746004    0.69%     1164  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
    11171217    0.65%     1143  havlak.HavlakLoopFinder$$Lambda$5.0x0000000800c09078.apply
    11095121    0.65%     1101  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
    10295373    0.60%     1007  MemAllocator::allocate() const
    10278453    0.60%     1023  som.Dictionary.transferEntries
     9840002    0.58%      998  som.Vector.append
     9764074    0.57%      987  itable stub
     9085934    0.53%      901  PhaseIdealLoop::Dominators()
     8982293    0.53%      893  java.lang.invoke.DirectMethodHandle.allocateInstance
     8908041    0.52%      884  Matcher::xform(Node*, int)
     8907614    0.52%      868  __memset_avx2_unaligned_erms
     8892001    0.52%      868  Dict::Insert(void*, void*, bool)
     8492303    0.50%      842  PhaseAggressiveCoalesce::insert_copies(Matcher&)
     7958615    0.47%      793  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
     7800292    0.46%      775  PhaseIdealLoop::build_loop_tree()
     7756744    0.45%      764  NodeHash::hash_find_insert(Node*)
     7540843    0.44%      747  Interpreter
     7539601    0.44%      737  JNIHandleBlock::allocate_handle(oopDesc*, AllocFailStrategy::AllocFailEnum)
     7510751    0.44%      748  Arena::contains(void const*) const
     7035413    0.41%      698  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
     6888570    0.40%      671  ObjAllocator::initialize(HeapWordImpl**) const
     6579141    0.39%      651  PhaseIdealLoop::is_dominator(Node*, Node*)
     6369442    0.37%      603  PhaseIterGVN::subsume_node(Node*, Node*)
     6277162    0.37%      614  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
     6213923    0.36%      453  _raw_spin_unlock_irqrestore_[k]
     6207432    0.36%      611  Unique_Node_List::remove(Node*)
     6037583    0.35%      571  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     5970233    0.35%      574  PhaseIterGVN::add_users_to_worklist(Node*)
     5957383    0.35%      587  PhaseCCP::analyze()
     5920983    0.35%      585  PhaseIterGVN::transform_old(Node*)
     5869481    0.34%      576  Matcher::find_shared(Node*)
     5770150    0.34%      570  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI13InstanceKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
     5708990    0.33%      570  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
     5432710    0.32%      536  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
     5404073    0.32%      522  MemAllocator::Allocation::notify_allocation_jvmti_sampler()
     5324521    0.31%      525  Compile::identify_useful_nodes(Unique_Node_List&)
     5310641    0.31%      524  PhaseOutput::BuildOopMaps()
     5238093    0.31%      516  havlak.UnionFindNode.getBb
     5237875    0.31%      515  g1_post_barrier_slow
     5048880    0.30%      499  Node::is_CFG() const
     4930560    0.29%      476  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     4922613    0.29%      484  InstanceKlass::check_valid_for_instantiation(bool, JavaThread*)
     4918304    0.29%      486  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
     4889611    0.29%      484  IndexSet::alloc_block_containing(unsigned int)
     4784601    0.28%      474  PhaseChaitin::merge_multidefs()
     4774101    0.28%      474  .annobin__ZN22Node_Backward_Iterator4nextEv.start
     4733840    0.28%      469  som.Vector.size
     4731101    0.28%      466  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
     4685132    0.27%      464  PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
     4664242    0.27%      458  havlak.HavlakLoopFinder.stepD
     4659501    0.27%      460  Matcher::match_tree(Node const*)
     4521992    0.26%      439  DebugInformationRecorder::find_sharable_decode_offset(int)
     4520621    0.26%      442  Node::clone() const
     4503230    0.26%      436  Type::cmp(Type const*, Type const*)
     4477633    0.26%      442  som.Vector.at
     4442830    0.26%      452  som.Vector.hasSome
     4287160    0.25%      419  __memmove_avx_unaligned_erms
     4243873    0.25%      423  havlak.HavlakLoopFinder.lambda$initAllNodes$0
     4235202    0.25%      418  Compile::remove_useless_nodes(Unique_Node_List&)
     4178371    0.24%      401  ciObjectFactory::get_metadata(Metadata*)
     4040801    0.24%      385  Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
     4024101    0.24%      402  IndexSet::initialize(unsigned int)
     3993220    0.23%      396  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
     3938690    0.23%      365  clear_page_rep_[k]
     3916671    0.23%      386  PhaseCFG::sched_call(Block*, unsigned int, Node_List&, GrowableArray<int>&, MachCallNode*, VectorSet&)
     3903590    0.23%      388  NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
     3876900    0.23%      385  [no_Java_frame]
     3808170    0.22%      372  MemAllocator::Allocation::check_out_of_memory()
     3795341    0.22%      373  InstanceKlass::allocate_instance(JavaThread*)
     3768090    0.22%      371  som.Vector.isEmpty
     3585310    0.21%      354  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
     3583861    0.21%      324  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
     3564093    0.21%      353  PhaseIdealLoop::get_early_ctrl(Node*)
     3519842    0.21%      356  havlak.UnionFindNode.findSet
     3464020    0.20%      344  Node::pinned() const
     3390463    0.20%      335  .annobin__ZN12PhaseChaitin16gather_lrg_masksEb.constprop.0.start
     3258410    0.19%      316  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
     3240481    0.19%      321  PhaseCFG::schedule_early(VectorSet&, Node_Stack&)
     3224991    0.19%      300  vmSymbols::find_sid(Symbol const*)
     3154081    0.18%      317  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
     3107800    0.18%      306  PhaseIdealLoop::build_loop_tree_impl(Node*, int)
     3096990    0.18%      306  som.Set.<init>
     3027241    0.18%      296  Node::out_grow(unsigned int)
     3024580    0.18%      299  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)
     2974611    0.17%      290  Node::add_req(Node*)
     2960861    0.17%      294  havlak.HavlakLoopFinder.identifyEdges
     2955020    0.17%      285  Node::Node(unsigned int)
     2926460    0.17%      287  .annobin__ZN14AccessInternal19PostRuntimeDispatchIN12G1BarrierSet13AccessBarrierILm2646116ES1_EELNS_11BarrierTypeE0ELm2646116EE18oop_access_barrierEPvP7oopDesc.start
     2910601    0.17%      290  PhaseChaitin::Select()
     2908970    0.17%      286  PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
     2880551    0.17%      285  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)
     2855481    0.17%      278  LinearScan::build_intervals()
     2838570    0.17%      274  .annobin__ZNK7PhiNode5ValueEP8PhaseGVN.start
     2825890    0.17%      274  Type::hashcons()
     2792430    0.16%      270  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
     2731280    0.16%      271  PhaseCFG::schedule_pinned_nodes(VectorSet&)
     2713730    0.16%      267  PhiNode::Ideal(PhaseGVN*, bool)
     2663191    0.16%      264  Node::unique_ctrl_out() const
     2645022    0.15%      248  do_user_addr_fault_[k]
     2620900    0.15%      257  PhaseIterGVN::optimize()
     2617180    0.15%      259  MultiNode::is_CFG() const
     2603470    0.15%      261  havlak.HavlakLoopFinder.lambda$stepD$6
     2557661    0.15%      249  PhaseIterGVN::remove_globally_dead_node(Node*)
     2483150    0.15%      190  rmqueue_[k]
     2467921    0.14%      242  PhaseGVN::transform_no_reclaim(Node*)
     2446410    0.14%      243  CProjNode::is_block_proj() const
     2404510    0.14%      243  havlak.SimpleLoop.<init>
     2373480    0.14%      233  TypeNode::bottom_type() const
     2312990    0.14%      219  SymbolTable::lookup_shared(char const*, int, unsigned int)
     2298390    0.13%      220  PhiNode::unique_input(PhaseTransform*, bool)
     2289860    0.13%      227  .annobin__ZNK8MachNode9ideal_regEv.start
     2288031    0.13%      226  PhaseIFG::effective_degree(unsigned int) const
     2278551    0.13%      227  PhaseIFG::SquareUp()
     2263040    0.13%      225  PhaseChaitin::build_ifg_virtual()
     2234080    0.13%      217  AddPNode::bottom_type() const
     2221431    0.13%      221  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
     2187571    0.13%      215  LinearScan::allocate_registers()
     2161320    0.13%      210  .annobin__ZN16LinearScanWalker14alloc_free_regEP8Interval.start
     2134851    0.12%      211  LIR_OpVisitState::visit(LIR_Op*)
     2114280    0.12%      209  Node::jvms() const
     2094171    0.12%      206  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
     2091382    0.12%      203  MergeMemNode::MergeMemNode(Node*)
     2091260    0.12%      207  PhiNode::Opcode() const
     2090450    0.12%      204  Node::remove_dead_region(PhaseGVN*, bool)
     2078671    0.12%      207  ProjNode::pinned() const
     2077791    0.12%      205  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]
     2052200    0.12%      203  PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&, double) [clone .part.0] [clone .isra.0]
     2051052    0.12%      198  Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum)
     2040060    0.12%      202  PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool)
     2024911    0.12%      202  som.IdentitySet$$Lambda$10.0x0000000800c09b40.test
     2004371    0.12%      198  PhaseIFG::remove_node(unsigned int)
     2000791    0.12%      188  Dictionary::find(unsigned int, Symbol*, Handle)
     1983600    0.12%      195  PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*)
     1941670    0.11%      188  State::_sub_Op_AddP(Node const*)
     1914241    0.11%      189  MachNode::rematerialize() const
     1907570    0.11%      187  ciInstanceKlass::get_field_by_offset(int, bool)
     1877081    0.11%      185  havlak.HavlakLoopFinder$$Lambda$5.0x0000000800c09078.<init>
     1875250    0.11%      183  TypeNode::hash() const
     1866724    0.11%      185  I2C/C2I adapters(0xb)
     1857332    0.11%      182  PhaseCCP::transform(Node*)
     1852681    0.11%      184  PhaseIFG::re_insert(unsigned int)
     1844110    0.11%      184  som.Dictionary.atPut
     1829431    0.11%      178  __memmove_avx_unaligned
     1816151    0.11%      166  MergeMemNode::Ideal(PhaseGVN*, bool)
     1786170    0.10%      174  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1768630    0.10%      174  __tls_get_addr@plt
     1760590    0.10%      175  PhaseChaitin::Simplify()
     1760210    0.10%      169  Compile::copy_node_notes_to(Node*, Node*)
     1755810    0.10%      171  OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*)
     1749440    0.10%      169  TypeInstPtr::add_offset(long) const
     1736130    0.10%      159  ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray<PhiNode*>&, bool&)
     1731870    0.10%      171  RegionNode::is_CFG() const
     1730731    0.10%      172  PhiNode::is_unsafe_data_reference(Node*) const [clone .part.0]
     1720010    0.10%      167  __memset_avx2_unaligned
     1719971    0.10%      170  som.Vector.removeFirst
     1714720    0.10%      167  State::MachOperGenerator(int)
     1707662    0.10%      171  java.util.Arrays.copyOf
     1687361    0.10%      168  ConnectionGraph::compute_escape()
     1671380    0.10%      167  PhaseOutput::shorten_branches(unsigned int*)
     1653531    0.10%      159  TypeInstPtr::hash() const
     1650192    0.10%      159  LinearScan::compute_local_live_sets()
     1633202    0.10%      157  TypeInstPtr::eq(Type const*) const
     1622510    0.09%      161  MachNode::in_RegMask(unsigned int) const
     1610690    0.09%      159  IndexSet::IndexSet(IndexSet*)
     1595990    0.09%      153  .annobin__ZN12methodHandleD2Ev.start
     1574930    0.09%      156  PhaseIdealLoop::compute_early_ctrl(Node*, Node*)
     1562240    0.09%      155  PhaseIdealLoop::split_if_with_blocks_pre(Node*)
     1550821    0.09%      152  PhaseIdealLoop::try_sink_out_of_loop(Node*)
     1538350    0.09%      153  PhaseCFG::build_cfg()
     1517661    0.09%      151  PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*)
     1502801    0.09%      149  ProjNode::is_CFG() const
     1502260    0.09%      153  som.Set.hasSome
     1493810    0.09%      145  State::MachNodeGenerator(int)
     1490640    0.09%      145  MemAllocator::Allocation::notify_allocation_jfr_sampler()
     1487670    0.09%      141  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
     1480260    0.09%      138  ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum)
     1473810    0.09%      125  syscall_enter_from_user_mode_[k]
     1460010    0.09%      144  RegMask::is_misaligned_pair() const
     1459860    0.09%      142  Node::hash() const
     1444300    0.08%      142  oopDesc::metadata_field(int) const
     1431241    0.08%      137  Node::replace_edge(Node*, Node*, PhaseGVN*)
