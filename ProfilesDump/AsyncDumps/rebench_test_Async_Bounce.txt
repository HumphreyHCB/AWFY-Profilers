--- Execution profile ---
Total samples       : 1509124
unknown_Java        : 285 (0.02%)
not_walkable_Java   : 636 (0.04%)
deoptimization      : 139 (0.01%)

--- 3981768214 ns (26.07%), 395286 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 2553087076 ns (16.71%), 253462 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1788901304 ns (11.71%), 176738 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1469999729 ns (9.62%), 145953 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1155240240 ns (7.56%), 114194 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 878569764 ns (5.75%), 87229 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 658706849 ns (4.31%), 65406 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 442917738 ns (2.90%), 43979 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 237711953 ns (1.56%), 23606 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 218248324 ns (1.43%), 21590 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 200780237 ns (1.31%), 19790 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 120064086 ns (0.79%), 11921 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 88240112 ns (0.58%), 8731 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 80741071 ns (0.53%), 7938 samples
  [ 0] java.util.Arrays.setAll
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 78334343 ns (0.51%), 7746 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 75231760 ns (0.49%), 7471 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 72263400 ns (0.47%), 7157 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 69860989 ns (0.46%), 6879 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 59678389 ns (0.39%), 5931 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 56420081 ns (0.37%), 5596 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 56237678 ns (0.37%), 5579 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 52779255 ns (0.35%), 5189 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 36655545 ns (0.24%), 3625 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 35932320 ns (0.24%), 3565 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 25909648 ns (0.17%), 2549 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 22680226 ns (0.15%), 2251 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 21271733 ns (0.14%), 2112 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 20673536 ns (0.14%), 2036 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 19777991 ns (0.13%), 1929 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 19408335 ns (0.13%), 1923 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 18955815 ns (0.12%), 1866 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 18522394 ns (0.12%), 1808 samples
  [ 0] Bounce.lambda$benchmark$0
  [ 1] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 2] java.util.Arrays.setAll
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 18044833 ns (0.12%), 1774 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 17076954 ns (0.11%), 1688 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 14844905 ns (0.10%), 1472 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 13599223 ns (0.09%), 1353 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 12144155 ns (0.08%), 1199 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 9912804 ns (0.06%), 967 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 9680191 ns (0.06%), 963 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 9210293 ns (0.06%), 910 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 8139333 ns (0.05%), 774 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 8099042 ns (0.05%), 804 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 7778675 ns (0.05%), 755 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 7121525 ns (0.05%), 706 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 6448122 ns (0.04%), 621 samples
  [ 0] Interpreter
  [ 1] [not_walkable_Java]

--- 6362761 ns (0.04%), 613 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 6360593 ns (0.04%), 630 samples
  [ 0] java.util.Arrays.setAll
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 5649202 ns (0.04%), 558 samples
  [ 0] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 1] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 2] Bounce.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 5598920 ns (0.04%), 556 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 4642470 ns (0.03%), 456 samples
  [ 0] Bounce$Ball.<init>
  [ 1] Bounce.lambda$benchmark$0
  [ 2] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 3] java.util.Arrays.setAll
  [ 4] Bounce.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 4127861 ns (0.03%), 410 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 3800093 ns (0.02%), 376 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 3428371 ns (0.02%), 325 samples
  [ 0] Benchmark.innerBenchmarkLoop
  [ 1] Run.measure
  [ 2] Run.doRuns
  [ 3] Run.runBenchmark
  [ 4] Harness.main

--- 3366311 ns (0.02%), 334 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 3200050 ns (0.02%), 318 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 3017570 ns (0.02%), 282 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
  [ 2] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 3] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 2512674 ns (0.02%), 125 samples
  [ 0] HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
  [ 1] .annobin__ZN23G1PrepareEvacuationTask4workEj.start
  [ 2] GangWorker::loop()
  [ 3] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] start_thread

--- 2365790 ns (0.02%), 234 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 2347091 ns (0.02%), 232 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 2292472 ns (0.02%), 201 samples
  [ 0] [no_Java_frame]

--- 2210070 ns (0.01%), 189 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 2201161 ns (0.01%), 218 samples
  [ 0] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 2] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2081331 ns (0.01%), 200 samples
  [ 0] LinearScan::build_intervals()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 1892520 ns (0.01%), 181 samples
  [ 0] Bounce.verifyResult
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1863630 ns (0.01%), 185 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1848601 ns (0.01%), 175 samples
  [ 0] LinearScan::allocate_registers()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 1799210 ns (0.01%), 177 samples
  [ 0] Bounce.lambda$benchmark$0
  [ 1] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 2] java.util.Arrays.setAll
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1682020 ns (0.01%), 150 samples
  [ 0] som.Random.next
  [ 1] Bounce$Ball.<init>
  [ 2] Bounce.lambda$benchmark$0
  [ 3] Bounce$$Lambda$2.0x0000000800c034f8.apply
  [ 4] java.util.Arrays.setAll
  [ 5] Bounce.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 1622911 ns (0.01%), 160 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1596100 ns (0.01%), 158 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1495140 ns (0.01%), 145 samples
  [ 0] LinearScanWalker::alloc_free_reg(Interval*)
  [ 1] LinearScanWalker::activate_current()
  [ 2] LinearScan::allocate_registers()
  [ 3] LinearScan::do_linear_scan()
  [ 4] Compilation::emit_lir()
  [ 5] Compilation::compile_java_method()
  [ 6] Compilation::compile_method()
  [ 7] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 8] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 1452680 ns (0.01%), 143 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1420870 ns (0.01%), 134 samples
  [ 0] LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 1358580 ns (0.01%), 136 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1317142 ns (0.01%), 130 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1315390 ns (0.01%), 123 samples
  [ 0] LinearScan::compute_local_live_sets()
  [ 1] LinearScan::do_linear_scan()
  [ 2] Compilation::emit_lir()
  [ 3] Compilation::compile_java_method()
  [ 4] Compilation::compile_method()
  [ 5] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 6] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 1309760 ns (0.01%), 129 samples
  [ 0] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 1] PhaseIdealLoop::build_and_optimize()
  [ 2] .annobin__ZN14PhaseIdealLoop8optimizeER12PhaseIterGVN12LoopOptsMode.start
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 1263710 ns (0.01%), 124 samples
  [ 0] .annobin__ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack.start
  [ 1] PhaseIdealLoop::build_and_optimize()
  [ 2] .annobin__ZN14PhaseIdealLoop8optimizeER12PhaseIterGVN12LoopOptsMode.start
  [ 3] Compile::Optimize()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 1238271 ns (0.01%), 123 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1237670 ns (0.01%), 123 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 1196781 ns (0.01%), 118 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1168021 ns (0.01%), 63 samples
  [ 0] __vfprintf_internal
  [ 1] [unknown]

--- 1163420 ns (0.01%), 113 samples
  [ 0] PhaseChaitin::gather_lrg_masks(bool)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 1159900 ns (0.01%), 97 samples
  [ 0] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 1] G1ParEvacuateFollowersClosure::do_void()
  [ 2] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 3] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 4] GangWorker::loop()
  [ 5] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] start_thread

--- 1145200 ns (0.01%), 97 samples
  [ 0] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 2] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 3] Bounce.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1126570 ns (0.01%), 4 samples
  [ 0] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
  [ 1] G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
  [ 2] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [ 3] HandleArea::oops_do(OopClosure*)
  [ 4] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [ 5] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 6] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 7] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 9] G1EvacuateRegionsBaseTask::work(unsigned int)
  [10] GangWorker::loop()
  [11] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] start_thread

--- 1075280 ns (0.01%), 95 samples
  [ 0] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 1] G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
  [ 2] G1ParEvacuateFollowersClosure::do_void()
  [ 3] .annobin__ZN21G1EvacuateRegionsTask21evacuate_live_objectsEP20G1ParScanThreadStatej.start
  [ 4] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 5] GangWorker::loop()
  [ 6] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] start_thread

--- 1049180 ns (0.01%), 100 samples
  [ 0] PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
  [ 1] PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
  [ 2] PhaseIdealLoop::build_and_optimize()
  [ 3] .annobin__ZN14PhaseIdealLoop8optimizeER12PhaseIterGVN12LoopOptsMode.start
  [ 4] Compile::Optimize()
  [ 5] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 6] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] start_thread

--- 926411 ns (0.01%), 89 samples
  [ 0] PhaseLive::compute(unsigned int)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 901670 ns (0.01%), 86 samples
  [ 0] Bounce.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 889760 ns (0.01%), 89 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 877160 ns (0.01%), 3 samples
  [ 0] G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
  [ 1] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [ 2] HandleArea::oops_do(OopClosure*)
  [ 3] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 876960 ns (0.01%), 4 samples
  [ 0] __memmove_avx_unaligned_erms
  [ 1] G1ParCopyClosure<(G1Barrier)0, false>::do_oop(oopDesc**)
  [ 2] HandleArea::oops_do(OopClosure*)
  [ 3] JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*)
  [ 4] Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
  [ 5] G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int)
  [ 6] G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int)
  [ 7] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 8] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 9] GangWorker::loop()
  [10] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [11] Thread::call_run()
  [12] thread_native_entry(Thread*)
  [13] start_thread

--- 857280 ns (0.01%), 84 samples
  [ 0] I2C/C2I adapters(0xb)
  [ 1] [unknown_Java]

--- 833371 ns (0.01%), 80 samples
  [ 0] PhaseChaitin::post_allocate_copy_removal()
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 823091 ns (0.01%), 80 samples
  [ 0] LinearScanWalker::free_collect_inactive_fixed(Interval*)
  [ 1] LinearScanWalker::alloc_free_reg(Interval*)
  [ 2] LinearScanWalker::activate_current()
  [ 3] LinearScan::allocate_registers()
  [ 4] LinearScan::do_linear_scan()
  [ 5] Compilation::emit_lir()
  [ 6] Compilation::compile_java_method()
  [ 7] Compilation::compile_method()
  [ 8] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 9] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [10] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [11] CompileBroker::compiler_thread_loop()
  [12] JavaThread::thread_main_inner()
  [13] Thread::call_run()
  [14] thread_native_entry(Thread*)
  [15] start_thread

--- 790470 ns (0.01%), 78 samples
  [ 0] Bounce$Ball.bounce
  [ 1] Bounce.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 757051 ns (0.00%), 73 samples
  [ 0] PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
  [ 1] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] start_thread

--- 737890 ns (0.00%), 71 samples
  [ 0] void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
  [ 1] G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
  [ 2] G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
  [ 3] G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool)
  [ 4] G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int)
  [ 5] G1EvacuateRegionsBaseTask::work(unsigned int)
  [ 6] GangWorker::loop()
  [ 7] .annobin__ZN19WorkGangBarrierSyncC2Ev.start
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

--- 721310 ns (0.00%), 69 samples
  [ 0] .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] start_thread

          ns  percent  samples  top
  ----------  -------  -------  ---
 11616341225   76.04%  1152561  Bounce$Ball.bounce
  2725471649   17.84%   269552  Bounce.benchmark
   258710133    1.69%    25539  Bounce$Ball.<init>
   123837576    0.81%    12179  som.Random.next
    87801414    0.57%     8637  java.util.Arrays.setAll
    20521604    0.13%     2004  Bounce.lambda$benchmark$0
    12287004    0.08%     1169  Benchmark.innerBenchmarkLoop
     6474800    0.04%      583  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     6467962    0.04%      623  Interpreter
     6400582    0.04%      632  java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
     4772011    0.03%      387  __tls_get_addr
     4013181    0.03%      380  java.lang.invoke.DirectMethodHandle.allocateInstance
     3632992    0.02%      321  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     3281362    0.02%      229  __memset_avx2_unaligned_erms
     2927860    0.02%      163  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
     2826710    0.02%       19  G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
     2794440    0.02%      143  [vdso]
     2781721    0.02%      257  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     2512674    0.02%      125  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
     2292472    0.02%      201  [no_Java_frame]
     2190680    0.01%      210  Bounce.verifyResult
     2091261    0.01%      201  LinearScan::build_intervals()
     2053331    0.01%      200  I2C/C2I adapters(0xb)
     1914133    0.01%      182  DebugInformationRecorder::find_sharable_decode_offset(int)
     1848601    0.01%      175  LinearScan::allocate_registers()
     1767731    0.01%      171  LIR_OpVisitState::visit(LIR_Op*)
     1666080    0.01%      148  vmSymbols::find_sid(Symbol const*)
     1655132    0.01%      147  ciObjectFactory::get_metadata(Metadata*)
     1634980    0.01%       72  __memmove_avx_unaligned_erms
     1600720    0.01%      158  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1521290    0.01%      145  PhaseChaitin::gather_lrg_masks(bool)
     1515350    0.01%      147  LinearScanWalker::alloc_free_reg(Interval*)
     1511461    0.01%       84  __vfprintf_internal
     1473490    0.01%      144  .annobin__ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack.start
     1420870    0.01%      134  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1315390    0.01%      123  LinearScan::compute_local_live_sets()
     1304240    0.01%      126  GraphBuilder::iterate_bytecodes_for_block(int)
     1257620    0.01%      105  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
     1256902    0.01%      119  PhaseLive::compute(unsigned int)
     1231500    0.01%      111  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1223920    0.01%      117  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     1213211    0.01%       94  __memset_avx2_unaligned
     1174420    0.01%      103  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
     1142710    0.01%       90  ___pthread_mutex_lock
     1115070    0.01%       72  CodeHeap::find_blob_unsafe(void*) const
     1044211    0.01%       72  _int_malloc
     1028541    0.01%       86  _dl_update_slotinfo
     1014010    0.01%      101  jdk.internal.org.objectweb.asm.Frame.execute
      979390    0.01%       92  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
      965590    0.01%       93  Dict::Insert(void*, void*, bool)
      958661    0.01%       93  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
      957970    0.01%       80  void G1ScanCardClosure::do_oop_work<narrowOop>(narrowOop*)
      953851    0.01%       94  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
      940931    0.01%       92  IndexSetIterator::advance_and_next()
      936730    0.01%       90  jdk.internal.org.objectweb.asm.ByteVector.putUTF8
      936671    0.01%       84  methodHandle::~methodHandle()
      934890    0.01%       90  ValueStack::values_do(ValueVisitor*)
      912320    0.01%       60  __GI___pthread_mutex_unlock_usercnt
      908870    0.01%       30  StatSamplerTask::task()
      871711    0.01%       56  os::free(void*)
      863031    0.01%       83  LinearScanWalker::free_collect_inactive_fixed(Interval*)
      856331    0.01%       77  Dictionary::find(unsigned int, Symbol*, Handle)
      833371    0.01%       80  PhaseChaitin::post_allocate_copy_removal()
      828110    0.01%       36  Mutex::lock_without_safepoint_check()
      827071    0.01%       82  ___pthread_mutex_trylock
      815690    0.01%       77  PhaseIdealLoop::Dominators()
      799060    0.01%       68  __GI___libc_malloc
      798760    0.01%       76  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
      784900    0.01%       75  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      783640    0.01%       78  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      758301    0.00%       74  jdk.internal.org.objectweb.asm.Frame.push
      742180    0.00%       69  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
      731230    0.00%       73  java.lang.invoke.MethodType.insertParameterTypes
      730570    0.00%       73  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
      721310    0.00%       69  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
      720250    0.00%       66  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
      713850    0.00%       62  .annobin__ZN8Interval9add_rangeEii.start
      712880    0.00%       71  PhaseIterGVN::transform_old(Node*)
      712130    0.00%       67  ValueMap::find_insert(Instruction*)
      712051    0.00%       67  PhaseChaitin::Split(unsigned int, ResourceArea*)
      711760    0.00%       69  I2C/C2I adapters(0xbb)
      708930    0.00%       22  .annobin__ZN12PeriodicTask14real_time_tickEi.start
      706890    0.00%       68  Type::cmp(Type const*, Type const*)
      698510    0.00%       67  Matcher::xform(Node*, int)
      694190    0.00%       65  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
      691570    0.00%       66  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
      681500    0.00%       63  java.util.Arrays.copyOf
      675800    0.00%       67  java.util.concurrent.ConcurrentHashMap.putVal
      672320    0.00%       62  CodeCache::find_blob(void*)
      661040    0.00%       66  jdk.internal.org.objectweb.asm.Type.getArgumentsAndReturnSizes
      655790    0.00%       53  void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceMirrorKlass, narrowOop>(G1ScanCardClosure*, oopDesc*, Klass*)
      654900    0.00%       64  NullCheckEliminator::iterate_one(BlockBegin*)
      654680    0.00%       14  Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*)
      652380    0.00%        8  Method::bcp_from(unsigned char*) const
      651420    0.00%       61  NodeHash::hash_find_insert(Node*)
      649180    0.00%       64  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      641640    0.00%       62  jdk.internal.org.objectweb.asm.SymbolTable.addConstantMemberReference
      641260    0.00%       60  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
      639871    0.00%       64  PhaseIterGVN::add_users_to_worklist(Node*)
      639570    0.00%       62  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
      638680    0.00%       30  ObjAllocator::initialize(HeapWordImpl**) const
      638590    0.00%       48  Relocation::pd_call_destination(unsigned char*)
      633920    0.00%       57  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
      625890    0.00%       59  Matcher::find_shared(Node*)
      618760    0.00%       58  java.lang.AbstractStringBuilder.append
      615840    0.00%       59  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
      610180    0.00%       59  PhaseCCP::analyze()
      608731    0.00%       60  java.lang.invoke.InvokerBytecodeGenerator.addMethod
      605510    0.00%        8  ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*)
      604740    0.00%       25  os::elapsed_counter()
      603500    0.00%        3  CompositeElapsedCounterSource::now()
      592110    0.00%       55  MemAllocator::allocate() const
      591240    0.00%       19  PerfLongVariant::sample()
      588250    0.00%       57  jdk.internal.org.objectweb.asm.SymbolTable$Entry.<init>
      582420    0.00%        4  SubTasksDone::try_claim_task(unsigned int)
      577190    0.00%       57  .annobin__ZNK4Node6is_CFGEv.start
      576150    0.00%       54  Node::clone() const
      575930    0.00%        6  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table25oop_oop_iterate_backwardsI19InstanceMirrorKlass9narrowOopEEvPS0_P7oopDescP5Klass.start
      574360    0.00%       41  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      569970    0.00%       56  java.lang.invoke.LambdaForm$Name.<init>
      568360    0.00%       35  clock_gettime@GLIBC_2.2.5
      565380    0.00%       55  java.lang.StringConcatHelper.prepend
      563990    0.00%       56  jdk.internal.org.objectweb.asm.SymbolTable.hash
      561031    0.00%       39  stringStream::write(char const*, unsigned long)
      558810    0.00%       53  I2C/C2I adapters(0xba)
      548661    0.00%       49  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
      545160    0.00%        7  G1CodeRootSet::contains(nmethod*)
      544890    0.00%        4  .annobin__ZN25G1ScanEvacuatedObjClosure11do_oop_workI9narrowOopEEvPT_.start
      542380    0.00%       34  __strchr_avx2
      539510    0.00%       50  LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
      531900    0.00%       51  java.lang.invoke.LambdaForm$MH.0x0000000800c08800.invoke
      530700    0.00%       47  __tls_get_addr@plt
      527771    0.00%       47  SpinPause
      521020    0.00%       50  MethodLiveness::init_basic_blocks()
      518080    0.00%       43  constantPoolHandle::~constantPoolHandle()
      518050    0.00%       48  InterpreterRuntime::ldc(JavaThread*, bool)
      517611    0.00%       48  java.util.Arrays.equals
      512230    0.00%       51  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
      511490    0.00%       49  PhiResolver::create_node(LIR_OprDesc*, bool)
      510250    0.00%        6  G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker()
      508980    0.00%       45  ObjArrayAllocator::initialize(HeapWordImpl**) const
      507010    0.00%       48  java.lang.invoke.MemberName$Factory.resolve
      505911    0.00%       49  java.lang.invoke.LambdaForm.useCount
      504020    0.00%       47  LinearScan::eliminate_spill_moves()
      500190    0.00%       44  InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code)
      500100    0.00%       50  jdk.internal.org.objectweb.asm.ClassWriter.toByteArray
      499870    0.00%       45  Assembler::locate_operand(unsigned char*, Assembler::WhichOperand)
      499740    0.00%       49  java.lang.Long.getChars
      497341    0.00%       49  Type::hashcons()
      491500    0.00%       45  IntervalWalker::walk_to(int)
      490610    0.00%       48  GlobalValueNumbering::GlobalValueNumbering(IR*)
      489650    0.00%       46  BlockBegin::try_merge(ValueStack*)
      488350    0.00%       48  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode)
      482760    0.00%       47  _invokeBasic
      482210    0.00%       44  GraphBuilder::append_with_bci(Instruction*, int)
      475830    0.00%       45  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
      472720    0.00%       46  java.lang.invoke.MethodType.makeImpl
      466810    0.00%       46  jdk.internal.org.objectweb.asm.SymbolTable.addConstantNameAndType
      461320    0.00%       42  Matcher::match_tree(Node const*)
      460510    0.00%       44  java.lang.invoke.MethodType.checkPtypes
      459030    0.00%       44  Dependencies::assert_evol_method(ciMethod*)
      458120    0.00%       43  PhaseChaitin::merge_multidefs()
      451960    0.00%       39  PhaseGVN::transform_no_reclaim(Node*)
      451111    0.00%       42  MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*)
      446340    0.00%       42  PhaseOutput::BuildOopMaps()
      446320    0.00%       44  Bounce$$Lambda$2.0x0000000800c034f8.<init>
      445040    0.00%       42  PhaseIterGVN::remove_globally_dead_node(Node*)
      444540    0.00%       18  syscall
      444440    0.00%       30  __strlen_avx2
      443350    0.00%       42  LIR_Assembler::process_debug_info(LIR_Op*)
      437440    0.00%       37  Run.measure
      435960    0.00%       16  VMError::is_error_reported()
      435800    0.00%       43  java.lang.invoke.MethodType.hashCode
      435540    0.00%       43  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
      434020    0.00%       34  _IO_default_xsputn
      433560    0.00%       35  __memmove_avx_unaligned
      432950    0.00%       41  LIR_Assembler::emit_lir_list(LIR_List*)
      432460    0.00%       43  jdk.internal.org.objectweb.asm.Frame.pop
      431690    0.00%       42  PhaseIterGVN::subsume_node(Node*, Node*)
      431210    0.00%       37  MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*)
      430600    0.00%       43  java.lang.String.isLatin1
      426190    0.00%       42  PhaseIdealLoop::compute_early_ctrl(Node*, Node*)
      424670    0.00%       40  .annobin__ZN22Node_Backward_Iterator4nextEv.start
      420730    0.00%       38  .annobin__ZN9ChunkPool8allocateEmN17AllocFailStrategy13AllocFailEnumE.start
      418720    0.00%       38  LIRGenerator::do_Base(Base*)
      418710    0.00%       38  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
      415990    0.00%       40  RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*)
      413460    0.00%       41  java.lang.invoke.LambdaForm$Name.replaceNames
      412160    0.00%       40  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8
      411911    0.00%       39  sun.nio.cs.StreamEncoder.writeBytes
      408890    0.00%       36  ciMethodBlocks::do_analysis()
      407630    0.00%       39  CodeBuffer::finalize_oop_references(methodHandle const&)
      406110    0.00%       31  AbstractInterpreter::method_kind(methodHandle const&)
      404950    0.00%       39  jdk.internal.org.objectweb.asm.MethodWriter.visitMethodInsn
      404750    0.00%       40  GraphBuilder::invoke(Bytecodes::Code)
      403320    0.00%       25  ElfParser::loadSymbols(bool)
      403320    0.00%       35  BlockListBuilder::set_leaders()
      399710    0.00%       38  sun.nio.cs.StreamEncoder.implWrite
      399260    0.00%       39  java.lang.StringLatin1.indexOfChar
      395080    0.00%       35  metaspace::MetaspaceArena::allocate(unsigned long)
