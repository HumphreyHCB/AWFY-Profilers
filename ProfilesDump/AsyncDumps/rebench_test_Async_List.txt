--- Execution profile ---
Total samples       : 1417807
unknown_Java        : 19932 (1.41%)
not_walkable_Java   : 721 (0.05%)
deoptimization      : 4 (0.00%)

--- 197493713 ns (1.38%), 19592 samples
  [ 0] List.tail
  [ 1] [unknown_Java]

--- 81093260 ns (0.57%), 8024 samples
  [ 0] List.makeList
  [ 1] List.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 33325472 ns (0.23%), 3302 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 30765277 ns (0.21%), 3051 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 27583060 ns (0.19%), 2740 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 26601828 ns (0.19%), 2645 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 26542358 ns (0.19%), 2641 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 26313295 ns (0.18%), 2611 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 25600729 ns (0.18%), 2528 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 25335085 ns (0.18%), 2520 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 25208097 ns (0.18%), 2506 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 25115696 ns (0.18%), 2494 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 24639266 ns (0.17%), 2431 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 24594827 ns (0.17%), 2440 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 24422481 ns (0.17%), 2420 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 24336076 ns (0.17%), 2417 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 24266985 ns (0.17%), 2407 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 23148168 ns (0.16%), 2301 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 23053109 ns (0.16%), 2290 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 22497599 ns (0.16%), 2234 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 22370072 ns (0.16%), 2225 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 22113378 ns (0.15%), 2192 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 22067137 ns (0.15%), 2186 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 22001434 ns (0.15%), 2188 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 21786852 ns (0.15%), 2166 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 21719526 ns (0.15%), 2159 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 21387825 ns (0.15%), 2119 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 21180727 ns (0.15%), 2100 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 20953824 ns (0.15%), 2088 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 20902216 ns (0.15%), 2076 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 20876326 ns (0.15%), 2070 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 20864317 ns (0.15%), 2074 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20721564 ns (0.14%), 2059 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20648093 ns (0.14%), 2050 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20539306 ns (0.14%), 2039 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 20525324 ns (0.14%), 2038 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20501175 ns (0.14%), 2040 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20329607 ns (0.14%), 2016 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 20236278 ns (0.14%), 2014 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 20175160 ns (0.14%), 1997 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 19862551 ns (0.14%), 1968 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 19498566 ns (0.14%), 1891 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 19382096 ns (0.14%), 1923 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 19254989 ns (0.13%), 1906 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 19103994 ns (0.13%), 1882 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 19034862 ns (0.13%), 1887 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 19014758 ns (0.13%), 1888 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 18773135 ns (0.13%), 1844 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 18666684 ns (0.13%), 1851 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 18634674 ns (0.13%), 1854 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 18536073 ns (0.13%), 1829 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 18466704 ns (0.13%), 1833 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 18318177 ns (0.13%), 1822 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 18250000 ns (0.13%), 1811 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 18092444 ns (0.13%), 1799 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 18077152 ns (0.13%), 1789 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 18028065 ns (0.13%), 1766 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 18021445 ns (0.13%), 1791 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 17863412 ns (0.12%), 1767 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17861612 ns (0.12%), 1772 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 17857497 ns (0.12%), 1772 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 17778006 ns (0.12%), 1764 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 17774018 ns (0.12%), 1769 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17773480 ns (0.12%), 1765 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17752694 ns (0.12%), 1756 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17750526 ns (0.12%), 1767 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 17598348 ns (0.12%), 1747 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17481156 ns (0.12%), 1734 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17476945 ns (0.12%), 1739 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 17419779 ns (0.12%), 1737 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17415895 ns (0.12%), 1737 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 17402714 ns (0.12%), 1730 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17324024 ns (0.12%), 1721 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 17235704 ns (0.12%), 1710 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 17040779 ns (0.12%), 1691 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 16987886 ns (0.12%), 1668 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 16853733 ns (0.12%), 1671 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16685774 ns (0.12%), 1648 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16672572 ns (0.12%), 1652 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 16614805 ns (0.12%), 1650 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 16572486 ns (0.12%), 1649 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 16515474 ns (0.12%), 1641 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 16502773 ns (0.12%), 1642 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16498684 ns (0.12%), 1642 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16448435 ns (0.11%), 1630 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16288652 ns (0.11%), 1597 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 16115771 ns (0.11%), 1581 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 16097244 ns (0.11%), 1599 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 16077826 ns (0.11%), 1591 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 16034155 ns (0.11%), 1594 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 15929786 ns (0.11%), 1584 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 15915984 ns (0.11%), 1581 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 15890123 ns (0.11%), 1577 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 15703174 ns (0.11%), 1556 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

--- 15658664 ns (0.11%), 1555 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 15635184 ns (0.11%), 1556 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.benchmark
  [11] Benchmark.innerBenchmarkLoop
  [12] Run.measure
  [13] Run.doRuns
  [14] Run.runBenchmark
  [15] Harness.main

--- 15580480 ns (0.11%), 1548 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 15514403 ns (0.11%), 1542 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 15471674 ns (0.11%), 1530 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 15347128 ns (0.11%), 1516 samples
  [ 0] List.isShorterThan
  [ 1] List.tail
  [ 2] List.tail
  [ 3] List.tail
  [ 4] List.tail
  [ 5] List.tail
  [ 6] List.tail
  [ 7] List.tail
  [ 8] List.tail
  [ 9] List.tail
  [10] List.tail
  [11] List.tail
  [12] List.benchmark
  [13] Benchmark.innerBenchmarkLoop
  [14] Run.measure
  [15] Run.doRuns
  [16] Run.runBenchmark
  [17] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 11654588874   81.30%  1155445  List.isShorterThan
  1326000966    9.25%   131499  List$Element.getNext
   666259000    4.65%    66042  List.tail
   216611040    1.51%    21468  List.makeList
    51552606    0.36%     5116  List$Element.<init>
    22121924    0.15%     2195  List$Element.length
    13649902    0.10%     1305  Benchmark.innerBenchmarkLoop
    10207601    0.07%     1007  List.verifyResult
     8319581    0.06%      825  List$Element.setNext
     7502257    0.05%      710  Interpreter
     3354041    0.02%      299  __tls_get_addr
     2914871    0.02%      268  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     2682011    0.02%        9  G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord)
     2361502    0.02%      225  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     2360100    0.02%      211  [no_Java_frame]
     2087660    0.01%      203  LinearScan::build_intervals()
     1998811    0.01%      195  List.benchmark
     1916160    0.01%      182  DebugInformationRecorder::find_sharable_decode_offset(int)
     1885400    0.01%      187  IndexSetIterator::advance_and_next()
     1830920    0.01%      175  I2C/C2I adapters(0xb)
     1763820    0.01%       98  [vdso]
     1727290    0.01%      164  LIR_OpVisitState::visit(LIR_Op*)
     1656110    0.01%      162  PhaseChaitin::gather_lrg_masks(bool)
     1597780    0.01%      159  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
     1595370    0.01%      145  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
     1582550    0.01%      154  LinearScan::allocate_registers()
     1481201    0.01%       36  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
     1476680    0.01%      142  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1455080    0.01%      118  __memset_avx2_unaligned_erms
     1386250    0.01%      138  PhaseChaitin::Split(unsigned int, ResourceArea*)
     1378992    0.01%      126  vmSymbols::find_sid(Symbol const*)
     1359790    0.01%      134  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     1308400    0.01%      117  ciObjectFactory::get_metadata(Metadata*)
     1289051    0.01%      122  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
     1266500    0.01%      123  LinearScanWalker::alloc_free_reg(Interval*)
     1259220    0.01%      125  PhaseLive::compute(unsigned int)
     1233430    0.01%      116  LinearScan::compute_local_live_sets()
     1223050    0.01%      122  PhaseChaitin::post_allocate_copy_removal()
     1195261    0.01%      118  .annobin__ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack.start
     1177880    0.01%      107  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1150950    0.01%      114  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     1124051    0.01%      108  I2C/C2I adapters(0xbb)
     1080250    0.01%      108  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     1070690    0.01%       45  clock_gettime@GLIBC_2.2.5
     1041080    0.01%        8  CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*)
     1014850    0.01%       96  GraphBuilder::iterate_bytecodes_for_block(int)
     1003791    0.01%       90  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
      997520    0.01%       94  LinearScanWalker::free_collect_inactive_fixed(Interval*)
      974390    0.01%       86  Run.measure
      956710    0.01%       93  ValueStack::values_do(ValueVisitor*)
      937830    0.01%       61  __vfprintf_internal
      935170    0.01%       88  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
      916050    0.01%       85  jdk.internal.org.objectweb.asm.Frame.execute
      900901    0.01%       87  jdk.internal.org.objectweb.asm.ByteVector.putUTF8
      891490    0.01%       87  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
      876080    0.01%       81  methodHandle::~methodHandle()
      872140    0.01%       73  Dictionary::find(unsigned int, Symbol*, Handle)
      870060    0.01%       84  java.lang.Integer.valueOf
      852080    0.01%       75  __memmove_avx_unaligned_erms
      846330    0.01%       83  java.lang.invoke.MethodType.insertParameterTypes
      838590    0.01%       83  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
      828271    0.01%       73  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
      820680    0.01%       80  java.lang.invoke.DirectMethodHandle$Holder.invokeStatic
      793560    0.01%       64  ___pthread_mutex_lock
      764411    0.01%        4  G1CodeRootSet::contains(nmethod*)
      760290    0.01%       73  PhaseIdealLoop::Dominators()
      753471    0.01%        4  GenerateOopMap::do_method(int, int, int, int)
      745570    0.01%       73  ConstantPool::klass_at_impl(constantPoolHandle const&, int, JavaThread*)
      745460    0.01%       71  ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int)
      737430    0.01%       72  java.lang.invoke.LambdaForm$MH.0x0000000800c08400.invoke
      720090    0.01%       71  Matcher::xform(Node*, int)
      719270    0.01%       54  __GI___pthread_mutex_unlock_usercnt
      710760    0.00%       67  Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode)
      706350    0.00%       70  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
      705721    0.00%       71  java.lang.invoke.InvokerBytecodeGenerator.emitStaticInvoke
      702801    0.00%       76  _dl_update_slotinfo
      701331    0.00%       70  jdk.internal.org.objectweb.asm.Frame.push
      700351    0.00%        1  InterpreterOopMap::InterpreterOopMap()
      699120    0.00%       67  java.lang.AbstractStringBuilder.append
      672210    0.00%       64  NullCheckEliminator::iterate_one(BlockBegin*)
      670360    0.00%       52  AdapterHandlerLibrary::get_adapter(methodHandle const&)
      667371    0.00%       22  VMError::is_error_reported()
      664100    0.00%       55  __memmove_avx_unaligned
      654620    0.00%       65  PhaseCCP::analyze()
      652890    0.00%       65  NodeHash::hash_find_insert(Node*)
      650431    0.00%       46  MemAllocator::allocate() const
      642770    0.00%       64  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
      634800    0.00%       61  LIR_OpVisitState::append(LIR_OprDesc*&, LIR_OpVisitState::OprMode) [clone .constprop.0]
      629640    0.00%       58  CodeHeap::find_blob_unsafe(void*) const
      628720    0.00%       60  java.lang.Long.getChars
      627040    0.00%       61  _invokeBasic
      611800    0.00%       59  jdk.internal.org.objectweb.asm.Frame.pop
      600811    0.00%        1  .annobin__ZN30OopOopIterateBackwardsDispatchI25G1ScanEvacuatedObjClosureE5Table4initI13InstanceKlassEEvPS0_P7oopDescP5Klass.start
      598610    0.00%       51  _int_malloc
      596930    0.00%       59  java.util.Arrays.copyOf
      586150    0.00%       52  ___pthread_mutex_trylock
      584670    0.00%       58  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
      582670    0.00%       60  __GI___libc_malloc
      580271    0.00%       57  java.lang.invoke.LambdaForm.useCount
      572160    0.00%       57  java.lang.invoke.MethodType.checkPtypes
      567081    0.00%       55  sun.nio.cs.StreamEncoder.implWrite
      550200    0.00%       52  java.lang.Long.stringSize
      546040    0.00%       54  java.lang.Object.<init>
      544330    0.00%       54  Dict::Insert(void*, void*, bool)
      539571    0.00%       53  Type::cmp(Type const*, Type const*)
      537360    0.00%       18  Mutex::lock_without_safepoint_check()
      537080    0.00%       53  java.lang.StringConcatHelper.prepend
      531221    0.00%       49  java.lang.invoke.MethodType.equals
      517861    0.00%        6  G1ParCopyClosure<(G1Barrier)1, false>::do_oop(oopDesc**)
      515000    0.00%       48  java.lang.invoke.LambdaForm.normalize
      512631    0.00%       46  .annobin__ZN8Interval9add_rangeEii.start
      502020    0.00%       49  PhaseOutput::BuildOopMaps()
      500520    0.00%       49  PhaseIterGVN::add_users_to_worklist(Node*)
      489630    0.00%       45  java.lang.invoke.MemberName$Factory.resolve
      489600    0.00%       48  jdk.internal.org.objectweb.asm.SymbolTable.hash
      485811    0.00%       30  os::free(void*)
      482090    0.00%       48  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
      477890    0.00%       44  constantPoolHandle::~constantPoolHandle()
      477800    0.00%       46  java.lang.invoke.MethodType.makeImpl
      475270    0.00%       45  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8Reference
      474352    0.00%       38  _IO_default_xsputn
      471270    0.00%       47  Compile::identify_useful_nodes(Unique_Node_List&)
      470030    0.00%       47  PhaseIterGVN::transform_old(Node*)
      465131    0.00%       43  InterpreterRuntime::ldc(JavaThread*, bool)
      464410    0.00%       45  java.lang.invoke.MethodType.hashCode
      463090    0.00%       46  IndexSet::alloc_block_containing(unsigned int)
      462260    0.00%       45  java.lang.StringCoding.implEncodeAsciiArray
      459080    0.00%       44  CodeCache::find_blob(void*)
      457340    0.00%       45  java.util.concurrent.ConcurrentHashMap.putVal
      456150    0.00%       45  PhaseChaitin::merge_multidefs()
      454430    0.00%       40  Relocation::pd_call_destination(unsigned char*)
      451190    0.00%       44  LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind)
      449200    0.00%       43  PhiResolver::create_node(LIR_OprDesc*, bool)
      447760    0.00%       42  java.lang.invoke.LambdaForm$Name.<init>
      443600    0.00%       37  G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet<OverflowTaskQueue<ScannerTask, (MEMFLAGS)5, 131072u>, (MEMFLAGS)5>*)
      440970    0.00%       42  LinearScan::eliminate_spill_moves()
      440020    0.00%       36  NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
      439730    0.00%       41  MethodLiveness::init_basic_blocks()
      438690    0.00%       41  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm
      436990    0.00%       23  __strchr_avx2
      436930    0.00%       42  I2C/C2I adapters(0xba)
      436410    0.00%       42  Dependencies::assert_evol_method(ciMethod*)
      434390    0.00%       36  LinkResolver::check_method_loader_constraints(LinkInfo const&, methodHandle const&, char const*, JavaThread*)
      434080    0.00%       43  jdk.internal.org.objectweb.asm.SymbolTable.addConstantNameAndType
      433190    0.00%       42  jdk.internal.org.objectweb.asm.Type.getArgumentsAndReturnSizes
      432390    0.00%       43  PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
      430180    0.00%       43  Matcher::find_shared(Node*)
      429100    0.00%       41  BlockBegin::try_merge(ValueStack*)
      428280    0.00%       41  java.lang.String.getBytes
      426801    0.00%       42  .annobin__ZNK4Node6is_CFGEv.start
      420140    0.00%       38  Matcher::match_tree(Node const*)
      419110    0.00%       39  __tls_get_addr@plt
      417810    0.00%       40  GlobalValueNumbering::GlobalValueNumbering(IR*)
      413560    0.00%       39  GraphBuilder::append_with_bci(Instruction*, int)
      412470    0.00%       41  Compile::remove_useless_nodes(Unique_Node_List&)
      410640    0.00%       38  java.lang.invoke.MethodTypeForm.canonicalizeAll
      410531    0.00%       40  jdk.internal.org.objectweb.asm.SymbolTable.addConstantMemberReference
      408290    0.00%       36  msort_with_tmp.part.0
      404540    0.00%       40  jdk.internal.org.objectweb.asm.SymbolTable.addConstantUtf8
      403840    0.00%       35  BlockBegin::iterate_preorder(GrowableArray<bool>&, BlockClosure*)
      403550    0.00%       40  java.lang.String.getChars
      401800    0.00%       37  LinkResolver::resolve_method(LinkInfo const&, Bytecodes::Code, JavaThread*)
      399930    0.00%       40  java.lang.invoke.InvokerBytecodeGenerator.emitPushArgument
      397840    0.00%       40  PhaseChaitin::Select()
      396540    0.00%       37  java.lang.invoke.MemberName.<init>
      396400    0.00%       38  __memset_avx2_unaligned
      395201    0.00%       39  java.lang.invoke.MethodType$ConcurrentWeakInternSet.get
      392010    0.00%       38  Assembler::locate_operand(unsigned char*, Assembler::WhichOperand)
      391890    0.00%       12  os::elapsed_counter()
      391560    0.00%       39  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
      391010    0.00%       27  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
      390910    0.00%       32  MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*)
      390880    0.00%       39  jdk.internal.org.objectweb.asm.ClassWriter.toByteArray
      389080    0.00%       39  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
      388861    0.00%       39  PhaseAggressiveCoalesce::insert_copies(Matcher&)
      388750    0.00%       38  sun.nio.cs.StreamEncoder.writeBytes
      386411    0.00%       39  GraphBuilder::invoke(Bytecodes::Code)
      382210    0.00%       37  java.lang.StringLatin1.hashCode
      382190    0.00%       37  java.lang.StringLatin1.indexOfChar
      381540    0.00%       38  java.lang.invoke.InvokerBytecodeGenerator.addMethod
      381210    0.00%       37  Node::clone() const
      379080    0.00%       38  java.lang.invoke.LambdaForm$Name.replaceNames
      378680    0.00%       38  java.lang.invoke.InvokerBytecodeGenerator.clinit
      377300    0.00%       38  jdk.internal.org.objectweb.asm.MethodWriter.visitMethodInsn
      376430    0.00%       26  ciObjectFactory::ciObjectFactory(Arena*, int)
      374730    0.00%       37  Node::dominates(Node*, Node_List&)
      374231    0.00%       37  java.lang.String.isLatin1
      373350    0.00%       36  jdk.internal.org.objectweb.asm.SymbolTable$Entry.<init>
      372400    0.00%       37  java.lang.AbstractStringBuilder.putStringAt
      370500    0.00%       25  .annobin__ZN14AccessInternal19PostRuntimeDispatchIN12G1BarrierSet13AccessBarrierILm286822ES1_EELNS_11BarrierTypeE3ELm286822EE18oop_access_barrierEP7oopDescl.start
      369660    0.00%       25  __strlen_avx2
      369530    0.00%       36  ValueMap::find_insert(Instruction*)
      364660    0.00%       36  Interval::add_use_pos(int, IntervalUseKind)
      363230    0.00%       34  java.lang.StringConcatHelper.mix
      362070    0.00%       29  stringStream::write(char const*, unsigned long)
      362010    0.00%       32  sun.invoke.util.VerifyAccess.isTypeVisible
      360880    0.00%       35  methodHandle::operator=(methodHandle const&)
      359100    0.00%       33  .annobin__ZN9ChunkPool8allocateEmN17AllocFailStrategy13AllocFailEnumE.start
      354300    0.00%       34  MethodData::bci_to_dp(int)
      354080    0.00%        5  StatSamplerTask::task()
