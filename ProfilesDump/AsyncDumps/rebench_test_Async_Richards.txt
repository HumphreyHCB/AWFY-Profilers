--- Execution profile ---
Total samples       : 5791538
unknown_Java        : 26191 (0.45%)
not_walkable_Java   : 865 (0.01%)
deoptimization      : 38 (0.00%)

--- 13096271280 ns (22.42%), 1300125 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 4489616304 ns (7.69%), 445632 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 3998087320 ns (6.84%), 396873 samples
  [ 0] richards.Packet.<init>
  [ 1] richards.Scheduler.createPacket
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 3363223380 ns (5.76%), 333793 samples
  [ 0] itable stub
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 2825416461 ns (4.84%), 280300 samples
  [ 0] Richards.benchmark
  [ 1] Benchmark.innerBenchmarkLoop
  [ 2] Run.measure
  [ 3] Run.doRuns
  [ 4] Run.runBenchmark
  [ 5] Harness.main

--- 1951295669 ns (3.34%), 193724 samples
  [ 0] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1867320041 ns (3.20%), 185367 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.TaskState.<init>
  [ 2] richards.TaskControlBlock.<init>
  [ 3] richards.Scheduler.createTask
  [ 4] richards.Scheduler.createIdler
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 1717117121 ns (2.94%), 170430 samples
  [ 0] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1647651783 ns (2.82%), 163548 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1299689236 ns (2.23%), 129045 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1282525123 ns (2.20%), 127316 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.TaskState.<init>
  [ 2] richards.TaskState.createRunning
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1075557059 ns (1.84%), 106742 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 930326790 ns (1.59%), 92370 samples
  [ 0] richards.Scheduler.createPacket
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 813232340 ns (1.39%), 80678 samples
  [ 0] java.lang.Object.<init>
  [ 1] richards.RBObject.<init>
  [ 2] richards.TaskState.<init>
  [ 3] richards.TaskControlBlock.<init>
  [ 4] richards.Scheduler.createTask
  [ 5] richards.Scheduler.createIdler
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 765244916 ns (1.31%), 75951 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 735377533 ns (1.26%), 73000 samples
  [ 0] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 681594734 ns (1.17%), 67666 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 597526477 ns (1.02%), 59288 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createIdler
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 584944932 ns (1.00%), 58020 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 572846556 ns (0.98%), 56835 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 517032082 ns (0.89%), 51320 samples
  [ 0] richards.Scheduler.start
  [ 1] Richards.benchmark
  [ 2] Benchmark.innerBenchmarkLoop
  [ 3] Run.measure
  [ 4] Run.doRuns
  [ 5] Run.runBenchmark
  [ 6] Harness.main

--- 492445216 ns (0.84%), 48889 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 463049133 ns (0.79%), 45971 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 461762574 ns (0.79%), 45835 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 456499834 ns (0.78%), 45319 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 446901171 ns (0.77%), 44363 samples
  [ 0] richards.RBObject.<init>
  [ 1] richards.Packet.<init>
  [ 2] richards.Scheduler.createPacket
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 435451984 ns (0.75%), 43215 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 424036687 ns (0.73%), 42090 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 422382531 ns (0.72%), 41926 samples
  [ 0] richards.Scheduler.lambda$createDevice$0
  [ 1] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 366378608 ns (0.63%), 36339 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.TaskControlBlock.addInputAndCheckPriority
  [ 3] richards.Scheduler.queuePacket
  [ 4] richards.Scheduler.lambda$createHandler$1
  [ 5] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 6] richards.TaskControlBlock.runTask
  [ 7] richards.Scheduler.schedule
  [ 8] richards.Scheduler.start
  [ 9] Richards.benchmark
  [10] Benchmark.innerBenchmarkLoop
  [11] Run.measure
  [12] Run.doRuns
  [13] Run.runBenchmark
  [14] Harness.main

--- 361866041 ns (0.62%), 35903 samples
  [ 0] richards.Scheduler.lambda$createHandler$1
  [ 1] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 335607070 ns (0.57%), 33304 samples
  [ 0] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 306336539 ns (0.52%), 30401 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 296680673 ns (0.51%), 29445 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 284772416 ns (0.49%), 28258 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.deviceInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 283342433 ns (0.49%), 28121 samples
  [ 0] richards.Packet.<init>
  [ 1] richards.Scheduler.createPacket
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 234094850 ns (0.40%), 23239 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 209365180 ns (0.36%), 20785 samples
  [ 0] richards.TaskControlBlock.<init>
  [ 1] richards.Scheduler.createTask
  [ 2] richards.Scheduler.createWorker
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 202930068 ns (0.35%), 20146 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 200670024 ns (0.34%), 19924 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 197245786 ns (0.34%), 19561 samples
  [ 0] richards.Scheduler.createTask
  [ 1] richards.Scheduler.createWorker
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 190251792 ns (0.33%), 18888 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 187323351 ns (0.32%), 18593 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 180101000 ns (0.31%), 17867 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 165157589 ns (0.28%), 16404 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 162425859 ns (0.28%), 16116 samples
  [ 0] richards.TaskState.createRunning
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 156487532 ns (0.27%), 15534 samples
  [ 0] richards.Scheduler.lambda$createIdler$2
  [ 1] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 156092609 ns (0.27%), 15478 samples
  [ 0] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 1] [unknown_Java]

--- 152828109 ns (0.26%), 15166 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 152535089 ns (0.26%), 15139 samples
  [ 0] richards.Scheduler.lambda$createIdler$2
  [ 1] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 151636754 ns (0.26%), 15062 samples
  [ 0] richards.DeviceTaskDataRecord.getPending
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 148533357 ns (0.25%), 14758 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 145438605 ns (0.25%), 14437 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 133284504 ns (0.23%), 13231 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 131903147 ns (0.23%), 13099 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 131097005 ns (0.22%), 13022 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 126002135 ns (0.22%), 12505 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 125439025 ns (0.21%), 12455 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.deviceInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 122839493 ns (0.21%), 12183 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 118409549 ns (0.20%), 11764 samples
  [ 0] richards.Packet.getIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 116627148 ns (0.20%), 11576 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 115121161 ns (0.20%), 11436 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 112604488 ns (0.19%), 11188 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 111910800 ns (0.19%), 11117 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 108398288 ns (0.19%), 10757 samples
  [ 0] java.lang.invoke.DirectMethodHandle.allocateInstance
  [ 1] java.lang.invoke.DirectMethodHandle$Holder.newInvokeSpecial
  [ 2] java.lang.invoke.Invokers$Holder.linkToTargetMethod
  [ 3] richards.Scheduler.createIdler
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 97886201 ns (0.17%), 9719 samples
  [ 0] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 78412162 ns (0.13%), 7783 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 74700990 ns (0.13%), 7412 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 72589519 ns (0.12%), 7210 samples
  [ 0] richards.HandlerTaskDataRecord.workIn
  [ 1] richards.Scheduler.lambda$createHandler$1
  [ 2] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 72392358 ns (0.12%), 7183 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 71205717 ns (0.12%), 7077 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 66191462 ns (0.11%), 6570 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 64920777 ns (0.11%), 6429 samples
  [ 0] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 1] [unknown_Java]

--- 62988334 ns (0.11%), 6259 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 62304291 ns (0.11%), 6177 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 60741652 ns (0.10%), 6032 samples
  [ 0] richards.Packet.getLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 58982507 ns (0.10%), 5853 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 58467542 ns (0.10%), 5798 samples
  [ 0] richards.Scheduler.createTask
  [ 1] richards.Scheduler.createIdler
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 56221950 ns (0.10%), 5580 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 50599516 ns (0.09%), 5000 samples
  [ 0] richards.RBObject.append
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler.lambda$createHandler$1
  [ 4] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 49404192 ns (0.08%), 4906 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 48092164 ns (0.08%), 4772 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 43186256 ns (0.07%), 4287 samples
  [ 0] richards.WorkerTaskDataRecord.setCount
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 42240050 ns (0.07%), 4190 samples
  [ 0] richards.TaskControlBlock.getIdentity
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 40157005 ns (0.07%), 3985 samples
  [ 0] richards.WorkerTaskDataRecord.setDestination
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 39815808 ns (0.07%), 3951 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createWorker$3
  [ 3] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 39294092 ns (0.07%), 3903 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler.lambda$createIdler$2
  [ 2] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 38055852 ns (0.07%), 3774 samples
  [ 0] richards.TaskControlBlock.getPriority
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler.lambda$createIdler$2
  [ 3] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 38020341 ns (0.07%), 3771 samples
  [ 0] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 1] [unknown_Java]

--- 37877491 ns (0.06%), 3758 samples
  [ 0] java.lang.Object.<init>
  [ 1] richards.RBObject.<init>
  [ 2] richards.WorkerTaskDataRecord.<init>
  [ 3] richards.Scheduler.createWorker
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 37482236 ns (0.06%), 3723 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 36449708 ns (0.06%), 3620 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler.lambda$createIdler$2
  [ 2] richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 36370270 ns (0.06%), 3612 samples
  [ 0] richards.WorkerTaskDataRecord.getCount
  [ 1] richards.Scheduler.lambda$createWorker$3
  [ 2] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 36264666 ns (0.06%), 3599 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 35175240 ns (0.06%), 3498 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 34365073 ns (0.06%), 3411 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler.lambda$createHandler$1
  [ 3] richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 31405479 ns (0.05%), 3112 samples
  [ 0] richards.TaskState.createRunning
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 30508525 ns (0.05%), 3025 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler.lambda$createDevice$0
  [ 3] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 29268973 ns (0.05%), 2902 samples
  [ 0] richards.Scheduler.lambda$createWorker$3
  [ 1] richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 28953868 ns (0.05%), 2874 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler.lambda$createDevice$0
  [ 2] richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
 20951675815   35.87%  2079811  itable stub
  4310086673    7.38%   427830  richards.Packet.<init>
  3887001271    6.65%   385800  richards.Scheduler.schedule
  3597109965    6.16%   357081  richards.RBObject.<init>
  2826429481    4.84%   280391  Richards.benchmark
  2055200754    3.52%   204020  richards.Scheduler$$Lambda$5.0x0000000800c06c50.apply
  1881437151    3.22%   186720  richards.Scheduler$$Lambda$4.0x0000000800c06a28.apply
  1786263884    3.06%   177290  richards.TaskControlBlock.<init>
  1685648593    2.89%   167299  richards.RBObject.append
  1635882451    2.80%   162399  richards.TaskState.isTaskHoldingOrWaiting
  1300393885    2.23%   129072  richards.Packet.setLink
  1259948805    2.16%   125074  richards.TaskControlBlock.addInputAndCheckPriority
  1230305974    2.11%   122107  richards.HandlerTaskDataRecord.workInAdd
  1130590174    1.94%   112175  richards.TaskControlBlock.runTask
   931445702    1.59%    92478  richards.Scheduler.createPacket
   851343041    1.46%    84459  java.lang.Object.<init>
   774315824    1.33%    76863  richards.Scheduler$$Lambda$2.0x0000000800c07c78.apply
   553371072    0.95%    54920  richards.Scheduler.start
   488123434    0.84%    48444  richards.Scheduler.findTask
   435273421    0.75%    43199  richards.Scheduler$$Lambda$3.0x0000000800c06800.apply
   423686551    0.73%    42053  richards.Scheduler.lambda$createDevice$0
   377997063    0.65%    37523  richards.TaskState.setTaskHolding
   367094662    0.63%    36424  richards.Scheduler.lambda$createHandler$1
   311374041    0.53%    30907  richards.Scheduler.lambda$createIdler$2
   290099956    0.50%    28802  richards.Scheduler.queuePacket
   284107357    0.49%    28165  richards.Scheduler.createTask
   274962818    0.47%    27281  richards.Scheduler.lambda$createWorker$3
   194145638    0.33%    19256  richards.TaskState.createRunning
   177163635    0.30%    17579  richards.DeviceTaskDataRecord.setPending
   168543265    0.29%    16738  richards.Scheduler.holdSelf
   151747944    0.26%    15073  richards.DeviceTaskDataRecord.getPending
   118518279    0.20%    11775  richards.Packet.getIdentity
   109176319    0.19%    10831  java.lang.invoke.DirectMethodHandle.allocateInstance
    80386603    0.14%     7974  richards.TaskState.isWaitingWithPacket
    72980059    0.12%     7249  richards.HandlerTaskDataRecord.workIn
    67332122    0.12%     6676  richards.TaskControlBlock.getPriority
    61066232    0.10%     6065  richards.Packet.getLink
    43355626    0.07%     4304  richards.WorkerTaskDataRecord.setCount
    43115554    0.07%     4283  richards.IdleTaskDataRecord.setControl
    42700540    0.07%     4235  richards.TaskControlBlock.getIdentity
    40350155    0.07%     4002  richards.WorkerTaskDataRecord.setDestination
    36531450    0.06%     3628  richards.WorkerTaskDataRecord.getCount
    24229877    0.04%     2392  richards.HandlerTaskDataRecord.deviceInAdd
    23758306    0.04%     2355  richards.TaskState.<init>
    20448554    0.04%     2029  richards.Packet.setIdentity
    18364294    0.03%     1818  java.util.Arrays.fill
    15806781    0.03%     1561  richards.TaskState.createWaitingWithPacket
    13470855    0.02%     1338  richards.Scheduler.release
    12060287    0.02%     1194  IndexSetIterator::advance_and_next()
    10969151    0.02%     1086  PhaseChaitin::Split(unsigned int, ResourceArea*)
    10944616    0.02%     1080  Node::dominates(Node*, Node_List&)
    10835293    0.02%     1058  PhaseChaitin::gather_lrg_masks(bool)
     9966602    0.02%      989  InlineCacheBuffer
     9932324    0.02%      983  PhaseLive::compute(unsigned int)
     9597193    0.02%      956  PhaseIdealLoop::build_loop_late(VectorSet&, Node_List&, Node_Stack&)
     9465832    0.02%      934  .annobin__ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack.start
     9120884    0.02%      805  __tls_get_addr
     8953394    0.02%      853  Interpreter
     8072832    0.01%      795  Node::set_req_X(unsigned int, Node*, PhaseIterGVN*)
     7580212    0.01%      749  PhaseIdealLoop::build_loop_late_post_work(Node*, bool)
     7569491    0.01%      751  richards.TaskControlBlock.getLink
     7449161    0.01%      739  richards.Packet.setDatum
     7195715    0.01%      713  Node::is_dead_loop_safe() const
     7076501    0.01%      702  PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0]
     7076124    0.01%      700  PhaseIterGVN::subsume_node(Node*, Node*)
     6988175    0.01%      686  PhaseChaitin::post_allocate_copy_removal()
     6735042    0.01%      665  richards.TaskState.running
     6161854    0.01%      582  Benchmark.innerBenchmarkLoop
     5850192    0.01%      580  .annobin__ZN12PhaseChaitin18build_ifg_physicalEP12ResourceArea.start
     5791193    0.01%      570  richards.WorkerTaskDataRecord.<init>
     5388831    0.01%      525  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
     5251453    0.01%      521  PhiNode::is_unsafe_data_reference(Node*) const [clone .part.0]
     5144482    0.01%      466  PhaseIdealLoop::Dominators()
     4876841    0.01%      480  .annobin__ZN14PhaseIdealLoop15build_loop_treeEv.start
     4758671    0.01%      448  Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.0]
     4426932    0.01%      417  Arena::contains(void const*) const
     4283840    0.01%      405  Matcher::xform(Node*, int)
     4279082    0.01%      417  PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&)
     4229782    0.01%      377  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0]
     4182741    0.01%      369  resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum)
     4113451    0.01%      409  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)
     4091521    0.01%      396  Dict::Insert(void*, void*, bool)
     3981080    0.01%      309  __memset_avx2_unaligned_erms
     3906150    0.01%      384  NodeHash::hash_find_insert(Node*)
     3757801    0.01%      371  PhaseIdealLoop::get_ctrl(Node*) [clone .isra.0]
     3638621    0.01%      362  PhaseAggressiveCoalesce::insert_copies(Matcher&)
     3635431    0.01%      359  PhaseIterGVN::transform_old(Node*)
     3611861    0.01%      355  PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&)
     3416531    0.01%      336  PhaseIterGVN::add_users_to_worklist(Node*)
     3415792    0.01%      313  [no_Java_frame]
     3364920    0.01%      332  PhaseCCP::analyze()
     3350001    0.01%      332  Matcher::find_shared(Node*)
     3279752    0.01%      322  PhaseIdealLoop::get_late_ctrl_with_anti_dep(LoadNode*, Node*, Node*)
     3139280    0.01%      130  [vdso]
     3134103    0.01%      300  DebugInformationRecorder::find_sharable_decode_offset(int)
     3125401    0.01%      305  PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*)
     3115930    0.01%      292  Node::clone() const
     3095001    0.01%      303  IndexSet::alloc_block_containing(unsigned int)
     3073281    0.01%      301  .annobin__ZNK4Node6is_CFGEv.start
     3062011    0.01%      282  Matcher::Label_Root(Node const*, State*, Node*, Node*&)
     3043612    0.01%      302  PhaseOutput::BuildOopMaps()
     2829382    0.00%      266  ciObjectFactory::get_metadata(Metadata*)
     2821061    0.00%      208  NTarjan::DFS(NTarjan*, VectorSet&, PhaseIdealLoop*, unsigned int*)
     2807950    0.00%      276  PhaseChaitin::merge_multidefs()
     2719760    0.00%      266  richards.Scheduler.<init>
     2675182    0.00%      262  PhiNode::Ideal(PhaseGVN*, bool)
     2630952    0.00%      259  .annobin__ZN22Node_Backward_Iterator4nextEv.start
     2611300    0.00%      242  LinearScan::build_intervals()
     2583080    0.00%      192  IndexSet::initialize(unsigned int)
     2545080    0.00%      251  PhaseIdealLoop::get_early_ctrl(Node*)
     2510051    0.00%      222  vmSymbols::find_sid(Symbol const*)
     2474841    0.00%      229  Compile::identify_useful_nodes(Unique_Node_List&)
     2448740    0.00%      239  Compile::remove_useless_nodes(Unique_Node_List&)
     2441372    0.00%      227  LIR_OpVisitState::visit(LIR_Op*)
     2408100    0.00%      236  .annobin__ZNK7PhiNode5ValueEP8PhaseGVN.start
     2351650    0.00%      232  PhaseIdealLoop::is_dominator(Node*, Node*)
     2310830    0.00%      220  Type::cmp(Type const*, Type const*)
     2271200    0.00%      222  PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&, IndexSet*, unsigned int&) [clone .part.0]
     2260230    0.00%      215  java.lang.Boolean.valueOf
     2160810    0.00%      211  Unique_Node_List::remove(Node*)
     2117810    0.00%      210  PhaseChaitin::Select()
     2104190    0.00%      204  Matcher::match_tree(Node const*)
     2086060    0.00%      206  Node::remove_dead_region(PhaseGVN*, bool)
     2078050    0.00%      197  __memmove_avx_unaligned_erms
     2045421    0.00%      199  PhaseCFG::schedule_local(Block*, GrowableArray<int>&, VectorSet&, long*)
     2023800    0.00%      197  PhiNode::unique_input(PhaseTransform*, bool)
     1986921    0.00%      188  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
     1970281    0.00%      195  richards.TaskState.packetPending
     1947301    0.00%      186  LinearScan::allocate_registers()
     1923230    0.00%      141  ___pthread_mutex_lock
     1900300    0.00%       82  clock_gettime@GLIBC_2.2.5
     1894480    0.00%      187  Node::pinned() const
     1885823    0.00%      178  ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray<PhiNode*>&, bool&)
     1877071    0.00%      178  Node::Node(unsigned int)
     1856602    0.00%      180  I2C/C2I adapters(0xb)
     1845131    0.00%      180  Node::jvms() const
     1835520    0.00%      177  MachNode::ideal_reg() const
     1820770    0.00%      179  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&)
     1805521    0.00%      100  __GI___pthread_mutex_unlock_usercnt
     1795400    0.00%      164  LinearScanWalker::alloc_free_reg(Interval*)
     1770052    0.00%      166  LinearScan::assign_reg_num(GrowableArray<LIR_Op*>*, IntervalWalker*)
     1721490    0.00%      169  PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0]
     1700012    0.00%      168  PhaseIterGVN::optimize()
     1690860    0.00%      168  MultiNode::is_CFG() const
     1689661    0.00%      164  Node::out_grow(unsigned int)
     1689571    0.00%      168  PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&, PhaseChaitin::Pressure&, double) [clone .part.0] [clone .isra.0]
     1664270    0.00%      163  Node::unique_ctrl_out() const
     1655950    0.00%      165  PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*)
     1633330    0.00%      161  PhaseCFG::sched_call(Block*, unsigned int, Node_List&, GrowableArray<int>&, MachCallNode*, VectorSet&)
     1632620    0.00%      161  PhaseIdealLoop::build_loop_tree_impl(Node*, int)
     1621390    0.00%      151  Node::add_req(Node*)
     1599300    0.00%      147  MemAllocator::allocate() const
     1581100    0.00%      154  PhaseCFG::schedule_early(VectorSet&, Node_Stack&)
     1543281    0.00%      151  Type::hashcons()
     1538930    0.00%      151  DebugInformationRecorder::describe_scope(int, methodHandle const&, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*)
     1528540    0.00%      150  PhaseCFG::insert_anti_dependences(Block*, Node*, bool)
     1522520    0.00%      142  ciInstanceKlass::get_field_by_offset(int, bool)
     1488310    0.00%      147  TypeNode::hash() const
     1468271    0.00%      144  PhaseGVN::transform_no_reclaim(Node*)
     1455110    0.00%      145  PhaseIFG::remove_node(unsigned int)
     1447770    0.00%      144  ProjNode::pinned() const
     1446800    0.00%      135  LinearScan::compute_local_live_sets()
     1441410    0.00%      136  __memset_avx2_unaligned
     1436670    0.00%      141  PhaseIterGVN::remove_globally_dead_node(Node*)
     1427420    0.00%      138  TypeNode::bottom_type() const
     1421570    0.00%      140  CProjNode::is_block_proj() const
     1419850    0.00%       27  __futex_abstimed_wait_common
     1416770    0.00%      140  PhaseIFG::effective_degree(unsigned int) const
     1413050    0.00%      135  MergeMemNode::MergeMemNode(Node*)
     1402260    0.00%      129  SymbolTable::lookup_shared(char const*, int, unsigned int)
     1399890    0.00%      126  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
     1384360    0.00%      132  __memmove_avx_unaligned
     1375941    0.00%       99  __vfprintf_internal
     1371280    0.00%      134  AddPNode::bottom_type() const
     1371160    0.00%      136  PhaseIFG::re_insert(unsigned int)
     1360901    0.00%      133  sun.nio.cs.US_ASCII$Encoder.encodeArrayLoop
     1355760    0.00%      128  GraphBuilder::iterate_bytecodes_for_block(int)
     1350160    0.00%      114  methodHandle::~methodHandle()
     1348660    0.00%      127  LinearScanWalker::free_collect_inactive_fixed(Interval*)
     1335630    0.00%      131  PhaseCFG::schedule_pinned_nodes(VectorSet&)
     1308770    0.00%      107  Run.measure
     1296851    0.00%      128  PhaseIFG::SquareUp()
     1293300    0.00%      127  RegionNode::Ideal(PhaseGVN*, bool)
     1264430    0.00%      111  GrowableArrayWithAllocator<int, GrowableArray<int> >::grow(int)
     1253670    0.00%      123  .annobin__ZNK10RegionNode6is_CFGEv.start
     1253190    0.00%      123  MachNode::rematerialize() const
     1220500    0.00%      122  PhaseChaitin::Simplify()
     1213800    0.00%      119  PhiNode::Opcode() const
     1200280    0.00%      117  PhaseCFG::schedule_late(VectorSet&, Node_Stack&)
     1194300    0.00%      116  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]
     1169820    0.00%      115  richards.Packet.getData
     1154860    0.00%      114  PhaseChaitin::build_ifg_virtual()
     1154020    0.00%      111  ___pthread_mutex_trylock
     1153171    0.00%       91  Unsafe_AllocateInstance
     1152720    0.00%      103  Dictionary::find(unsigned int, Symbol*, Handle)
     1130071    0.00%      112  PhaseIdealLoop::split_if_with_blocks_pre(Node*)
     1129891    0.00%      103  InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const
     1122780    0.00%      111  MergeMemNode::Ideal(PhaseGVN*, bool)
     1117110    0.00%      102  __tls_get_addr@plt
     1110780    0.00%       27  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
